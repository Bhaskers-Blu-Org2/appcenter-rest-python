# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.user_profile_response_internal import UserProfileResponseInternal  # noqa: F401,E501


class UserProfileResponseManagement(UserProfileResponseInternal):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'updated_at': 'str',
        'verified': 'bool',
        'identity_providers': 'list[object]'
    }
    if hasattr(UserProfileResponseInternal, "swagger_types"):
        swagger_types.update(UserProfileResponseInternal.swagger_types)

    attribute_map = {
        'updated_at': 'updated_at',
        'verified': 'verified',
        'identity_providers': 'identity_providers'
    }
    if hasattr(UserProfileResponseInternal, "attribute_map"):
        attribute_map.update(UserProfileResponseInternal.attribute_map)

    def __init__(self, updated_at=None, verified=None, identity_providers=None, *args, **kwargs):  # noqa: E501
        """UserProfileResponseManagement - a model defined in Swagger"""  # noqa: E501
        self._updated_at = None
        self._verified = None
        self._identity_providers = None
        self.discriminator = None
        if updated_at is not None:
            self.updated_at = updated_at
        if verified is not None:
            self.verified = verified
        if identity_providers is not None:
            self.identity_providers = identity_providers
        UserProfileResponseInternal.__init__(self, *args, **kwargs)

    @property
    def updated_at(self):
        """Gets the updated_at of this UserProfileResponseManagement.  # noqa: E501

        The date when the app was last updated  # noqa: E501

        :return: The updated_at of this UserProfileResponseManagement.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UserProfileResponseManagement.

        The date when the app was last updated  # noqa: E501

        :param updated_at: The updated_at of this UserProfileResponseManagement.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def verified(self):
        """Gets the verified of this UserProfileResponseManagement.  # noqa: E501

        A boolean flag that indicates if the user is already verified  # noqa: E501

        :return: The verified of this UserProfileResponseManagement.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this UserProfileResponseManagement.

        A boolean flag that indicates if the user is already verified  # noqa: E501

        :param verified: The verified of this UserProfileResponseManagement.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def identity_providers(self):
        """Gets the identity_providers of this UserProfileResponseManagement.  # noqa: E501

        The identity providers associated with the user's account  # noqa: E501

        :return: The identity_providers of this UserProfileResponseManagement.  # noqa: E501
        :rtype: list[object]
        """
        return self._identity_providers

    @identity_providers.setter
    def identity_providers(self, identity_providers):
        """Sets the identity_providers of this UserProfileResponseManagement.

        The identity providers associated with the user's account  # noqa: E501

        :param identity_providers: The identity_providers of this UserProfileResponseManagement.  # noqa: E501
        :type: list[object]
        """

        self._identity_providers = identity_providers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserProfileResponseManagement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserProfileResponseManagement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
