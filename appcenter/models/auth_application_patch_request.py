# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AuthApplicationPatchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'policy_id': 'str',
        'scope_id': 'str',
        'scope_url': 'str',
        'id': 'str',
        'provider': 'str'
    }

    attribute_map = {
        'policy_id': 'policyId',
        'scope_id': 'scopeId',
        'scope_url': 'scopeUrl',
        'id': 'id',
        'provider': 'provider'
    }

    def __init__(self, policy_id=None, scope_id=None, scope_url=None, id=None, provider=None):  # noqa: E501
        """AuthApplicationPatchRequest - a model defined in Swagger"""  # noqa: E501
        self._policy_id = None
        self._scope_id = None
        self._scope_url = None
        self._id = None
        self._provider = None
        self.discriminator = None
        if policy_id is not None:
            self.policy_id = policy_id
        if scope_id is not None:
            self.scope_id = scope_id
        if scope_url is not None:
            self.scope_url = scope_url
        if id is not None:
            self.id = id
        if provider is not None:
            self.provider = provider

    @property
    def policy_id(self):
        """Gets the policy_id of this AuthApplicationPatchRequest.  # noqa: E501


        :return: The policy_id of this AuthApplicationPatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this AuthApplicationPatchRequest.


        :param policy_id: The policy_id of this AuthApplicationPatchRequest.  # noqa: E501
        :type: str
        """

        self._policy_id = policy_id

    @property
    def scope_id(self):
        """Gets the scope_id of this AuthApplicationPatchRequest.  # noqa: E501


        :return: The scope_id of this AuthApplicationPatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """Sets the scope_id of this AuthApplicationPatchRequest.


        :param scope_id: The scope_id of this AuthApplicationPatchRequest.  # noqa: E501
        :type: str
        """

        self._scope_id = scope_id

    @property
    def scope_url(self):
        """Gets the scope_url of this AuthApplicationPatchRequest.  # noqa: E501


        :return: The scope_url of this AuthApplicationPatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._scope_url

    @scope_url.setter
    def scope_url(self, scope_url):
        """Sets the scope_url of this AuthApplicationPatchRequest.


        :param scope_url: The scope_url of this AuthApplicationPatchRequest.  # noqa: E501
        :type: str
        """

        self._scope_url = scope_url

    @property
    def id(self):
        """Gets the id of this AuthApplicationPatchRequest.  # noqa: E501


        :return: The id of this AuthApplicationPatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthApplicationPatchRequest.


        :param id: The id of this AuthApplicationPatchRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def provider(self):
        """Gets the provider of this AuthApplicationPatchRequest.  # noqa: E501


        :return: The provider of this AuthApplicationPatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this AuthApplicationPatchRequest.


        :param provider: The provider of this AuthApplicationPatchRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["AADB2C", "Auth0", "Firebase"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthApplicationPatchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthApplicationPatchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
