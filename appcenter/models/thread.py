# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.exception import Exception  # noqa: F401,E501
from appcenter.models.stack_frame import StackFrame  # noqa: F401,E501


class Thread(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'frames': 'list[StackFrame]',
        'exception': 'Exception',
        'relevant': 'bool',
        'platform': 'str',
        'crashed': 'bool'
    }

    attribute_map = {
        'title': 'title',
        'frames': 'frames',
        'exception': 'exception',
        'relevant': 'relevant',
        'platform': 'platform',
        'crashed': 'crashed'
    }

    def __init__(self, title=None, frames=None, exception=None, relevant=None, platform=None, crashed=None):  # noqa: E501
        """Thread - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._frames = None
        self._exception = None
        self._relevant = None
        self._platform = None
        self._crashed = None
        self.discriminator = None
        self.title = title
        self.frames = frames
        if exception is not None:
            self.exception = exception
        if relevant is not None:
            self.relevant = relevant
        if platform is not None:
            self.platform = platform
        if crashed is not None:
            self.crashed = crashed

    @property
    def title(self):
        """Gets the title of this Thread.  # noqa: E501

        name of the thread  # noqa: E501

        :return: The title of this Thread.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Thread.

        name of the thread  # noqa: E501

        :param title: The title of this Thread.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def frames(self):
        """Gets the frames of this Thread.  # noqa: E501

        frames of that thread  # noqa: E501

        :return: The frames of this Thread.  # noqa: E501
        :rtype: list[StackFrame]
        """
        return self._frames

    @frames.setter
    def frames(self, frames):
        """Sets the frames of this Thread.

        frames of that thread  # noqa: E501

        :param frames: The frames of this Thread.  # noqa: E501
        :type: list[StackFrame]
        """
        if frames is None:
            raise ValueError("Invalid value for `frames`, must not be `None`")  # noqa: E501

        self._frames = frames

    @property
    def exception(self):
        """Gets the exception of this Thread.  # noqa: E501


        :return: The exception of this Thread.  # noqa: E501
        :rtype: Exception
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this Thread.


        :param exception: The exception of this Thread.  # noqa: E501
        :type: Exception
        """

        self._exception = exception

    @property
    def relevant(self):
        """Gets the relevant of this Thread.  # noqa: E501

        Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true  # noqa: E501

        :return: The relevant of this Thread.  # noqa: E501
        :rtype: bool
        """
        return self._relevant

    @relevant.setter
    def relevant(self, relevant):
        """Sets the relevant of this Thread.

        Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true  # noqa: E501

        :param relevant: The relevant of this Thread.  # noqa: E501
        :type: bool
        """

        self._relevant = relevant

    @property
    def platform(self):
        """Gets the platform of this Thread.  # noqa: E501

        SDK/Platform this thread is beeing generated from  # noqa: E501

        :return: The platform of this Thread.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this Thread.

        SDK/Platform this thread is beeing generated from  # noqa: E501

        :param platform: The platform of this Thread.  # noqa: E501
        :type: str
        """
        allowed_values = ["ios", "android", "xamarin", "react-native", "ndk", "unity", "other"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def crashed(self):
        """Gets the crashed of this Thread.  # noqa: E501

        True if this thread crashed  # noqa: E501

        :return: The crashed of this Thread.  # noqa: E501
        :rtype: bool
        """
        return self._crashed

    @crashed.setter
    def crashed(self, crashed):
        """Sets the crashed of this Thread.

        True if this thread crashed  # noqa: E501

        :param crashed: The crashed of this Thread.  # noqa: E501
        :type: bool
        """

        self._crashed = crashed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Thread, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Thread):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
