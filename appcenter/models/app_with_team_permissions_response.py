# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.app_response import AppResponse  # noqa: F401,E501
from appcenter.models.azure_subscription_response import AzureSubscriptionResponse  # noqa: F401,E501


class AppWithTeamPermissionsResponse(AppResponse):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team_permissions': 'list[str]'
    }
    if hasattr(AppResponse, "swagger_types"):
        swagger_types.update(AppResponse.swagger_types)

    attribute_map = {
        'team_permissions': 'team_permissions'
    }
    if hasattr(AppResponse, "attribute_map"):
        attribute_map.update(AppResponse.attribute_map)

    def __init__(self, team_permissions=None, *args, **kwargs):  # noqa: E501
        """AppWithTeamPermissionsResponse - a model defined in Swagger"""  # noqa: E501
        self._team_permissions = None
        self.discriminator = None
        if team_permissions is not None:
            self.team_permissions = team_permissions
        AppResponse.__init__(self, *args, **kwargs)

    @property
    def team_permissions(self):
        """Gets the team_permissions of this AppWithTeamPermissionsResponse.  # noqa: E501

        The permissions the team has for the app  # noqa: E501

        :return: The team_permissions of this AppWithTeamPermissionsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._team_permissions

    @team_permissions.setter
    def team_permissions(self, team_permissions):
        """Sets the team_permissions of this AppWithTeamPermissionsResponse.

        The permissions the team has for the app  # noqa: E501

        :param team_permissions: The team_permissions of this AppWithTeamPermissionsResponse.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["manager", "developer", "viewer"]  # noqa: E501
        if not set(team_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `team_permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(team_permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._team_permissions = team_permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppWithTeamPermissionsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppWithTeamPermissionsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
