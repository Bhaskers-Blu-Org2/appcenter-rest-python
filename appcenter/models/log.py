# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.device import Device  # noqa: F401,E501


class Log(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'timestamp': 'datetime',
        'install_id': 'str',
        'device': 'Device'
    }

    attribute_map = {
        'type': 'type',
        'timestamp': 'timestamp',
        'install_id': 'install_id',
        'device': 'device'
    }

    discriminator_value_class_map = {

          'HandledErrorLog': 'HandledErrorLog',
'PageLog': 'PageLog',
'EventLog': 'EventLog',
'PushInstallationLog': 'PushInstallationLog',
'CustomPropertyLog': 'CustomPropertyLog',
'UnhandledErrorLog': 'UnhandledErrorLog',
'StartServiceLog': 'StartServiceLog',
'LogWithProperties': 'LogWithProperties',
'StartSessionLog': 'StartSessionLog',
'ErrorLog': 'ErrorLog'    }

    def __init__(self, type=None, timestamp=None, install_id=None, device=None):  # noqa: E501
        """Log - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._timestamp = None
        self._install_id = None
        self._device = None
        self.discriminator = 'type'
        self.type = type
        self.timestamp = timestamp
        self.install_id = install_id
        self.device = device

    @property
    def type(self):
        """Gets the type of this Log.  # noqa: E501

        Log type.   # noqa: E501

        :return: The type of this Log.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Log.

        Log type.   # noqa: E501

        :param type: The type of this Log.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["event", "page", "start_session", "error", "push_installation", "start_service", "custom_properties"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def timestamp(self):
        """Gets the timestamp of this Log.  # noqa: E501

        Log creation timestamp.   # noqa: E501

        :return: The timestamp of this Log.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Log.

        Log creation timestamp.   # noqa: E501

        :param timestamp: The timestamp of this Log.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def install_id(self):
        """Gets the install_id of this Log.  # noqa: E501

        Install ID.   # noqa: E501

        :return: The install_id of this Log.  # noqa: E501
        :rtype: str
        """
        return self._install_id

    @install_id.setter
    def install_id(self, install_id):
        """Sets the install_id of this Log.

        Install ID.   # noqa: E501

        :param install_id: The install_id of this Log.  # noqa: E501
        :type: str
        """
        if install_id is None:
            raise ValueError("Invalid value for `install_id`, must not be `None`")  # noqa: E501

        self._install_id = install_id

    @property
    def device(self):
        """Gets the device of this Log.  # noqa: E501


        :return: The device of this Log.  # noqa: E501
        :rtype: Device
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this Log.


        :param device: The device of this Log.  # noqa: E501
        :type: Device
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Log, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Log):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
