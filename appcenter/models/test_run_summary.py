# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TestRunSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'status_description': 'str',
        'failed': 'float',
        'passed': 'float',
        'completed': 'bool'
    }

    attribute_map = {
        '_date': 'date',
        'status_description': 'statusDescription',
        'failed': 'failed',
        'passed': 'passed',
        'completed': 'completed'
    }

    def __init__(self, _date=None, status_description=None, failed=None, passed=None, completed=None):  # noqa: E501
        """TestRunSummary - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._status_description = None
        self._failed = None
        self._passed = None
        self._completed = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if status_description is not None:
            self.status_description = status_description
        if failed is not None:
            self.failed = failed
        if passed is not None:
            self.passed = passed
        if completed is not None:
            self.completed = completed

    @property
    def _date(self):
        """Gets the _date of this TestRunSummary.  # noqa: E501

        Date of the test run.  # noqa: E501

        :return: The _date of this TestRunSummary.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TestRunSummary.

        Date of the test run.  # noqa: E501

        :param _date: The _date of this TestRunSummary.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def status_description(self):
        """Gets the status_description of this TestRunSummary.  # noqa: E501

        Human-readable status of the test run.  # noqa: E501

        :return: The status_description of this TestRunSummary.  # noqa: E501
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this TestRunSummary.

        Human-readable status of the test run.  # noqa: E501

        :param status_description: The status_description of this TestRunSummary.  # noqa: E501
        :type: str
        """

        self._status_description = status_description

    @property
    def failed(self):
        """Gets the failed of this TestRunSummary.  # noqa: E501

        Number of failed tests  # noqa: E501

        :return: The failed of this TestRunSummary.  # noqa: E501
        :rtype: float
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this TestRunSummary.

        Number of failed tests  # noqa: E501

        :param failed: The failed of this TestRunSummary.  # noqa: E501
        :type: float
        """

        self._failed = failed

    @property
    def passed(self):
        """Gets the passed of this TestRunSummary.  # noqa: E501

        Number of passed tests  # noqa: E501

        :return: The passed of this TestRunSummary.  # noqa: E501
        :rtype: float
        """
        return self._passed

    @passed.setter
    def passed(self, passed):
        """Sets the passed of this TestRunSummary.

        Number of passed tests  # noqa: E501

        :param passed: The passed of this TestRunSummary.  # noqa: E501
        :type: float
        """

        self._passed = passed

    @property
    def completed(self):
        """Gets the completed of this TestRunSummary.  # noqa: E501

        Tells whether the test run has completed  # noqa: E501

        :return: The completed of this TestRunSummary.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this TestRunSummary.

        Tells whether the test run has completed  # noqa: E501

        :param completed: The completed of this TestRunSummary.  # noqa: E501
        :type: bool
        """

        self._completed = completed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestRunSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestRunSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
