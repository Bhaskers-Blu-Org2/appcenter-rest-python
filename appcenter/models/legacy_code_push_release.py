# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LegacyCodePushRelease(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_version': 'str',
        'is_disabled': 'bool',
        'is_mandatory': 'bool',
        'rollout': 'int',
        'blob_url': 'str',
        'size': 'int',
        'release_method': 'str',
        'upload_time': 'int',
        'label': 'str',
        'released_by_user_id': 'str',
        'diff_package_map': 'object'
    }

    attribute_map = {
        'app_version': 'appVersion',
        'is_disabled': 'isDisabled',
        'is_mandatory': 'isMandatory',
        'rollout': 'rollout',
        'blob_url': 'blobUrl',
        'size': 'size',
        'release_method': 'releaseMethod',
        'upload_time': 'uploadTime',
        'label': 'label',
        'released_by_user_id': 'releasedByUserId',
        'diff_package_map': 'diffPackageMap'
    }

    def __init__(self, app_version=None, is_disabled=None, is_mandatory=None, rollout=None, blob_url=None, size=None, release_method=None, upload_time=None, label=None, released_by_user_id=None, diff_package_map=None):  # noqa: E501
        """LegacyCodePushRelease - a model defined in Swagger"""  # noqa: E501
        self._app_version = None
        self._is_disabled = None
        self._is_mandatory = None
        self._rollout = None
        self._blob_url = None
        self._size = None
        self._release_method = None
        self._upload_time = None
        self._label = None
        self._released_by_user_id = None
        self._diff_package_map = None
        self.discriminator = None
        if app_version is not None:
            self.app_version = app_version
        if is_disabled is not None:
            self.is_disabled = is_disabled
        if is_mandatory is not None:
            self.is_mandatory = is_mandatory
        if rollout is not None:
            self.rollout = rollout
        if blob_url is not None:
            self.blob_url = blob_url
        if size is not None:
            self.size = size
        if release_method is not None:
            self.release_method = release_method
        if upload_time is not None:
            self.upload_time = upload_time
        if label is not None:
            self.label = label
        if released_by_user_id is not None:
            self.released_by_user_id = released_by_user_id
        if diff_package_map is not None:
            self.diff_package_map = diff_package_map

    @property
    def app_version(self):
        """Gets the app_version of this LegacyCodePushRelease.  # noqa: E501

        The version of the release  # noqa: E501

        :return: The app_version of this LegacyCodePushRelease.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this LegacyCodePushRelease.

        The version of the release  # noqa: E501

        :param app_version: The app_version of this LegacyCodePushRelease.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    @property
    def is_disabled(self):
        """Gets the is_disabled of this LegacyCodePushRelease.  # noqa: E501

        Flag used to determine if release is disabled  # noqa: E501

        :return: The is_disabled of this LegacyCodePushRelease.  # noqa: E501
        :rtype: bool
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this LegacyCodePushRelease.

        Flag used to determine if release is disabled  # noqa: E501

        :param is_disabled: The is_disabled of this LegacyCodePushRelease.  # noqa: E501
        :type: bool
        """

        self._is_disabled = is_disabled

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this LegacyCodePushRelease.  # noqa: E501

        Flag used to determine if release is mandatory  # noqa: E501

        :return: The is_mandatory of this LegacyCodePushRelease.  # noqa: E501
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this LegacyCodePushRelease.

        Flag used to determine if release is mandatory  # noqa: E501

        :param is_mandatory: The is_mandatory of this LegacyCodePushRelease.  # noqa: E501
        :type: bool
        """

        self._is_mandatory = is_mandatory

    @property
    def rollout(self):
        """Gets the rollout of this LegacyCodePushRelease.  # noqa: E501

        Pecentage (out of 100) that release is deployed to  # noqa: E501

        :return: The rollout of this LegacyCodePushRelease.  # noqa: E501
        :rtype: int
        """
        return self._rollout

    @rollout.setter
    def rollout(self, rollout):
        """Sets the rollout of this LegacyCodePushRelease.

        Pecentage (out of 100) that release is deployed to  # noqa: E501

        :param rollout: The rollout of this LegacyCodePushRelease.  # noqa: E501
        :type: int
        """

        self._rollout = rollout

    @property
    def blob_url(self):
        """Gets the blob_url of this LegacyCodePushRelease.  # noqa: E501

        Location (URL) of release package  # noqa: E501

        :return: The blob_url of this LegacyCodePushRelease.  # noqa: E501
        :rtype: str
        """
        return self._blob_url

    @blob_url.setter
    def blob_url(self, blob_url):
        """Sets the blob_url of this LegacyCodePushRelease.

        Location (URL) of release package  # noqa: E501

        :param blob_url: The blob_url of this LegacyCodePushRelease.  # noqa: E501
        :type: str
        """

        self._blob_url = blob_url

    @property
    def size(self):
        """Gets the size of this LegacyCodePushRelease.  # noqa: E501

        Size of release package  # noqa: E501

        :return: The size of this LegacyCodePushRelease.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this LegacyCodePushRelease.

        Size of release package  # noqa: E501

        :param size: The size of this LegacyCodePushRelease.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def release_method(self):
        """Gets the release_method of this LegacyCodePushRelease.  # noqa: E501

        Method used to deploy release  # noqa: E501

        :return: The release_method of this LegacyCodePushRelease.  # noqa: E501
        :rtype: str
        """
        return self._release_method

    @release_method.setter
    def release_method(self, release_method):
        """Sets the release_method of this LegacyCodePushRelease.

        Method used to deploy release  # noqa: E501

        :param release_method: The release_method of this LegacyCodePushRelease.  # noqa: E501
        :type: str
        """

        self._release_method = release_method

    @property
    def upload_time(self):
        """Gets the upload_time of this LegacyCodePushRelease.  # noqa: E501

        Release upload time as epoch Unix timestamp  # noqa: E501

        :return: The upload_time of this LegacyCodePushRelease.  # noqa: E501
        :rtype: int
        """
        return self._upload_time

    @upload_time.setter
    def upload_time(self, upload_time):
        """Sets the upload_time of this LegacyCodePushRelease.

        Release upload time as epoch Unix timestamp  # noqa: E501

        :param upload_time: The upload_time of this LegacyCodePushRelease.  # noqa: E501
        :type: int
        """

        self._upload_time = upload_time

    @property
    def label(self):
        """Gets the label of this LegacyCodePushRelease.  # noqa: E501

        Release label (aka release name)  # noqa: E501

        :return: The label of this LegacyCodePushRelease.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this LegacyCodePushRelease.

        Release label (aka release name)  # noqa: E501

        :param label: The label of this LegacyCodePushRelease.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def released_by_user_id(self):
        """Gets the released_by_user_id of this LegacyCodePushRelease.  # noqa: E501

        User ID that triggered most recent release  # noqa: E501

        :return: The released_by_user_id of this LegacyCodePushRelease.  # noqa: E501
        :rtype: str
        """
        return self._released_by_user_id

    @released_by_user_id.setter
    def released_by_user_id(self, released_by_user_id):
        """Sets the released_by_user_id of this LegacyCodePushRelease.

        User ID that triggered most recent release  # noqa: E501

        :param released_by_user_id: The released_by_user_id of this LegacyCodePushRelease.  # noqa: E501
        :type: str
        """

        self._released_by_user_id = released_by_user_id

    @property
    def diff_package_map(self):
        """Gets the diff_package_map of this LegacyCodePushRelease.  # noqa: E501

        Object containing URL and size of changed package hashes contained in the release  # noqa: E501

        :return: The diff_package_map of this LegacyCodePushRelease.  # noqa: E501
        :rtype: object
        """
        return self._diff_package_map

    @diff_package_map.setter
    def diff_package_map(self, diff_package_map):
        """Sets the diff_package_map of this LegacyCodePushRelease.

        Object containing URL and size of changed package hashes contained in the release  # noqa: E501

        :param diff_package_map: The diff_package_map of this LegacyCodePushRelease.  # noqa: E501
        :type: object
        """

        self._diff_package_map = diff_package_map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LegacyCodePushRelease, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LegacyCodePushRelease):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
