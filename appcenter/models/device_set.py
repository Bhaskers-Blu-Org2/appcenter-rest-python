# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.device_set_configuration import DeviceSetConfiguration  # noqa: F401,E501
from appcenter.models.device_set_owner import DeviceSetOwner  # noqa: F401,E501


class DeviceSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'manufacturer_count': 'float',
        'name': 'str',
        'slug': 'str',
        'owner': 'DeviceSetOwner',
        'os_version_count': 'float',
        'device_configurations': 'list[DeviceSetConfiguration]'
    }

    attribute_map = {
        'id': 'id',
        'manufacturer_count': 'manufacturerCount',
        'name': 'name',
        'slug': 'slug',
        'owner': 'owner',
        'os_version_count': 'osVersionCount',
        'device_configurations': 'deviceConfigurations'
    }

    def __init__(self, id=None, manufacturer_count=None, name=None, slug=None, owner=None, os_version_count=None, device_configurations=None):  # noqa: E501
        """DeviceSet - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._manufacturer_count = None
        self._name = None
        self._slug = None
        self._owner = None
        self._os_version_count = None
        self._device_configurations = None
        self.discriminator = None
        self.id = id
        if manufacturer_count is not None:
            self.manufacturer_count = manufacturer_count
        self.name = name
        if slug is not None:
            self.slug = slug
        self.owner = owner
        if os_version_count is not None:
            self.os_version_count = os_version_count
        self.device_configurations = device_configurations

    @property
    def id(self):
        """Gets the id of this DeviceSet.  # noqa: E501

        Identifier of the device set  # noqa: E501

        :return: The id of this DeviceSet.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceSet.

        Identifier of the device set  # noqa: E501

        :param id: The id of this DeviceSet.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def manufacturer_count(self):
        """Gets the manufacturer_count of this DeviceSet.  # noqa: E501

        The number of manufacturers in the device set's device selection  # noqa: E501

        :return: The manufacturer_count of this DeviceSet.  # noqa: E501
        :rtype: float
        """
        return self._manufacturer_count

    @manufacturer_count.setter
    def manufacturer_count(self, manufacturer_count):
        """Sets the manufacturer_count of this DeviceSet.

        The number of manufacturers in the device set's device selection  # noqa: E501

        :param manufacturer_count: The manufacturer_count of this DeviceSet.  # noqa: E501
        :type: float
        """

        self._manufacturer_count = manufacturer_count

    @property
    def name(self):
        """Gets the name of this DeviceSet.  # noqa: E501

        Name of the device set  # noqa: E501

        :return: The name of this DeviceSet.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceSet.

        Name of the device set  # noqa: E501

        :param name: The name of this DeviceSet.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this DeviceSet.  # noqa: E501

        Slug of the device set  # noqa: E501

        :return: The slug of this DeviceSet.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this DeviceSet.

        Slug of the device set  # noqa: E501

        :param slug: The slug of this DeviceSet.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def owner(self):
        """Gets the owner of this DeviceSet.  # noqa: E501


        :return: The owner of this DeviceSet.  # noqa: E501
        :rtype: DeviceSetOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this DeviceSet.


        :param owner: The owner of this DeviceSet.  # noqa: E501
        :type: DeviceSetOwner
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def os_version_count(self):
        """Gets the os_version_count of this DeviceSet.  # noqa: E501

        The number of os versions in the device set's device selection  # noqa: E501

        :return: The os_version_count of this DeviceSet.  # noqa: E501
        :rtype: float
        """
        return self._os_version_count

    @os_version_count.setter
    def os_version_count(self, os_version_count):
        """Sets the os_version_count of this DeviceSet.

        The number of os versions in the device set's device selection  # noqa: E501

        :param os_version_count: The os_version_count of this DeviceSet.  # noqa: E501
        :type: float
        """

        self._os_version_count = os_version_count

    @property
    def device_configurations(self):
        """Gets the device_configurations of this DeviceSet.  # noqa: E501


        :return: The device_configurations of this DeviceSet.  # noqa: E501
        :rtype: list[DeviceSetConfiguration]
        """
        return self._device_configurations

    @device_configurations.setter
    def device_configurations(self, device_configurations):
        """Sets the device_configurations of this DeviceSet.


        :param device_configurations: The device_configurations of this DeviceSet.  # noqa: E501
        :type: list[DeviceSetConfiguration]
        """
        if device_configurations is None:
            raise ValueError("Invalid value for `device_configurations`, must not be `None`")  # noqa: E501

        self._device_configurations = device_configurations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
