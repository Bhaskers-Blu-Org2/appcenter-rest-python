# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LogTraceDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_secret': 'str',
        'install_id': 'str',
        'expiration': 'datetime'
    }

    attribute_map = {
        'app_secret': 'app_secret',
        'install_id': 'install_id',
        'expiration': 'expiration'
    }

    def __init__(self, app_secret=None, install_id=None, expiration=None):  # noqa: E501
        """LogTraceDefinition - a model defined in Swagger"""  # noqa: E501
        self._app_secret = None
        self._install_id = None
        self._expiration = None
        self.discriminator = None
        self.app_secret = app_secret
        if install_id is not None:
            self.install_id = install_id
        if expiration is not None:
            self.expiration = expiration

    @property
    def app_secret(self):
        """Gets the app_secret of this LogTraceDefinition.  # noqa: E501


        :return: The app_secret of this LogTraceDefinition.  # noqa: E501
        :rtype: str
        """
        return self._app_secret

    @app_secret.setter
    def app_secret(self, app_secret):
        """Sets the app_secret of this LogTraceDefinition.


        :param app_secret: The app_secret of this LogTraceDefinition.  # noqa: E501
        :type: str
        """
        if app_secret is None:
            raise ValueError("Invalid value for `app_secret`, must not be `None`")  # noqa: E501

        self._app_secret = app_secret

    @property
    def install_id(self):
        """Gets the install_id of this LogTraceDefinition.  # noqa: E501


        :return: The install_id of this LogTraceDefinition.  # noqa: E501
        :rtype: str
        """
        return self._install_id

    @install_id.setter
    def install_id(self, install_id):
        """Sets the install_id of this LogTraceDefinition.


        :param install_id: The install_id of this LogTraceDefinition.  # noqa: E501
        :type: str
        """

        self._install_id = install_id

    @property
    def expiration(self):
        """Gets the expiration of this LogTraceDefinition.  # noqa: E501


        :return: The expiration of this LogTraceDefinition.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this LogTraceDefinition.


        :param expiration: The expiration of this LogTraceDefinition.  # noqa: E501
        :type: datetime
        """

        self._expiration = expiration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogTraceDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogTraceDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
