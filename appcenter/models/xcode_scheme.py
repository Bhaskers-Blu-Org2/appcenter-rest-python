# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.xcode_archive_project import XcodeArchiveProject  # noqa: F401,E501


class XcodeScheme(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'has_test_action': 'bool',
        'archive_configuration': 'str',
        'archive_project': 'XcodeArchiveProject'
    }

    attribute_map = {
        'name': 'name',
        'has_test_action': 'hasTestAction',
        'archive_configuration': 'archiveConfiguration',
        'archive_project': 'archiveProject'
    }

    def __init__(self, name=None, has_test_action=None, archive_configuration=None, archive_project=None):  # noqa: E501
        """XcodeScheme - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._has_test_action = None
        self._archive_configuration = None
        self._archive_project = None
        self.discriminator = None
        self.name = name
        self.has_test_action = has_test_action
        if archive_configuration is not None:
            self.archive_configuration = archive_configuration
        if archive_project is not None:
            self.archive_project = archive_project

    @property
    def name(self):
        """Gets the name of this XcodeScheme.  # noqa: E501

        Scheme name  # noqa: E501

        :return: The name of this XcodeScheme.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this XcodeScheme.

        Scheme name  # noqa: E501

        :param name: The name of this XcodeScheme.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def has_test_action(self):
        """Gets the has_test_action of this XcodeScheme.  # noqa: E501

        Does scheme have a test action?  # noqa: E501

        :return: The has_test_action of this XcodeScheme.  # noqa: E501
        :rtype: bool
        """
        return self._has_test_action

    @has_test_action.setter
    def has_test_action(self, has_test_action):
        """Sets the has_test_action of this XcodeScheme.

        Does scheme have a test action?  # noqa: E501

        :param has_test_action: The has_test_action of this XcodeScheme.  # noqa: E501
        :type: bool
        """
        if has_test_action is None:
            raise ValueError("Invalid value for `has_test_action`, must not be `None`")  # noqa: E501

        self._has_test_action = has_test_action

    @property
    def archive_configuration(self):
        """Gets the archive_configuration of this XcodeScheme.  # noqa: E501

        Build configuration set in Archive action  # noqa: E501

        :return: The archive_configuration of this XcodeScheme.  # noqa: E501
        :rtype: str
        """
        return self._archive_configuration

    @archive_configuration.setter
    def archive_configuration(self, archive_configuration):
        """Sets the archive_configuration of this XcodeScheme.

        Build configuration set in Archive action  # noqa: E501

        :param archive_configuration: The archive_configuration of this XcodeScheme.  # noqa: E501
        :type: str
        """

        self._archive_configuration = archive_configuration

    @property
    def archive_project(self):
        """Gets the archive_project of this XcodeScheme.  # noqa: E501


        :return: The archive_project of this XcodeScheme.  # noqa: E501
        :rtype: XcodeArchiveProject
        """
        return self._archive_project

    @archive_project.setter
    def archive_project(self, archive_project):
        """Sets the archive_project of this XcodeScheme.


        :param archive_project: The archive_project of this XcodeScheme.  # noqa: E501
        :type: XcodeArchiveProject
        """

        self._archive_project = archive_project

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(XcodeScheme, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XcodeScheme):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
