# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.distribution_group_response import DistributionGroupResponse  # noqa: F401,E501


class GeneralDistributionGroupDetailsResponse(DistributionGroupResponse):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_shared': 'bool',
        'owner_app_id': 'str',
        'owner_org_id': 'str'
    }
    if hasattr(DistributionGroupResponse, "swagger_types"):
        swagger_types.update(DistributionGroupResponse.swagger_types)

    attribute_map = {
        'is_shared': 'is_shared',
        'owner_app_id': 'owner_app_id',
        'owner_org_id': 'owner_org_id'
    }
    if hasattr(DistributionGroupResponse, "attribute_map"):
        attribute_map.update(DistributionGroupResponse.attribute_map)

    def __init__(self, is_shared=None, owner_app_id=None, owner_org_id=None, *args, **kwargs):  # noqa: E501
        """GeneralDistributionGroupDetailsResponse - a model defined in Swagger"""  # noqa: E501
        self._is_shared = None
        self._owner_app_id = None
        self._owner_org_id = None
        self.discriminator = None
        if is_shared is not None:
            self.is_shared = is_shared
        if owner_app_id is not None:
            self.owner_app_id = owner_app_id
        if owner_org_id is not None:
            self.owner_org_id = owner_org_id
        DistributionGroupResponse.__init__(self, *args, **kwargs)

    @property
    def is_shared(self):
        """Gets the is_shared of this GeneralDistributionGroupDetailsResponse.  # noqa: E501

        Whether the distribution group is shared group or not  # noqa: E501

        :return: The is_shared of this GeneralDistributionGroupDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this GeneralDistributionGroupDetailsResponse.

        Whether the distribution group is shared group or not  # noqa: E501

        :param is_shared: The is_shared of this GeneralDistributionGroupDetailsResponse.  # noqa: E501
        :type: bool
        """

        self._is_shared = is_shared

    @property
    def owner_app_id(self):
        """Gets the owner_app_id of this GeneralDistributionGroupDetailsResponse.  # noqa: E501

        If distribution group is owned by an app, this is the unique app ID  # noqa: E501

        :return: The owner_app_id of this GeneralDistributionGroupDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._owner_app_id

    @owner_app_id.setter
    def owner_app_id(self, owner_app_id):
        """Sets the owner_app_id of this GeneralDistributionGroupDetailsResponse.

        If distribution group is owned by an app, this is the unique app ID  # noqa: E501

        :param owner_app_id: The owner_app_id of this GeneralDistributionGroupDetailsResponse.  # noqa: E501
        :type: str
        """

        self._owner_app_id = owner_app_id

    @property
    def owner_org_id(self):
        """Gets the owner_org_id of this GeneralDistributionGroupDetailsResponse.  # noqa: E501

        If distribution group is owned by an org, this is the unique org ID  # noqa: E501

        :return: The owner_org_id of this GeneralDistributionGroupDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._owner_org_id

    @owner_org_id.setter
    def owner_org_id(self, owner_org_id):
        """Sets the owner_org_id of this GeneralDistributionGroupDetailsResponse.

        If distribution group is owned by an org, this is the unique org ID  # noqa: E501

        :param owner_org_id: The owner_org_id of this GeneralDistributionGroupDetailsResponse.  # noqa: E501
        :type: str
        """

        self._owner_org_id = owner_org_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeneralDistributionGroupDetailsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneralDistributionGroupDetailsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
