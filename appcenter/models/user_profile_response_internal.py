# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.user_profile_response import UserProfileResponse  # noqa: F401,E501


class UserProfileResponseInternal(UserProfileResponse):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feature_flags': 'list[str]',
        'admin_role': 'str',
        'settings': 'object'
    }
    if hasattr(UserProfileResponse, "swagger_types"):
        swagger_types.update(UserProfileResponse.swagger_types)

    attribute_map = {
        'feature_flags': 'feature_flags',
        'admin_role': 'admin_role',
        'settings': 'settings'
    }
    if hasattr(UserProfileResponse, "attribute_map"):
        attribute_map.update(UserProfileResponse.attribute_map)

    def __init__(self, feature_flags=None, admin_role=None, settings=None, *args, **kwargs):  # noqa: E501
        """UserProfileResponseInternal - a model defined in Swagger"""  # noqa: E501
        self._feature_flags = None
        self._admin_role = None
        self._settings = None
        self.discriminator = None
        if feature_flags is not None:
            self.feature_flags = feature_flags
        if admin_role is not None:
            self.admin_role = admin_role
        if settings is not None:
            self.settings = settings
        UserProfileResponse.__init__(self, *args, **kwargs)

    @property
    def feature_flags(self):
        """Gets the feature_flags of this UserProfileResponseInternal.  # noqa: E501

        The feature flags that are enabled for this app  # noqa: E501

        :return: The feature_flags of this UserProfileResponseInternal.  # noqa: E501
        :rtype: list[str]
        """
        return self._feature_flags

    @feature_flags.setter
    def feature_flags(self, feature_flags):
        """Sets the feature_flags of this UserProfileResponseInternal.

        The feature flags that are enabled for this app  # noqa: E501

        :param feature_flags: The feature_flags of this UserProfileResponseInternal.  # noqa: E501
        :type: list[str]
        """

        self._feature_flags = feature_flags

    @property
    def admin_role(self):
        """Gets the admin_role of this UserProfileResponseInternal.  # noqa: E501

        The new admin_role  # noqa: E501

        :return: The admin_role of this UserProfileResponseInternal.  # noqa: E501
        :rtype: str
        """
        return self._admin_role

    @admin_role.setter
    def admin_role(self, admin_role):
        """Sets the admin_role of this UserProfileResponseInternal.

        The new admin_role  # noqa: E501

        :param admin_role: The admin_role of this UserProfileResponseInternal.  # noqa: E501
        :type: str
        """
        allowed_values = ["superAdmin", "admin", "devOps", "customerSupport", "notAdmin"]  # noqa: E501
        if admin_role not in allowed_values:
            raise ValueError(
                "Invalid value for `admin_role` ({0}), must be one of {1}"  # noqa: E501
                .format(admin_role, allowed_values)
            )

        self._admin_role = admin_role

    @property
    def settings(self):
        """Gets the settings of this UserProfileResponseInternal.  # noqa: E501

        The user's settings  # noqa: E501

        :return: The settings of this UserProfileResponseInternal.  # noqa: E501
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this UserProfileResponseInternal.

        The user's settings  # noqa: E501

        :param settings: The settings of this UserProfileResponseInternal.  # noqa: E501
        :type: object
        """

        self._settings = settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserProfileResponseInternal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserProfileResponseInternal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
