# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.export_configuration import ExportConfiguration  # noqa: F401,E501
from appcenter.models.export_entity import ExportEntity  # noqa: F401,E501


class ExportConfigurationResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'export_type': 'str',
        'creation_time': 'str',
        'last_run_time': 'str',
        'export_entities': 'list[ExportEntity]',
        'state': 'str',
        'state_info': 'str',
        'resource_group': 'str',
        'resource_name': 'str',
        'export_configuration': 'ExportConfiguration'
    }

    attribute_map = {
        'id': 'id',
        'export_type': 'export_type',
        'creation_time': 'creation_time',
        'last_run_time': 'last_run_time',
        'export_entities': 'export_entities',
        'state': 'state',
        'state_info': 'state_info',
        'resource_group': 'resource_group',
        'resource_name': 'resource_name',
        'export_configuration': 'export_configuration'
    }

    def __init__(self, id=None, export_type=None, creation_time=None, last_run_time=None, export_entities=None, state=None, state_info=None, resource_group=None, resource_name=None, export_configuration=None):  # noqa: E501
        """ExportConfigurationResult - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._export_type = None
        self._creation_time = None
        self._last_run_time = None
        self._export_entities = None
        self._state = None
        self._state_info = None
        self._resource_group = None
        self._resource_name = None
        self._export_configuration = None
        self.discriminator = None
        self.id = id
        self.export_type = export_type
        self.creation_time = creation_time
        if last_run_time is not None:
            self.last_run_time = last_run_time
        if export_entities is not None:
            self.export_entities = export_entities
        self.state = state
        if state_info is not None:
            self.state_info = state_info
        if resource_group is not None:
            self.resource_group = resource_group
        if resource_name is not None:
            self.resource_name = resource_name
        if export_configuration is not None:
            self.export_configuration = export_configuration

    @property
    def id(self):
        """Gets the id of this ExportConfigurationResult.  # noqa: E501

        Export configuration id  # noqa: E501

        :return: The id of this ExportConfigurationResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExportConfigurationResult.

        Export configuration id  # noqa: E501

        :param id: The id of this ExportConfigurationResult.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def export_type(self):
        """Gets the export_type of this ExportConfigurationResult.  # noqa: E501

        Target resource type of export configuration  # noqa: E501

        :return: The export_type of this ExportConfigurationResult.  # noqa: E501
        :rtype: str
        """
        return self._export_type

    @export_type.setter
    def export_type(self, export_type):
        """Sets the export_type of this ExportConfigurationResult.

        Target resource type of export configuration  # noqa: E501

        :param export_type: The export_type of this ExportConfigurationResult.  # noqa: E501
        :type: str
        """
        if export_type is None:
            raise ValueError("Invalid value for `export_type`, must not be `None`")  # noqa: E501
        allowed_values = ["BlobStorage", "AppInsights"]  # noqa: E501
        if export_type not in allowed_values:
            raise ValueError(
                "Invalid value for `export_type` ({0}), must be one of {1}"  # noqa: E501
                .format(export_type, allowed_values)
            )

        self._export_type = export_type

    @property
    def creation_time(self):
        """Gets the creation_time of this ExportConfigurationResult.  # noqa: E501

        Creation time in ISO 8601 format  # noqa: E501

        :return: The creation_time of this ExportConfigurationResult.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ExportConfigurationResult.

        Creation time in ISO 8601 format  # noqa: E501

        :param creation_time: The creation_time of this ExportConfigurationResult.  # noqa: E501
        :type: str
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")  # noqa: E501

        self._creation_time = creation_time

    @property
    def last_run_time(self):
        """Gets the last_run_time of this ExportConfigurationResult.  # noqa: E501

        Latest time in ISO 8601 format when export completed successfully  # noqa: E501

        :return: The last_run_time of this ExportConfigurationResult.  # noqa: E501
        :rtype: str
        """
        return self._last_run_time

    @last_run_time.setter
    def last_run_time(self, last_run_time):
        """Sets the last_run_time of this ExportConfigurationResult.

        Latest time in ISO 8601 format when export completed successfully  # noqa: E501

        :param last_run_time: The last_run_time of this ExportConfigurationResult.  # noqa: E501
        :type: str
        """

        self._last_run_time = last_run_time

    @property
    def export_entities(self):
        """Gets the export_entities of this ExportConfigurationResult.  # noqa: E501


        :return: The export_entities of this ExportConfigurationResult.  # noqa: E501
        :rtype: list[ExportEntity]
        """
        return self._export_entities

    @export_entities.setter
    def export_entities(self, export_entities):
        """Sets the export_entities of this ExportConfigurationResult.


        :param export_entities: The export_entities of this ExportConfigurationResult.  # noqa: E501
        :type: list[ExportEntity]
        """

        self._export_entities = export_entities

    @property
    def state(self):
        """Gets the state of this ExportConfigurationResult.  # noqa: E501

        State of the export job  # noqa: E501

        :return: The state of this ExportConfigurationResult.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ExportConfigurationResult.

        State of the export job  # noqa: E501

        :param state: The state of this ExportConfigurationResult.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["Enabled", "Disabled", "Pending", "Deleted", "Invalid"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_info(self):
        """Gets the state_info of this ExportConfigurationResult.  # noqa: E501

        Additional information about export configuration state  # noqa: E501

        :return: The state_info of this ExportConfigurationResult.  # noqa: E501
        :rtype: str
        """
        return self._state_info

    @state_info.setter
    def state_info(self, state_info):
        """Sets the state_info of this ExportConfigurationResult.

        Additional information about export configuration state  # noqa: E501

        :param state_info: The state_info of this ExportConfigurationResult.  # noqa: E501
        :type: str
        """

        self._state_info = state_info

    @property
    def resource_group(self):
        """Gets the resource_group of this ExportConfigurationResult.  # noqa: E501

        resource group for the storage account/App Insights resource  # noqa: E501

        :return: The resource_group of this ExportConfigurationResult.  # noqa: E501
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this ExportConfigurationResult.

        resource group for the storage account/App Insights resource  # noqa: E501

        :param resource_group: The resource_group of this ExportConfigurationResult.  # noqa: E501
        :type: str
        """

        self._resource_group = resource_group

    @property
    def resource_name(self):
        """Gets the resource_name of this ExportConfigurationResult.  # noqa: E501

        Storage accout or Appinsights resource name  # noqa: E501

        :return: The resource_name of this ExportConfigurationResult.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ExportConfigurationResult.

        Storage accout or Appinsights resource name  # noqa: E501

        :param resource_name: The resource_name of this ExportConfigurationResult.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def export_configuration(self):
        """Gets the export_configuration of this ExportConfigurationResult.  # noqa: E501


        :return: The export_configuration of this ExportConfigurationResult.  # noqa: E501
        :rtype: ExportConfiguration
        """
        return self._export_configuration

    @export_configuration.setter
    def export_configuration(self, export_configuration):
        """Sets the export_configuration of this ExportConfigurationResult.


        :param export_configuration: The export_configuration of this ExportConfigurationResult.  # noqa: E501
        :type: ExportConfiguration
        """

        self._export_configuration = export_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportConfigurationResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportConfigurationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
