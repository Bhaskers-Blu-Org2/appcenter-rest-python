# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.test_run_summary import TestRunSummary  # noqa: F401,E501


class TestSeries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'slug': 'str',
        'name': 'str',
        'most_recent_activity': 'str',
        'test_runs': 'list[TestRunSummary]'
    }

    attribute_map = {
        'slug': 'slug',
        'name': 'name',
        'most_recent_activity': 'mostRecentActivity',
        'test_runs': 'testRuns'
    }

    def __init__(self, slug=None, name=None, most_recent_activity=None, test_runs=None):  # noqa: E501
        """TestSeries - a model defined in Swagger"""  # noqa: E501
        self._slug = None
        self._name = None
        self._most_recent_activity = None
        self._test_runs = None
        self.discriminator = None
        self.slug = slug
        self.name = name
        if most_recent_activity is not None:
            self.most_recent_activity = most_recent_activity
        if test_runs is not None:
            self.test_runs = test_runs

    @property
    def slug(self):
        """Gets the slug of this TestSeries.  # noqa: E501

        Unique, human-readable identifier of the test series  # noqa: E501

        :return: The slug of this TestSeries.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this TestSeries.

        Unique, human-readable identifier of the test series  # noqa: E501

        :param slug: The slug of this TestSeries.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def name(self):
        """Gets the name of this TestSeries.  # noqa: E501

        Name of the test series  # noqa: E501

        :return: The name of this TestSeries.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TestSeries.

        Name of the test series  # noqa: E501

        :param name: The name of this TestSeries.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def most_recent_activity(self):
        """Gets the most_recent_activity of this TestSeries.  # noqa: E501

        Date of the latest test run that used this test series  # noqa: E501

        :return: The most_recent_activity of this TestSeries.  # noqa: E501
        :rtype: str
        """
        return self._most_recent_activity

    @most_recent_activity.setter
    def most_recent_activity(self, most_recent_activity):
        """Sets the most_recent_activity of this TestSeries.

        Date of the latest test run that used this test series  # noqa: E501

        :param most_recent_activity: The most_recent_activity of this TestSeries.  # noqa: E501
        :type: str
        """

        self._most_recent_activity = most_recent_activity

    @property
    def test_runs(self):
        """Gets the test_runs of this TestSeries.  # noqa: E501

        Most recent test runs  # noqa: E501

        :return: The test_runs of this TestSeries.  # noqa: E501
        :rtype: list[TestRunSummary]
        """
        return self._test_runs

    @test_runs.setter
    def test_runs(self, test_runs):
        """Sets the test_runs of this TestSeries.

        Most recent test runs  # noqa: E501

        :param test_runs: The test_runs of this TestSeries.  # noqa: E501
        :type: list[TestRunSummary]
        """

        self._test_runs = test_runs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestSeries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestSeries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
