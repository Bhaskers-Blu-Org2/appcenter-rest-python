# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AppMembership(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'str',
        'user_id': 'str',
        'permissions': 'list[str]',
        'origin': 'str',
        'source_type': 'str',
        'source_id': 'str'
    }

    attribute_map = {
        'app_id': 'app_id',
        'user_id': 'user_id',
        'permissions': 'permissions',
        'origin': 'origin',
        'source_type': 'source_type',
        'source_id': 'source_id'
    }

    def __init__(self, app_id=None, user_id=None, permissions=None, origin=None, source_type=None, source_id=None):  # noqa: E501
        """AppMembership - a model defined in Swagger"""  # noqa: E501
        self._app_id = None
        self._user_id = None
        self._permissions = None
        self._origin = None
        self._source_type = None
        self._source_id = None
        self.discriminator = None
        if app_id is not None:
            self.app_id = app_id
        if user_id is not None:
            self.user_id = user_id
        if permissions is not None:
            self.permissions = permissions
        if origin is not None:
            self.origin = origin
        if source_type is not None:
            self.source_type = source_type
        if source_id is not None:
            self.source_id = source_id

    @property
    def app_id(self):
        """Gets the app_id of this AppMembership.  # noqa: E501


        :return: The app_id of this AppMembership.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AppMembership.


        :param app_id: The app_id of this AppMembership.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def user_id(self):
        """Gets the user_id of this AppMembership.  # noqa: E501


        :return: The user_id of this AppMembership.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AppMembership.


        :param user_id: The user_id of this AppMembership.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def permissions(self):
        """Gets the permissions of this AppMembership.  # noqa: E501


        :return: The permissions of this AppMembership.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this AppMembership.


        :param permissions: The permissions of this AppMembership.  # noqa: E501
        :type: list[str]
        """

        self._permissions = permissions

    @property
    def origin(self):
        """Gets the origin of this AppMembership.  # noqa: E501


        :return: The origin of this AppMembership.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this AppMembership.


        :param origin: The origin of this AppMembership.  # noqa: E501
        :type: str
        """
        allowed_values = ["appcenter", "hockeyapp", "codepush", "testcloud", "hockeyapp-dogfood"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"  # noqa: E501
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def source_type(self):
        """Gets the source_type of this AppMembership.  # noqa: E501


        :return: The source_type of this AppMembership.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this AppMembership.


        :param source_type: The source_type of this AppMembership.  # noqa: E501
        :type: str
        """
        allowed_values = ["user", "org", "distribution_group", "team", "release"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"  # noqa: E501
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def source_id(self):
        """Gets the source_id of this AppMembership.  # noqa: E501


        :return: The source_id of this AppMembership.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this AppMembership.


        :param source_id: The source_id of this AppMembership.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppMembership, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppMembership):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
