# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.node_versions import NodeVersions  # noqa: F401,E501
from appcenter.models.xamarin_sdk_bundles import XamarinSDKBundles  # noqa: F401,E501
from appcenter.models.xcode_versions import XcodeVersions  # noqa: F401,E501


class Toolsets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'xamarin': 'XamarinSDKBundles',
        'xcode': 'XcodeVersions',
        'node': 'NodeVersions'
    }

    attribute_map = {
        'xamarin': 'xamarin',
        'xcode': 'xcode',
        'node': 'node'
    }

    def __init__(self, xamarin=None, xcode=None, node=None):  # noqa: E501
        """Toolsets - a model defined in Swagger"""  # noqa: E501
        self._xamarin = None
        self._xcode = None
        self._node = None
        self.discriminator = None
        if xamarin is not None:
            self.xamarin = xamarin
        if xcode is not None:
            self.xcode = xcode
        if node is not None:
            self.node = node

    @property
    def xamarin(self):
        """Gets the xamarin of this Toolsets.  # noqa: E501


        :return: The xamarin of this Toolsets.  # noqa: E501
        :rtype: XamarinSDKBundles
        """
        return self._xamarin

    @xamarin.setter
    def xamarin(self, xamarin):
        """Sets the xamarin of this Toolsets.


        :param xamarin: The xamarin of this Toolsets.  # noqa: E501
        :type: XamarinSDKBundles
        """

        self._xamarin = xamarin

    @property
    def xcode(self):
        """Gets the xcode of this Toolsets.  # noqa: E501


        :return: The xcode of this Toolsets.  # noqa: E501
        :rtype: XcodeVersions
        """
        return self._xcode

    @xcode.setter
    def xcode(self, xcode):
        """Sets the xcode of this Toolsets.


        :param xcode: The xcode of this Toolsets.  # noqa: E501
        :type: XcodeVersions
        """

        self._xcode = xcode

    @property
    def node(self):
        """Gets the node of this Toolsets.  # noqa: E501


        :return: The node of this Toolsets.  # noqa: E501
        :rtype: NodeVersions
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this Toolsets.


        :param node: The node of this Toolsets.  # noqa: E501
        :type: NodeVersions
        """

        self._node = node

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Toolsets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Toolsets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
