# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.alerting_event import AlertingEvent  # noqa: F401,E501


class NewAppReleaseAlertingEvent(AlertingEvent):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_ids': 'list[str]',
        'disable_webhook': 'bool',
        'app_release_properties': 'object'
    }
    if hasattr(AlertingEvent, "swagger_types"):
        swagger_types.update(AlertingEvent.swagger_types)

    attribute_map = {
        'user_ids': 'user_ids',
        'disable_webhook': 'disable_webhook',
        'app_release_properties': 'app_release_properties'
    }
    if hasattr(AlertingEvent, "attribute_map"):
        attribute_map.update(AlertingEvent.attribute_map)

    def __init__(self, user_ids=None, disable_webhook=None, app_release_properties=None, *args, **kwargs):  # noqa: E501
        """NewAppReleaseAlertingEvent - a model defined in Swagger"""  # noqa: E501
        self._user_ids = None
        self._disable_webhook = None
        self._app_release_properties = None
        self.discriminator = None
        if user_ids is not None:
            self.user_ids = user_ids
        if disable_webhook is not None:
            self.disable_webhook = disable_webhook
        if app_release_properties is not None:
            self.app_release_properties = app_release_properties
        AlertingEvent.__init__(self, *args, **kwargs)

    @property
    def user_ids(self):
        """Gets the user_ids of this NewAppReleaseAlertingEvent.  # noqa: E501

        List of users who need to receive an email notification. If this is not null, then only sending emails will be triggered even if the event requires calling webhooks or doing other actions.  # noqa: E501

        :return: The user_ids of this NewAppReleaseAlertingEvent.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this NewAppReleaseAlertingEvent.

        List of users who need to receive an email notification. If this is not null, then only sending emails will be triggered even if the event requires calling webhooks or doing other actions.  # noqa: E501

        :param user_ids: The user_ids of this NewAppReleaseAlertingEvent.  # noqa: E501
        :type: list[str]
        """

        self._user_ids = user_ids

    @property
    def disable_webhook(self):
        """Gets the disable_webhook of this NewAppReleaseAlertingEvent.  # noqa: E501

        indicate whether notify via webhook or not  # noqa: E501

        :return: The disable_webhook of this NewAppReleaseAlertingEvent.  # noqa: E501
        :rtype: bool
        """
        return self._disable_webhook

    @disable_webhook.setter
    def disable_webhook(self, disable_webhook):
        """Sets the disable_webhook of this NewAppReleaseAlertingEvent.

        indicate whether notify via webhook or not  # noqa: E501

        :param disable_webhook: The disable_webhook of this NewAppReleaseAlertingEvent.  # noqa: E501
        :type: bool
        """

        self._disable_webhook = disable_webhook

    @property
    def app_release_properties(self):
        """Gets the app_release_properties of this NewAppReleaseAlertingEvent.  # noqa: E501

        Properties of new application release  # noqa: E501

        :return: The app_release_properties of this NewAppReleaseAlertingEvent.  # noqa: E501
        :rtype: object
        """
        return self._app_release_properties

    @app_release_properties.setter
    def app_release_properties(self, app_release_properties):
        """Sets the app_release_properties of this NewAppReleaseAlertingEvent.

        Properties of new application release  # noqa: E501

        :param app_release_properties: The app_release_properties of this NewAppReleaseAlertingEvent.  # noqa: E501
        :type: object
        """

        self._app_release_properties = app_release_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewAppReleaseAlertingEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewAppReleaseAlertingEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
