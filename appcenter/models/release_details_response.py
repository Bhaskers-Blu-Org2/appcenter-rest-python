# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.build_info import BuildInfo  # noqa: F401,E501
from appcenter.models.destination import Destination  # noqa: F401,E501
from appcenter.models.distribution_group_without_is_latest import DistributionGroupWithoutIsLatest  # noqa: F401,E501
from appcenter.models.distribution_store_without_is_latest import DistributionStoreWithoutIsLatest  # noqa: F401,E501


class ReleaseDetailsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'app_name': 'str',
        'app_display_name': 'str',
        'app_os': 'str',
        'version': 'str',
        'origin': 'str',
        'short_version': 'str',
        'release_notes': 'str',
        'provisioning_profile_name': 'str',
        'provisioning_profile_type': 'str',
        'provisioning_profile_expiry_date': 'str',
        'is_provisioning_profile_syncing': 'bool',
        'size': 'int',
        'min_os': 'str',
        'device_family': 'str',
        'android_min_api_level': 'str',
        'bundle_identifier': 'str',
        'package_hashes': 'list[str]',
        'fingerprint': 'str',
        'uploaded_at': 'str',
        'download_url': 'str',
        'app_icon_url': 'str',
        'install_url': 'str',
        'destination_type': 'str',
        'distribution_groups': 'list[DistributionGroupWithoutIsLatest]',
        'distribution_stores': 'list[DistributionStoreWithoutIsLatest]',
        'destinations': 'list[Destination]',
        'is_udid_provisioned': 'bool',
        'can_resign': 'bool',
        'build': 'BuildInfo',
        'enabled': 'bool',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'app_name': 'app_name',
        'app_display_name': 'app_display_name',
        'app_os': 'app_os',
        'version': 'version',
        'origin': 'origin',
        'short_version': 'short_version',
        'release_notes': 'release_notes',
        'provisioning_profile_name': 'provisioning_profile_name',
        'provisioning_profile_type': 'provisioning_profile_type',
        'provisioning_profile_expiry_date': 'provisioning_profile_expiry_date',
        'is_provisioning_profile_syncing': 'is_provisioning_profile_syncing',
        'size': 'size',
        'min_os': 'min_os',
        'device_family': 'device_family',
        'android_min_api_level': 'android_min_api_level',
        'bundle_identifier': 'bundle_identifier',
        'package_hashes': 'package_hashes',
        'fingerprint': 'fingerprint',
        'uploaded_at': 'uploaded_at',
        'download_url': 'download_url',
        'app_icon_url': 'app_icon_url',
        'install_url': 'install_url',
        'destination_type': 'destination_type',
        'distribution_groups': 'distribution_groups',
        'distribution_stores': 'distribution_stores',
        'destinations': 'destinations',
        'is_udid_provisioned': 'is_udid_provisioned',
        'can_resign': 'can_resign',
        'build': 'build',
        'enabled': 'enabled',
        'status': 'status'
    }

    def __init__(self, id=None, app_name=None, app_display_name=None, app_os=None, version=None, origin=None, short_version=None, release_notes=None, provisioning_profile_name=None, provisioning_profile_type=None, provisioning_profile_expiry_date=None, is_provisioning_profile_syncing=None, size=None, min_os=None, device_family=None, android_min_api_level=None, bundle_identifier=None, package_hashes=None, fingerprint=None, uploaded_at=None, download_url=None, app_icon_url=None, install_url=None, destination_type=None, distribution_groups=None, distribution_stores=None, destinations=None, is_udid_provisioned=None, can_resign=None, build=None, enabled=None, status=None):  # noqa: E501
        """ReleaseDetailsResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._app_name = None
        self._app_display_name = None
        self._app_os = None
        self._version = None
        self._origin = None
        self._short_version = None
        self._release_notes = None
        self._provisioning_profile_name = None
        self._provisioning_profile_type = None
        self._provisioning_profile_expiry_date = None
        self._is_provisioning_profile_syncing = None
        self._size = None
        self._min_os = None
        self._device_family = None
        self._android_min_api_level = None
        self._bundle_identifier = None
        self._package_hashes = None
        self._fingerprint = None
        self._uploaded_at = None
        self._download_url = None
        self._app_icon_url = None
        self._install_url = None
        self._destination_type = None
        self._distribution_groups = None
        self._distribution_stores = None
        self._destinations = None
        self._is_udid_provisioned = None
        self._can_resign = None
        self._build = None
        self._enabled = None
        self._status = None
        self.discriminator = None
        self.id = id
        self.app_name = app_name
        self.app_display_name = app_display_name
        if app_os is not None:
            self.app_os = app_os
        self.version = version
        if origin is not None:
            self.origin = origin
        self.short_version = short_version
        if release_notes is not None:
            self.release_notes = release_notes
        if provisioning_profile_name is not None:
            self.provisioning_profile_name = provisioning_profile_name
        if provisioning_profile_type is not None:
            self.provisioning_profile_type = provisioning_profile_type
        if provisioning_profile_expiry_date is not None:
            self.provisioning_profile_expiry_date = provisioning_profile_expiry_date
        if is_provisioning_profile_syncing is not None:
            self.is_provisioning_profile_syncing = is_provisioning_profile_syncing
        if size is not None:
            self.size = size
        if min_os is not None:
            self.min_os = min_os
        if device_family is not None:
            self.device_family = device_family
        if android_min_api_level is not None:
            self.android_min_api_level = android_min_api_level
        if bundle_identifier is not None:
            self.bundle_identifier = bundle_identifier
        if package_hashes is not None:
            self.package_hashes = package_hashes
        if fingerprint is not None:
            self.fingerprint = fingerprint
        self.uploaded_at = uploaded_at
        if download_url is not None:
            self.download_url = download_url
        self.app_icon_url = app_icon_url
        if install_url is not None:
            self.install_url = install_url
        if destination_type is not None:
            self.destination_type = destination_type
        if distribution_groups is not None:
            self.distribution_groups = distribution_groups
        if distribution_stores is not None:
            self.distribution_stores = distribution_stores
        if destinations is not None:
            self.destinations = destinations
        if is_udid_provisioned is not None:
            self.is_udid_provisioned = is_udid_provisioned
        if can_resign is not None:
            self.can_resign = can_resign
        if build is not None:
            self.build = build
        self.enabled = enabled
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this ReleaseDetailsResponse.  # noqa: E501

        ID identifying this unique release.  # noqa: E501

        :return: The id of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReleaseDetailsResponse.

        ID identifying this unique release.  # noqa: E501

        :param id: The id of this ReleaseDetailsResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def app_name(self):
        """Gets the app_name of this ReleaseDetailsResponse.  # noqa: E501

        The app's name (extracted from the uploaded release).  # noqa: E501

        :return: The app_name of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this ReleaseDetailsResponse.

        The app's name (extracted from the uploaded release).  # noqa: E501

        :param app_name: The app_name of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")  # noqa: E501

        self._app_name = app_name

    @property
    def app_display_name(self):
        """Gets the app_display_name of this ReleaseDetailsResponse.  # noqa: E501

        The app's display name.  # noqa: E501

        :return: The app_display_name of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._app_display_name

    @app_display_name.setter
    def app_display_name(self, app_display_name):
        """Sets the app_display_name of this ReleaseDetailsResponse.

        The app's display name.  # noqa: E501

        :param app_display_name: The app_display_name of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """
        if app_display_name is None:
            raise ValueError("Invalid value for `app_display_name`, must not be `None`")  # noqa: E501

        self._app_display_name = app_display_name

    @property
    def app_os(self):
        """Gets the app_os of this ReleaseDetailsResponse.  # noqa: E501

        The app's OS.  # noqa: E501

        :return: The app_os of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._app_os

    @app_os.setter
    def app_os(self, app_os):
        """Sets the app_os of this ReleaseDetailsResponse.

        The app's OS.  # noqa: E501

        :param app_os: The app_os of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """

        self._app_os = app_os

    @property
    def version(self):
        """Gets the version of this ReleaseDetailsResponse.  # noqa: E501

        The release's version.<br> For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml.   # noqa: E501

        :return: The version of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ReleaseDetailsResponse.

        The release's version.<br> For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml.   # noqa: E501

        :param version: The version of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def origin(self):
        """Gets the origin of this ReleaseDetailsResponse.  # noqa: E501

        The release's origin  # noqa: E501

        :return: The origin of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ReleaseDetailsResponse.

        The release's origin  # noqa: E501

        :param origin: The origin of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["hockeyapp", "appcenter"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"  # noqa: E501
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def short_version(self):
        """Gets the short_version of this ReleaseDetailsResponse.  # noqa: E501

        The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml.   # noqa: E501

        :return: The short_version of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._short_version

    @short_version.setter
    def short_version(self, short_version):
        """Sets the short_version of this ReleaseDetailsResponse.

        The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml.   # noqa: E501

        :param short_version: The short_version of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """
        if short_version is None:
            raise ValueError("Invalid value for `short_version`, must not be `None`")  # noqa: E501

        self._short_version = short_version

    @property
    def release_notes(self):
        """Gets the release_notes of this ReleaseDetailsResponse.  # noqa: E501

        The release's release notes.  # noqa: E501

        :return: The release_notes of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this ReleaseDetailsResponse.

        The release's release notes.  # noqa: E501

        :param release_notes: The release_notes of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """

        self._release_notes = release_notes

    @property
    def provisioning_profile_name(self):
        """Gets the provisioning_profile_name of this ReleaseDetailsResponse.  # noqa: E501

        The release's provisioning profile name.  # noqa: E501

        :return: The provisioning_profile_name of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._provisioning_profile_name

    @provisioning_profile_name.setter
    def provisioning_profile_name(self, provisioning_profile_name):
        """Sets the provisioning_profile_name of this ReleaseDetailsResponse.

        The release's provisioning profile name.  # noqa: E501

        :param provisioning_profile_name: The provisioning_profile_name of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """

        self._provisioning_profile_name = provisioning_profile_name

    @property
    def provisioning_profile_type(self):
        """Gets the provisioning_profile_type of this ReleaseDetailsResponse.  # noqa: E501

        The type of the provisioning profile for the requested app version.  # noqa: E501

        :return: The provisioning_profile_type of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._provisioning_profile_type

    @provisioning_profile_type.setter
    def provisioning_profile_type(self, provisioning_profile_type):
        """Sets the provisioning_profile_type of this ReleaseDetailsResponse.

        The type of the provisioning profile for the requested app version.  # noqa: E501

        :param provisioning_profile_type: The provisioning_profile_type of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["adhoc", "enterprise", "other"]  # noqa: E501
        if provisioning_profile_type not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_profile_type` ({0}), must be one of {1}"  # noqa: E501
                .format(provisioning_profile_type, allowed_values)
            )

        self._provisioning_profile_type = provisioning_profile_type

    @property
    def provisioning_profile_expiry_date(self):
        """Gets the provisioning_profile_expiry_date of this ReleaseDetailsResponse.  # noqa: E501

        expiration date of provisioning profile in UTC format.  # noqa: E501

        :return: The provisioning_profile_expiry_date of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._provisioning_profile_expiry_date

    @provisioning_profile_expiry_date.setter
    def provisioning_profile_expiry_date(self, provisioning_profile_expiry_date):
        """Sets the provisioning_profile_expiry_date of this ReleaseDetailsResponse.

        expiration date of provisioning profile in UTC format.  # noqa: E501

        :param provisioning_profile_expiry_date: The provisioning_profile_expiry_date of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """

        self._provisioning_profile_expiry_date = provisioning_profile_expiry_date

    @property
    def is_provisioning_profile_syncing(self):
        """Gets the is_provisioning_profile_syncing of this ReleaseDetailsResponse.  # noqa: E501

        A flag that determines whether the release's provisioning profile is still extracted or not.  # noqa: E501

        :return: The is_provisioning_profile_syncing of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_provisioning_profile_syncing

    @is_provisioning_profile_syncing.setter
    def is_provisioning_profile_syncing(self, is_provisioning_profile_syncing):
        """Sets the is_provisioning_profile_syncing of this ReleaseDetailsResponse.

        A flag that determines whether the release's provisioning profile is still extracted or not.  # noqa: E501

        :param is_provisioning_profile_syncing: The is_provisioning_profile_syncing of this ReleaseDetailsResponse.  # noqa: E501
        :type: bool
        """

        self._is_provisioning_profile_syncing = is_provisioning_profile_syncing

    @property
    def size(self):
        """Gets the size of this ReleaseDetailsResponse.  # noqa: E501

        The release's size in bytes.  # noqa: E501

        :return: The size of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ReleaseDetailsResponse.

        The release's size in bytes.  # noqa: E501

        :param size: The size of this ReleaseDetailsResponse.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def min_os(self):
        """Gets the min_os of this ReleaseDetailsResponse.  # noqa: E501

        The release's minimum required operating system.  # noqa: E501

        :return: The min_os of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._min_os

    @min_os.setter
    def min_os(self, min_os):
        """Sets the min_os of this ReleaseDetailsResponse.

        The release's minimum required operating system.  # noqa: E501

        :param min_os: The min_os of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """

        self._min_os = min_os

    @property
    def device_family(self):
        """Gets the device_family of this ReleaseDetailsResponse.  # noqa: E501

        The release's device family.  # noqa: E501

        :return: The device_family of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._device_family

    @device_family.setter
    def device_family(self, device_family):
        """Sets the device_family of this ReleaseDetailsResponse.

        The release's device family.  # noqa: E501

        :param device_family: The device_family of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """

        self._device_family = device_family

    @property
    def android_min_api_level(self):
        """Gets the android_min_api_level of this ReleaseDetailsResponse.  # noqa: E501

        The release's minimum required Android API level.  # noqa: E501

        :return: The android_min_api_level of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._android_min_api_level

    @android_min_api_level.setter
    def android_min_api_level(self, android_min_api_level):
        """Sets the android_min_api_level of this ReleaseDetailsResponse.

        The release's minimum required Android API level.  # noqa: E501

        :param android_min_api_level: The android_min_api_level of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """

        self._android_min_api_level = android_min_api_level

    @property
    def bundle_identifier(self):
        """Gets the bundle_identifier of this ReleaseDetailsResponse.  # noqa: E501

        The identifier of the apps bundle.  # noqa: E501

        :return: The bundle_identifier of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._bundle_identifier

    @bundle_identifier.setter
    def bundle_identifier(self, bundle_identifier):
        """Sets the bundle_identifier of this ReleaseDetailsResponse.

        The identifier of the apps bundle.  # noqa: E501

        :param bundle_identifier: The bundle_identifier of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """

        self._bundle_identifier = bundle_identifier

    @property
    def package_hashes(self):
        """Gets the package_hashes of this ReleaseDetailsResponse.  # noqa: E501

        Hashes for the packages.  # noqa: E501

        :return: The package_hashes of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._package_hashes

    @package_hashes.setter
    def package_hashes(self, package_hashes):
        """Sets the package_hashes of this ReleaseDetailsResponse.

        Hashes for the packages.  # noqa: E501

        :param package_hashes: The package_hashes of this ReleaseDetailsResponse.  # noqa: E501
        :type: list[str]
        """

        self._package_hashes = package_hashes

    @property
    def fingerprint(self):
        """Gets the fingerprint of this ReleaseDetailsResponse.  # noqa: E501

        MD5 checksum of the release binary.  # noqa: E501

        :return: The fingerprint of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this ReleaseDetailsResponse.

        MD5 checksum of the release binary.  # noqa: E501

        :param fingerprint: The fingerprint of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this ReleaseDetailsResponse.  # noqa: E501

        UTC time in ISO 8601 format of the uploaded time.  # noqa: E501

        :return: The uploaded_at of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this ReleaseDetailsResponse.

        UTC time in ISO 8601 format of the uploaded time.  # noqa: E501

        :param uploaded_at: The uploaded_at of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """
        if uploaded_at is None:
            raise ValueError("Invalid value for `uploaded_at`, must not be `None`")  # noqa: E501

        self._uploaded_at = uploaded_at

    @property
    def download_url(self):
        """Gets the download_url of this ReleaseDetailsResponse.  # noqa: E501

        The URL that hosts the binary for this release.  # noqa: E501

        :return: The download_url of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this ReleaseDetailsResponse.

        The URL that hosts the binary for this release.  # noqa: E501

        :param download_url: The download_url of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def app_icon_url(self):
        """Gets the app_icon_url of this ReleaseDetailsResponse.  # noqa: E501

        A URL to the app's icon.  # noqa: E501

        :return: The app_icon_url of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._app_icon_url

    @app_icon_url.setter
    def app_icon_url(self, app_icon_url):
        """Sets the app_icon_url of this ReleaseDetailsResponse.

        A URL to the app's icon.  # noqa: E501

        :param app_icon_url: The app_icon_url of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """
        if app_icon_url is None:
            raise ValueError("Invalid value for `app_icon_url`, must not be `None`")  # noqa: E501

        self._app_icon_url = app_icon_url

    @property
    def install_url(self):
        """Gets the install_url of this ReleaseDetailsResponse.  # noqa: E501

        The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`  # noqa: E501

        :return: The install_url of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._install_url

    @install_url.setter
    def install_url(self, install_url):
        """Sets the install_url of this ReleaseDetailsResponse.

        The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`  # noqa: E501

        :param install_url: The install_url of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """

        self._install_url = install_url

    @property
    def destination_type(self):
        """Gets the destination_type of this ReleaseDetailsResponse.  # noqa: E501

        OBSOLETE. Will be removed in next version. The destination type.<br> <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br> <b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br> <b>tester</b>: The release distributed testers details will be returned.<br>   # noqa: E501

        :return: The destination_type of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._destination_type

    @destination_type.setter
    def destination_type(self, destination_type):
        """Sets the destination_type of this ReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. The destination type.<br> <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br> <b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br> <b>tester</b>: The release distributed testers details will be returned.<br>   # noqa: E501

        :param destination_type: The destination_type of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["group", "store", "tester"]  # noqa: E501
        if destination_type not in allowed_values:
            raise ValueError(
                "Invalid value for `destination_type` ({0}), must be one of {1}"  # noqa: E501
                .format(destination_type, allowed_values)
            )

        self._destination_type = destination_type

    @property
    def distribution_groups(self):
        """Gets the distribution_groups of this ReleaseDetailsResponse.  # noqa: E501

        OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.  # noqa: E501

        :return: The distribution_groups of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: list[DistributionGroupWithoutIsLatest]
        """
        return self._distribution_groups

    @distribution_groups.setter
    def distribution_groups(self, distribution_groups):
        """Sets the distribution_groups of this ReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.  # noqa: E501

        :param distribution_groups: The distribution_groups of this ReleaseDetailsResponse.  # noqa: E501
        :type: list[DistributionGroupWithoutIsLatest]
        """

        self._distribution_groups = distribution_groups

    @property
    def distribution_stores(self):
        """Gets the distribution_stores of this ReleaseDetailsResponse.  # noqa: E501

        OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.  # noqa: E501

        :return: The distribution_stores of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: list[DistributionStoreWithoutIsLatest]
        """
        return self._distribution_stores

    @distribution_stores.setter
    def distribution_stores(self, distribution_stores):
        """Sets the distribution_stores of this ReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.  # noqa: E501

        :param distribution_stores: The distribution_stores of this ReleaseDetailsResponse.  # noqa: E501
        :type: list[DistributionStoreWithoutIsLatest]
        """

        self._distribution_stores = distribution_stores

    @property
    def destinations(self):
        """Gets the destinations of this ReleaseDetailsResponse.  # noqa: E501

        A list of distribution groups or stores.  # noqa: E501

        :return: The destinations of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: list[Destination]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this ReleaseDetailsResponse.

        A list of distribution groups or stores.  # noqa: E501

        :param destinations: The destinations of this ReleaseDetailsResponse.  # noqa: E501
        :type: list[Destination]
        """

        self._destinations = destinations

    @property
    def is_udid_provisioned(self):
        """Gets the is_udid_provisioned of this ReleaseDetailsResponse.  # noqa: E501

        In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.  # noqa: E501

        :return: The is_udid_provisioned of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_udid_provisioned

    @is_udid_provisioned.setter
    def is_udid_provisioned(self, is_udid_provisioned):
        """Sets the is_udid_provisioned of this ReleaseDetailsResponse.

        In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.  # noqa: E501

        :param is_udid_provisioned: The is_udid_provisioned of this ReleaseDetailsResponse.  # noqa: E501
        :type: bool
        """

        self._is_udid_provisioned = is_udid_provisioned

    @property
    def can_resign(self):
        """Gets the can_resign of this ReleaseDetailsResponse.  # noqa: E501

        In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.  # noqa: E501

        :return: The can_resign of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._can_resign

    @can_resign.setter
    def can_resign(self, can_resign):
        """Sets the can_resign of this ReleaseDetailsResponse.

        In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.  # noqa: E501

        :param can_resign: The can_resign of this ReleaseDetailsResponse.  # noqa: E501
        :type: bool
        """

        self._can_resign = can_resign

    @property
    def build(self):
        """Gets the build of this ReleaseDetailsResponse.  # noqa: E501


        :return: The build of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: BuildInfo
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this ReleaseDetailsResponse.


        :param build: The build of this ReleaseDetailsResponse.  # noqa: E501
        :type: BuildInfo
        """

        self._build = build

    @property
    def enabled(self):
        """Gets the enabled of this ReleaseDetailsResponse.  # noqa: E501

        This value determines the whether a release currently is enabled or disabled.  # noqa: E501

        :return: The enabled of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ReleaseDetailsResponse.

        This value determines the whether a release currently is enabled or disabled.  # noqa: E501

        :param enabled: The enabled of this ReleaseDetailsResponse.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def status(self):
        """Gets the status of this ReleaseDetailsResponse.  # noqa: E501

        Status of the release.  # noqa: E501

        :return: The status of this ReleaseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReleaseDetailsResponse.

        Status of the release.  # noqa: E501

        :param status: The status of this ReleaseDetailsResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReleaseDetailsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseDetailsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
