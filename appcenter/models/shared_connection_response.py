# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SharedConnectionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'display_name': 'str',
        'service_type': 'str',
        'credential_type': 'str',
        'is_valid': 'bool',
        'is2_fa': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'display_name': 'displayName',
        'service_type': 'serviceType',
        'credential_type': 'credentialType',
        'is_valid': 'isValid',
        'is2_fa': 'is2FA'
    }

    discriminator_value_class_map = {

          'GooglePlayConnectionNonSecretResponse': 'GooglePlayConnectionNonSecretResponse',
'GooglePlayCredentialNonSecretDetailsResponse': 'GooglePlayCredentialNonSecretDetailsResponse',
'GooglePlayConnectionSecretResponse': 'GooglePlayConnectionSecretResponse',
'AppleCredentialNonSecretDetailsResponse': 'AppleCredentialNonSecretDetailsResponse',
'JiraConnectionSecretResponse': 'JiraConnectionSecretResponse',
'JiraCredentialNonSecretDetailsResponse': 'JiraCredentialNonSecretDetailsResponse',
'AppleConnectionNonSecretResponse': 'AppleConnectionNonSecretResponse',
'AppleConnectionSecretResponse': 'AppleConnectionSecretResponse',
'AppleCertificateNonSecretDetailsResponse': 'AppleCertificateNonSecretDetailsResponse',
'JiraConnectionNonSecretResponse': 'JiraConnectionNonSecretResponse',
'AppleCertificateSecretDetailsResponse': 'AppleCertificateSecretDetailsResponse'    }

    def __init__(self, id=None, display_name=None, service_type=None, credential_type=None, is_valid=None, is2_fa=None):  # noqa: E501
        """SharedConnectionResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._display_name = None
        self._service_type = None
        self._credential_type = None
        self._is_valid = None
        self._is2_fa = None
        self.discriminator = 'serviceType'
        self.id = id
        if display_name is not None:
            self.display_name = display_name
        self.service_type = service_type
        self.credential_type = credential_type
        if is_valid is not None:
            self.is_valid = is_valid
        if is2_fa is not None:
            self.is2_fa = is2_fa

    @property
    def id(self):
        """Gets the id of this SharedConnectionResponse.  # noqa: E501

        id of the shared connection  # noqa: E501

        :return: The id of this SharedConnectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedConnectionResponse.

        id of the shared connection  # noqa: E501

        :param id: The id of this SharedConnectionResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this SharedConnectionResponse.  # noqa: E501

        display name of shared connection  # noqa: E501

        :return: The display_name of this SharedConnectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SharedConnectionResponse.

        display name of shared connection  # noqa: E501

        :param display_name: The display_name of this SharedConnectionResponse.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def service_type(self):
        """Gets the service_type of this SharedConnectionResponse.  # noqa: E501

        service type of shared connection can be apple|gitlab|googleplay|jira  # noqa: E501

        :return: The service_type of this SharedConnectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this SharedConnectionResponse.

        service type of shared connection can be apple|gitlab|googleplay|jira  # noqa: E501

        :param service_type: The service_type of this SharedConnectionResponse.  # noqa: E501
        :type: str
        """
        if service_type is None:
            raise ValueError("Invalid value for `service_type`, must not be `None`")  # noqa: E501
        allowed_values = ["apple", "jira", "googleplay", "gitlab"]  # noqa: E501
        if service_type not in allowed_values:
            raise ValueError(
                "Invalid value for `service_type` ({0}), must be one of {1}"  # noqa: E501
                .format(service_type, allowed_values)
            )

        self._service_type = service_type

    @property
    def credential_type(self):
        """Gets the credential_type of this SharedConnectionResponse.  # noqa: E501

        the type of the credential  # noqa: E501

        :return: The credential_type of this SharedConnectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._credential_type

    @credential_type.setter
    def credential_type(self, credential_type):
        """Sets the credential_type of this SharedConnectionResponse.

        the type of the credential  # noqa: E501

        :param credential_type: The credential_type of this SharedConnectionResponse.  # noqa: E501
        :type: str
        """
        if credential_type is None:
            raise ValueError("Invalid value for `credential_type`, must not be `None`")  # noqa: E501
        allowed_values = ["credentials", "certificate"]  # noqa: E501
        if credential_type not in allowed_values:
            raise ValueError(
                "Invalid value for `credential_type` ({0}), must be one of {1}"  # noqa: E501
                .format(credential_type, allowed_values)
            )

        self._credential_type = credential_type

    @property
    def is_valid(self):
        """Gets the is_valid of this SharedConnectionResponse.  # noqa: E501

        whether the credentials are valid or not  # noqa: E501

        :return: The is_valid of this SharedConnectionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this SharedConnectionResponse.

        whether the credentials are valid or not  # noqa: E501

        :param is_valid: The is_valid of this SharedConnectionResponse.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def is2_fa(self):
        """Gets the is2_fa of this SharedConnectionResponse.  # noqa: E501

        if the account is a 2FA account or not  # noqa: E501

        :return: The is2_fa of this SharedConnectionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is2_fa

    @is2_fa.setter
    def is2_fa(self, is2_fa):
        """Sets the is2_fa of this SharedConnectionResponse.

        if the account is a 2FA account or not  # noqa: E501

        :param is2_fa: The is2_fa of this SharedConnectionResponse.  # noqa: E501
        :type: bool
        """

        self._is2_fa = is2_fa

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SharedConnectionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedConnectionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
