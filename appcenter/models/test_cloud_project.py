# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.test_cloud_project_framework_properties import TestCloudProjectFrameworkProperties  # noqa: F401,E501


class TestCloudProject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'framework_type': 'str',
        'framework_properties': 'TestCloudProjectFrameworkProperties'
    }

    attribute_map = {
        'path': 'path',
        'framework_type': 'frameworkType',
        'framework_properties': 'frameworkProperties'
    }

    def __init__(self, path=None, framework_type=None, framework_properties=None):  # noqa: E501
        """TestCloudProject - a model defined in Swagger"""  # noqa: E501
        self._path = None
        self._framework_type = None
        self._framework_properties = None
        self.discriminator = None
        self.path = path
        self.framework_type = framework_type
        if framework_properties is not None:
            self.framework_properties = framework_properties

    @property
    def path(self):
        """Gets the path of this TestCloudProject.  # noqa: E501

        The path to the TestCloud project  # noqa: E501

        :return: The path of this TestCloudProject.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this TestCloudProject.

        The path to the TestCloud project  # noqa: E501

        :param path: The path of this TestCloudProject.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def framework_type(self):
        """Gets the framework_type of this TestCloudProject.  # noqa: E501


        :return: The framework_type of this TestCloudProject.  # noqa: E501
        :rtype: str
        """
        return self._framework_type

    @framework_type.setter
    def framework_type(self, framework_type):
        """Sets the framework_type of this TestCloudProject.


        :param framework_type: The framework_type of this TestCloudProject.  # noqa: E501
        :type: str
        """
        if framework_type is None:
            raise ValueError("Invalid value for `framework_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Appium", "Calabash", "Espresso", "UITest", "Generated"]  # noqa: E501
        if framework_type not in allowed_values:
            raise ValueError(
                "Invalid value for `framework_type` ({0}), must be one of {1}"  # noqa: E501
                .format(framework_type, allowed_values)
            )

        self._framework_type = framework_type

    @property
    def framework_properties(self):
        """Gets the framework_properties of this TestCloudProject.  # noqa: E501


        :return: The framework_properties of this TestCloudProject.  # noqa: E501
        :rtype: TestCloudProjectFrameworkProperties
        """
        return self._framework_properties

    @framework_properties.setter
    def framework_properties(self, framework_properties):
        """Sets the framework_properties of this TestCloudProject.


        :param framework_properties: The framework_properties of this TestCloudProject.  # noqa: E501
        :type: TestCloudProjectFrameworkProperties
        """

        self._framework_properties = framework_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestCloudProject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestCloudProject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
