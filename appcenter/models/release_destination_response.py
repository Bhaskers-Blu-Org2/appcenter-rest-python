# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.release_store_destination_response import ReleaseStoreDestinationResponse  # noqa: F401,E501


class ReleaseDestinationResponse(ReleaseStoreDestinationResponse):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mandatory_update': 'bool',
        'provisioning_status_url': 'str'
    }
    if hasattr(ReleaseStoreDestinationResponse, "swagger_types"):
        swagger_types.update(ReleaseStoreDestinationResponse.swagger_types)

    attribute_map = {
        'mandatory_update': 'mandatory_update',
        'provisioning_status_url': 'provisioning_status_url'
    }
    if hasattr(ReleaseStoreDestinationResponse, "attribute_map"):
        attribute_map.update(ReleaseStoreDestinationResponse.attribute_map)

    def __init__(self, mandatory_update=None, provisioning_status_url=None, *args, **kwargs):  # noqa: E501
        """ReleaseDestinationResponse - a model defined in Swagger"""  # noqa: E501
        self._mandatory_update = None
        self._provisioning_status_url = None
        self.discriminator = None
        self.mandatory_update = mandatory_update
        if provisioning_status_url is not None:
            self.provisioning_status_url = provisioning_status_url
        ReleaseStoreDestinationResponse.__init__(self, *args, **kwargs)

    @property
    def mandatory_update(self):
        """Gets the mandatory_update of this ReleaseDestinationResponse.  # noqa: E501

        Flag to mark the release for the provided destinations as mandatory  # noqa: E501

        :return: The mandatory_update of this ReleaseDestinationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._mandatory_update

    @mandatory_update.setter
    def mandatory_update(self, mandatory_update):
        """Sets the mandatory_update of this ReleaseDestinationResponse.

        Flag to mark the release for the provided destinations as mandatory  # noqa: E501

        :param mandatory_update: The mandatory_update of this ReleaseDestinationResponse.  # noqa: E501
        :type: bool
        """
        if mandatory_update is None:
            raise ValueError("Invalid value for `mandatory_update`, must not be `None`")  # noqa: E501

        self._mandatory_update = mandatory_update

    @property
    def provisioning_status_url(self):
        """Gets the provisioning_status_url of this ReleaseDestinationResponse.  # noqa: E501

        The url to check provisioning status.  # noqa: E501

        :return: The provisioning_status_url of this ReleaseDestinationResponse.  # noqa: E501
        :rtype: str
        """
        return self._provisioning_status_url

    @provisioning_status_url.setter
    def provisioning_status_url(self, provisioning_status_url):
        """Sets the provisioning_status_url of this ReleaseDestinationResponse.

        The url to check provisioning status.  # noqa: E501

        :param provisioning_status_url: The provisioning_status_url of this ReleaseDestinationResponse.  # noqa: E501
        :type: str
        """

        self._provisioning_status_url = provisioning_status_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReleaseDestinationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseDestinationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
