# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AudienceDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'definition': 'str',
        'enabled': 'bool',
        'custom_properties': 'dict(str, str)'
    }

    attribute_map = {
        'description': 'description',
        'definition': 'definition',
        'enabled': 'enabled',
        'custom_properties': 'custom_properties'
    }

    def __init__(self, description=None, definition=None, enabled=True, custom_properties=None):  # noqa: E501
        """AudienceDefinition - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._definition = None
        self._enabled = None
        self._custom_properties = None
        self.discriminator = None
        if description is not None:
            self.description = description
        self.definition = definition
        if enabled is not None:
            self.enabled = enabled
        if custom_properties is not None:
            self.custom_properties = custom_properties

    @property
    def description(self):
        """Gets the description of this AudienceDefinition.  # noqa: E501

        Audience description.  # noqa: E501

        :return: The description of this AudienceDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AudienceDefinition.

        Audience description.  # noqa: E501

        :param description: The description of this AudienceDefinition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def definition(self):
        """Gets the definition of this AudienceDefinition.  # noqa: E501

        Audience definition in OData format.  # noqa: E501

        :return: The definition of this AudienceDefinition.  # noqa: E501
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this AudienceDefinition.

        Audience definition in OData format.  # noqa: E501

        :param definition: The definition of this AudienceDefinition.  # noqa: E501
        :type: str
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")  # noqa: E501

        self._definition = definition

    @property
    def enabled(self):
        """Gets the enabled of this AudienceDefinition.  # noqa: E501


        :return: The enabled of this AudienceDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AudienceDefinition.


        :param enabled: The enabled of this AudienceDefinition.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def custom_properties(self):
        """Gets the custom_properties of this AudienceDefinition.  # noqa: E501

        Custom properties used in the definition.  # noqa: E501

        :return: The custom_properties of this AudienceDefinition.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this AudienceDefinition.

        Custom properties used in the definition.  # noqa: E501

        :param custom_properties: The custom_properties of this AudienceDefinition.  # noqa: E501
        :type: dict(str, str)
        """
        allowed_values = ["string", "number", "boolean", "date_time"]  # noqa: E501
        if not set(custom_properties.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `custom_properties` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(custom_properties.keys()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._custom_properties = custom_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AudienceDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudienceDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
