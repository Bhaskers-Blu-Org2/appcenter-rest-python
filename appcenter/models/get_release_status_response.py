# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class GetReleaseStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'upload_status': 'str',
        'error_details': 'str',
        'release_distinct_id': 'float',
        'release_url': 'object'
    }

    attribute_map = {
        'id': 'id',
        'upload_status': 'upload_status',
        'error_details': 'error_details',
        'release_distinct_id': 'release_distinct_id',
        'release_url': 'release_url'
    }

    def __init__(self, id=None, upload_status=None, error_details=None, release_distinct_id=None, release_url=None):  # noqa: E501
        """GetReleaseStatusResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._upload_status = None
        self._error_details = None
        self._release_distinct_id = None
        self._release_url = None
        self.discriminator = None
        self.id = id
        self.upload_status = upload_status
        if error_details is not None:
            self.error_details = error_details
        if release_distinct_id is not None:
            self.release_distinct_id = release_distinct_id
        if release_url is not None:
            self.release_url = release_url

    @property
    def id(self):
        """Gets the id of this GetReleaseStatusResponse.  # noqa: E501

        The ID for the upload.  # noqa: E501

        :return: The id of this GetReleaseStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetReleaseStatusResponse.

        The ID for the upload.  # noqa: E501

        :param id: The id of this GetReleaseStatusResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def upload_status(self):
        """Gets the upload_status of this GetReleaseStatusResponse.  # noqa: E501

        The current upload status.  # noqa: E501

        :return: The upload_status of this GetReleaseStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._upload_status

    @upload_status.setter
    def upload_status(self, upload_status):
        """Sets the upload_status of this GetReleaseStatusResponse.

        The current upload status.  # noqa: E501

        :param upload_status: The upload_status of this GetReleaseStatusResponse.  # noqa: E501
        :type: str
        """
        if upload_status is None:
            raise ValueError("Invalid value for `upload_status`, must not be `None`")  # noqa: E501
        allowed_values = ["uploadStarted", "uploadFinished", "readyToBePublished", "malwareDetected", "error"]  # noqa: E501
        if upload_status not in allowed_values:
            raise ValueError(
                "Invalid value for `upload_status` ({0}), must be one of {1}"  # noqa: E501
                .format(upload_status, allowed_values)
            )

        self._upload_status = upload_status

    @property
    def error_details(self):
        """Gets the error_details of this GetReleaseStatusResponse.  # noqa: E501

        Details describing what went wrong processing the upload. Will only be set if status = 'error'.  # noqa: E501

        :return: The error_details of this GetReleaseStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this GetReleaseStatusResponse.

        Details describing what went wrong processing the upload. Will only be set if status = 'error'.  # noqa: E501

        :param error_details: The error_details of this GetReleaseStatusResponse.  # noqa: E501
        :type: str
        """

        self._error_details = error_details

    @property
    def release_distinct_id(self):
        """Gets the release_distinct_id of this GetReleaseStatusResponse.  # noqa: E501

        The distinct ID of the release. Will only be set when the status = 'readyToBePublished'.  # noqa: E501

        :return: The release_distinct_id of this GetReleaseStatusResponse.  # noqa: E501
        :rtype: float
        """
        return self._release_distinct_id

    @release_distinct_id.setter
    def release_distinct_id(self, release_distinct_id):
        """Sets the release_distinct_id of this GetReleaseStatusResponse.

        The distinct ID of the release. Will only be set when the status = 'readyToBePublished'.  # noqa: E501

        :param release_distinct_id: The release_distinct_id of this GetReleaseStatusResponse.  # noqa: E501
        :type: float
        """

        self._release_distinct_id = release_distinct_id

    @property
    def release_url(self):
        """Gets the release_url of this GetReleaseStatusResponse.  # noqa: E501

        The URL of the release. Will only be set when the status = 'readyToBePublished'.  # noqa: E501

        :return: The release_url of this GetReleaseStatusResponse.  # noqa: E501
        :rtype: object
        """
        return self._release_url

    @release_url.setter
    def release_url(self, release_url):
        """Sets the release_url of this GetReleaseStatusResponse.

        The URL of the release. Will only be set when the status = 'readyToBePublished'.  # noqa: E501

        :param release_url: The release_url of this GetReleaseStatusResponse.  # noqa: E501
        :type: object
        """

        self._release_url = release_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetReleaseStatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetReleaseStatusResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
