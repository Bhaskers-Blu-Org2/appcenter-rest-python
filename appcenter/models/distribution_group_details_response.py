# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.distribution_group_response import DistributionGroupResponse  # noqa: F401,E501
from appcenter.models.distribution_group_user_get_response import DistributionGroupUserGetResponse  # noqa: F401,E501


class DistributionGroupDetailsResponse(DistributionGroupResponse):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_shared': 'bool',
        'total_apps_count': 'float',
        'total_user_count': 'float',
        'notified_user_count': 'float',
        'group_type': 'str',
        'users': 'list[DistributionGroupUserGetResponse]'
    }
    if hasattr(DistributionGroupResponse, "swagger_types"):
        swagger_types.update(DistributionGroupResponse.swagger_types)

    attribute_map = {
        'is_shared': 'is_shared',
        'total_apps_count': 'total_apps_count',
        'total_user_count': 'total_user_count',
        'notified_user_count': 'notified_user_count',
        'group_type': 'group_type',
        'users': 'users'
    }
    if hasattr(DistributionGroupResponse, "attribute_map"):
        attribute_map.update(DistributionGroupResponse.attribute_map)

    def __init__(self, is_shared=None, total_apps_count=None, total_user_count=None, notified_user_count=None, group_type=None, users=None, *args, **kwargs):  # noqa: E501
        """DistributionGroupDetailsResponse - a model defined in Swagger"""  # noqa: E501
        self._is_shared = None
        self._total_apps_count = None
        self._total_user_count = None
        self._notified_user_count = None
        self._group_type = None
        self._users = None
        self.discriminator = None
        if is_shared is not None:
            self.is_shared = is_shared
        if total_apps_count is not None:
            self.total_apps_count = total_apps_count
        if total_user_count is not None:
            self.total_user_count = total_user_count
        if notified_user_count is not None:
            self.notified_user_count = notified_user_count
        if group_type is not None:
            self.group_type = group_type
        if users is not None:
            self.users = users
        DistributionGroupResponse.__init__(self, *args, **kwargs)

    @property
    def is_shared(self):
        """Gets the is_shared of this DistributionGroupDetailsResponse.  # noqa: E501

        Whether the distribution group is shared group or not  # noqa: E501

        :return: The is_shared of this DistributionGroupDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this DistributionGroupDetailsResponse.

        Whether the distribution group is shared group or not  # noqa: E501

        :param is_shared: The is_shared of this DistributionGroupDetailsResponse.  # noqa: E501
        :type: bool
        """

        self._is_shared = is_shared

    @property
    def total_apps_count(self):
        """Gets the total_apps_count of this DistributionGroupDetailsResponse.  # noqa: E501

        The count of apps associated with this distribution group  # noqa: E501

        :return: The total_apps_count of this DistributionGroupDetailsResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_apps_count

    @total_apps_count.setter
    def total_apps_count(self, total_apps_count):
        """Sets the total_apps_count of this DistributionGroupDetailsResponse.

        The count of apps associated with this distribution group  # noqa: E501

        :param total_apps_count: The total_apps_count of this DistributionGroupDetailsResponse.  # noqa: E501
        :type: float
        """

        self._total_apps_count = total_apps_count

    @property
    def total_user_count(self):
        """Gets the total_user_count of this DistributionGroupDetailsResponse.  # noqa: E501

        The count of users in the distribution group  # noqa: E501

        :return: The total_user_count of this DistributionGroupDetailsResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_user_count

    @total_user_count.setter
    def total_user_count(self, total_user_count):
        """Sets the total_user_count of this DistributionGroupDetailsResponse.

        The count of users in the distribution group  # noqa: E501

        :param total_user_count: The total_user_count of this DistributionGroupDetailsResponse.  # noqa: E501
        :type: float
        """

        self._total_user_count = total_user_count

    @property
    def notified_user_count(self):
        """Gets the notified_user_count of this DistributionGroupDetailsResponse.  # noqa: E501

        The count of non-pending users in the distribution group who will be notified by new releases  # noqa: E501

        :return: The notified_user_count of this DistributionGroupDetailsResponse.  # noqa: E501
        :rtype: float
        """
        return self._notified_user_count

    @notified_user_count.setter
    def notified_user_count(self, notified_user_count):
        """Sets the notified_user_count of this DistributionGroupDetailsResponse.

        The count of non-pending users in the distribution group who will be notified by new releases  # noqa: E501

        :param notified_user_count: The notified_user_count of this DistributionGroupDetailsResponse.  # noqa: E501
        :type: float
        """

        self._notified_user_count = notified_user_count

    @property
    def group_type(self):
        """Gets the group_type of this DistributionGroupDetailsResponse.  # noqa: E501

        Type of group (Default, HockeyAppDefault or MicrosoftDogfooding)  # noqa: E501

        :return: The group_type of this DistributionGroupDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this DistributionGroupDetailsResponse.

        Type of group (Default, HockeyAppDefault or MicrosoftDogfooding)  # noqa: E501

        :param group_type: The group_type of this DistributionGroupDetailsResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "HockeyAppDefault", "MicrosoftDogfooding"]  # noqa: E501
        if group_type not in allowed_values:
            raise ValueError(
                "Invalid value for `group_type` ({0}), must be one of {1}"  # noqa: E501
                .format(group_type, allowed_values)
            )

        self._group_type = group_type

    @property
    def users(self):
        """Gets the users of this DistributionGroupDetailsResponse.  # noqa: E501

        The distribution group users  # noqa: E501

        :return: The users of this DistributionGroupDetailsResponse.  # noqa: E501
        :rtype: list[DistributionGroupUserGetResponse]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this DistributionGroupDetailsResponse.

        The distribution group users  # noqa: E501

        :param users: The users of this DistributionGroupDetailsResponse.  # noqa: E501
        :type: list[DistributionGroupUserGetResponse]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DistributionGroupDetailsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DistributionGroupDetailsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
