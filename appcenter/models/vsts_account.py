# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.vsts_profile import VSTSProfile  # noqa: F401,E501
from appcenter.models.vsts_project import VSTSProject  # noqa: F401,E501


class VSTSAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_uri': 'str',
        'account_name': 'str',
        'account_type': 'str',
        'account_status': 'str',
        'user': 'VSTSProfile',
        'projects': 'list[VSTSProject]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_uri': 'accountUri',
        'account_name': 'accountName',
        'account_type': 'accountType',
        'account_status': 'accountStatus',
        'user': 'user',
        'projects': 'projects'
    }

    def __init__(self, account_id=None, account_uri=None, account_name=None, account_type=None, account_status=None, user=None, projects=None):  # noqa: E501
        """VSTSAccount - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account_uri = None
        self._account_name = None
        self._account_type = None
        self._account_status = None
        self._user = None
        self._projects = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if account_uri is not None:
            self.account_uri = account_uri
        if account_name is not None:
            self.account_name = account_name
        if account_type is not None:
            self.account_type = account_type
        if account_status is not None:
            self.account_status = account_status
        if user is not None:
            self.user = user
        if projects is not None:
            self.projects = projects

    @property
    def account_id(self):
        """Gets the account_id of this VSTSAccount.  # noqa: E501

        Account id  # noqa: E501

        :return: The account_id of this VSTSAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this VSTSAccount.

        Account id  # noqa: E501

        :param account_id: The account_id of this VSTSAccount.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_uri(self):
        """Gets the account_uri of this VSTSAccount.  # noqa: E501

        Account uri  # noqa: E501

        :return: The account_uri of this VSTSAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_uri

    @account_uri.setter
    def account_uri(self, account_uri):
        """Sets the account_uri of this VSTSAccount.

        Account uri  # noqa: E501

        :param account_uri: The account_uri of this VSTSAccount.  # noqa: E501
        :type: str
        """

        self._account_uri = account_uri

    @property
    def account_name(self):
        """Gets the account_name of this VSTSAccount.  # noqa: E501

        Account name  # noqa: E501

        :return: The account_name of this VSTSAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this VSTSAccount.

        Account name  # noqa: E501

        :param account_name: The account_name of this VSTSAccount.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def account_type(self):
        """Gets the account_type of this VSTSAccount.  # noqa: E501

        Account type  # noqa: E501

        :return: The account_type of this VSTSAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this VSTSAccount.

        Account type  # noqa: E501

        :param account_type: The account_type of this VSTSAccount.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def account_status(self):
        """Gets the account_status of this VSTSAccount.  # noqa: E501

        Account status  # noqa: E501

        :return: The account_status of this VSTSAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this VSTSAccount.

        Account status  # noqa: E501

        :param account_status: The account_status of this VSTSAccount.  # noqa: E501
        :type: str
        """

        self._account_status = account_status

    @property
    def user(self):
        """Gets the user of this VSTSAccount.  # noqa: E501


        :return: The user of this VSTSAccount.  # noqa: E501
        :rtype: VSTSProfile
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this VSTSAccount.


        :param user: The user of this VSTSAccount.  # noqa: E501
        :type: VSTSProfile
        """

        self._user = user

    @property
    def projects(self):
        """Gets the projects of this VSTSAccount.  # noqa: E501

        Account projects  # noqa: E501

        :return: The projects of this VSTSAccount.  # noqa: E501
        :rtype: list[VSTSProject]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this VSTSAccount.

        Account projects  # noqa: E501

        :param projects: The projects of this VSTSAccount.  # noqa: E501
        :type: list[VSTSProject]
        """

        self._projects = projects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VSTSAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VSTSAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
