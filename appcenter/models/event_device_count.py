# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.date_time_counts import DateTimeCounts  # noqa: F401,E501


class EventDeviceCount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_devices': 'int',
        'total_devices_with_event': 'int',
        'previous_total_devices_with_event': 'int',
        'devices_count': 'list[DateTimeCounts]'
    }

    attribute_map = {
        'total_devices': 'total_devices',
        'total_devices_with_event': 'total_devices_with_event',
        'previous_total_devices_with_event': 'previous_total_devices_with_event',
        'devices_count': 'devices_count'
    }

    def __init__(self, total_devices=None, total_devices_with_event=None, previous_total_devices_with_event=None, devices_count=None):  # noqa: E501
        """EventDeviceCount - a model defined in Swagger"""  # noqa: E501
        self._total_devices = None
        self._total_devices_with_event = None
        self._previous_total_devices_with_event = None
        self._devices_count = None
        self.discriminator = None
        if total_devices is not None:
            self.total_devices = total_devices
        if total_devices_with_event is not None:
            self.total_devices_with_event = total_devices_with_event
        if previous_total_devices_with_event is not None:
            self.previous_total_devices_with_event = previous_total_devices_with_event
        if devices_count is not None:
            self.devices_count = devices_count

    @property
    def total_devices(self):
        """Gets the total_devices of this EventDeviceCount.  # noqa: E501


        :return: The total_devices of this EventDeviceCount.  # noqa: E501
        :rtype: int
        """
        return self._total_devices

    @total_devices.setter
    def total_devices(self, total_devices):
        """Sets the total_devices of this EventDeviceCount.


        :param total_devices: The total_devices of this EventDeviceCount.  # noqa: E501
        :type: int
        """

        self._total_devices = total_devices

    @property
    def total_devices_with_event(self):
        """Gets the total_devices_with_event of this EventDeviceCount.  # noqa: E501


        :return: The total_devices_with_event of this EventDeviceCount.  # noqa: E501
        :rtype: int
        """
        return self._total_devices_with_event

    @total_devices_with_event.setter
    def total_devices_with_event(self, total_devices_with_event):
        """Sets the total_devices_with_event of this EventDeviceCount.


        :param total_devices_with_event: The total_devices_with_event of this EventDeviceCount.  # noqa: E501
        :type: int
        """

        self._total_devices_with_event = total_devices_with_event

    @property
    def previous_total_devices_with_event(self):
        """Gets the previous_total_devices_with_event of this EventDeviceCount.  # noqa: E501


        :return: The previous_total_devices_with_event of this EventDeviceCount.  # noqa: E501
        :rtype: int
        """
        return self._previous_total_devices_with_event

    @previous_total_devices_with_event.setter
    def previous_total_devices_with_event(self, previous_total_devices_with_event):
        """Sets the previous_total_devices_with_event of this EventDeviceCount.


        :param previous_total_devices_with_event: The previous_total_devices_with_event of this EventDeviceCount.  # noqa: E501
        :type: int
        """

        self._previous_total_devices_with_event = previous_total_devices_with_event

    @property
    def devices_count(self):
        """Gets the devices_count of this EventDeviceCount.  # noqa: E501


        :return: The devices_count of this EventDeviceCount.  # noqa: E501
        :rtype: list[DateTimeCounts]
        """
        return self._devices_count

    @devices_count.setter
    def devices_count(self, devices_count):
        """Sets the devices_count of this EventDeviceCount.


        :param devices_count: The devices_count of this EventDeviceCount.  # noqa: E501
        :type: list[DateTimeCounts]
        """

        self._devices_count = devices_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventDeviceCount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventDeviceCount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
