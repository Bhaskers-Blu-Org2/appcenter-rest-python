# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.code_push_release_info import CodePushReleaseInfo  # noqa: F401,E501


class UpdateInfoData(CodePushReleaseInfo):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'download_url': 'str',
        'is_available': 'bool',
        'package_size': 'float',
        'should_run_binary_version': 'bool',
        'update_app_version': 'bool',
        'package_hash': 'str',
        'label': 'str'
    }
    if hasattr(CodePushReleaseInfo, "swagger_types"):
        swagger_types.update(CodePushReleaseInfo.swagger_types)

    attribute_map = {
        'download_url': 'download_url',
        'is_available': 'is_available',
        'package_size': 'package_size',
        'should_run_binary_version': 'should_run_binary_version',
        'update_app_version': 'update_app_version',
        'package_hash': 'package_hash',
        'label': 'label'
    }
    if hasattr(CodePushReleaseInfo, "attribute_map"):
        attribute_map.update(CodePushReleaseInfo.attribute_map)

    def __init__(self, download_url=None, is_available=None, package_size=None, should_run_binary_version=None, update_app_version=None, package_hash=None, label=None, *args, **kwargs):  # noqa: E501
        """UpdateInfoData - a model defined in Swagger"""  # noqa: E501
        self._download_url = None
        self._is_available = None
        self._package_size = None
        self._should_run_binary_version = None
        self._update_app_version = None
        self._package_hash = None
        self._label = None
        self.discriminator = None
        if download_url is not None:
            self.download_url = download_url
        if is_available is not None:
            self.is_available = is_available
        if package_size is not None:
            self.package_size = package_size
        if should_run_binary_version is not None:
            self.should_run_binary_version = should_run_binary_version
        if update_app_version is not None:
            self.update_app_version = update_app_version
        if package_hash is not None:
            self.package_hash = package_hash
        if label is not None:
            self.label = label
        CodePushReleaseInfo.__init__(self, *args, **kwargs)

    @property
    def download_url(self):
        """Gets the download_url of this UpdateInfoData.  # noqa: E501


        :return: The download_url of this UpdateInfoData.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this UpdateInfoData.


        :param download_url: The download_url of this UpdateInfoData.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def is_available(self):
        """Gets the is_available of this UpdateInfoData.  # noqa: E501


        :return: The is_available of this UpdateInfoData.  # noqa: E501
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this UpdateInfoData.


        :param is_available: The is_available of this UpdateInfoData.  # noqa: E501
        :type: bool
        """

        self._is_available = is_available

    @property
    def package_size(self):
        """Gets the package_size of this UpdateInfoData.  # noqa: E501


        :return: The package_size of this UpdateInfoData.  # noqa: E501
        :rtype: float
        """
        return self._package_size

    @package_size.setter
    def package_size(self, package_size):
        """Sets the package_size of this UpdateInfoData.


        :param package_size: The package_size of this UpdateInfoData.  # noqa: E501
        :type: float
        """

        self._package_size = package_size

    @property
    def should_run_binary_version(self):
        """Gets the should_run_binary_version of this UpdateInfoData.  # noqa: E501


        :return: The should_run_binary_version of this UpdateInfoData.  # noqa: E501
        :rtype: bool
        """
        return self._should_run_binary_version

    @should_run_binary_version.setter
    def should_run_binary_version(self, should_run_binary_version):
        """Sets the should_run_binary_version of this UpdateInfoData.


        :param should_run_binary_version: The should_run_binary_version of this UpdateInfoData.  # noqa: E501
        :type: bool
        """

        self._should_run_binary_version = should_run_binary_version

    @property
    def update_app_version(self):
        """Gets the update_app_version of this UpdateInfoData.  # noqa: E501


        :return: The update_app_version of this UpdateInfoData.  # noqa: E501
        :rtype: bool
        """
        return self._update_app_version

    @update_app_version.setter
    def update_app_version(self, update_app_version):
        """Sets the update_app_version of this UpdateInfoData.


        :param update_app_version: The update_app_version of this UpdateInfoData.  # noqa: E501
        :type: bool
        """

        self._update_app_version = update_app_version

    @property
    def package_hash(self):
        """Gets the package_hash of this UpdateInfoData.  # noqa: E501


        :return: The package_hash of this UpdateInfoData.  # noqa: E501
        :rtype: str
        """
        return self._package_hash

    @package_hash.setter
    def package_hash(self, package_hash):
        """Sets the package_hash of this UpdateInfoData.


        :param package_hash: The package_hash of this UpdateInfoData.  # noqa: E501
        :type: str
        """

        self._package_hash = package_hash

    @property
    def label(self):
        """Gets the label of this UpdateInfoData.  # noqa: E501


        :return: The label of this UpdateInfoData.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this UpdateInfoData.


        :param label: The label of this UpdateInfoData.  # noqa: E501
        :type: str
        """

        self._label = label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateInfoData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateInfoData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
