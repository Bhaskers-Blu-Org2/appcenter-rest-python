# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.app_response import AppResponse  # noqa: F401,E501
from appcenter.models.distribution_group_response import DistributionGroupResponse  # noqa: F401,E501


class OrgDistributionGroupDetailsResponse(DistributionGroupResponse):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_apps_count': 'float',
        'total_users_count': 'float',
        'apps': 'list[AppResponse]'
    }
    if hasattr(DistributionGroupResponse, "swagger_types"):
        swagger_types.update(DistributionGroupResponse.swagger_types)

    attribute_map = {
        'total_apps_count': 'total_apps_count',
        'total_users_count': 'total_users_count',
        'apps': 'apps'
    }
    if hasattr(DistributionGroupResponse, "attribute_map"):
        attribute_map.update(DistributionGroupResponse.attribute_map)

    def __init__(self, total_apps_count=None, total_users_count=None, apps=None, *args, **kwargs):  # noqa: E501
        """OrgDistributionGroupDetailsResponse - a model defined in Swagger"""  # noqa: E501
        self._total_apps_count = None
        self._total_users_count = None
        self._apps = None
        self.discriminator = None
        if total_apps_count is not None:
            self.total_apps_count = total_apps_count
        if total_users_count is not None:
            self.total_users_count = total_users_count
        if apps is not None:
            self.apps = apps
        DistributionGroupResponse.__init__(self, *args, **kwargs)

    @property
    def total_apps_count(self):
        """Gets the total_apps_count of this OrgDistributionGroupDetailsResponse.  # noqa: E501

        The count of apps associated with this distribution group  # noqa: E501

        :return: The total_apps_count of this OrgDistributionGroupDetailsResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_apps_count

    @total_apps_count.setter
    def total_apps_count(self, total_apps_count):
        """Sets the total_apps_count of this OrgDistributionGroupDetailsResponse.

        The count of apps associated with this distribution group  # noqa: E501

        :param total_apps_count: The total_apps_count of this OrgDistributionGroupDetailsResponse.  # noqa: E501
        :type: float
        """

        self._total_apps_count = total_apps_count

    @property
    def total_users_count(self):
        """Gets the total_users_count of this OrgDistributionGroupDetailsResponse.  # noqa: E501

        The count of users in the distribution group  # noqa: E501

        :return: The total_users_count of this OrgDistributionGroupDetailsResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_users_count

    @total_users_count.setter
    def total_users_count(self, total_users_count):
        """Sets the total_users_count of this OrgDistributionGroupDetailsResponse.

        The count of users in the distribution group  # noqa: E501

        :param total_users_count: The total_users_count of this OrgDistributionGroupDetailsResponse.  # noqa: E501
        :type: float
        """

        self._total_users_count = total_users_count

    @property
    def apps(self):
        """Gets the apps of this OrgDistributionGroupDetailsResponse.  # noqa: E501

        The apps associated with the distribution group  # noqa: E501

        :return: The apps of this OrgDistributionGroupDetailsResponse.  # noqa: E501
        :rtype: list[AppResponse]
        """
        return self._apps

    @apps.setter
    def apps(self, apps):
        """Sets the apps of this OrgDistributionGroupDetailsResponse.

        The apps associated with the distribution group  # noqa: E501

        :param apps: The apps of this OrgDistributionGroupDetailsResponse.  # noqa: E501
        :type: list[AppResponse]
        """

        self._apps = apps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgDistributionGroupDetailsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgDistributionGroupDetailsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
