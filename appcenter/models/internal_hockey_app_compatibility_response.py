# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InternalHockeyAppCompatibilityResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner_type': 'str',
        'os': 'str',
        'platform': 'str',
        'has_crashes': 'bool',
        'has_feedback': 'bool',
        'has_metrics': 'bool',
        'has_external_builds': 'bool',
        'has_specified_build_server_url': 'bool',
        'has_distribution_groups_outside_of_ownership': 'bool',
        'owner_has_distribution_groups': 'bool',
        'bugtracker_type': 'str',
        'webhook_types': 'list[str]',
        'has_ai_export': 'bool'
    }

    attribute_map = {
        'owner_type': 'owner_type',
        'os': 'os',
        'platform': 'platform',
        'has_crashes': 'has_crashes',
        'has_feedback': 'has_feedback',
        'has_metrics': 'has_metrics',
        'has_external_builds': 'has_external_builds',
        'has_specified_build_server_url': 'has_specified_build_server_url',
        'has_distribution_groups_outside_of_ownership': 'has_distribution_groups_outside_of_ownership',
        'owner_has_distribution_groups': 'owner_has_distribution_groups',
        'bugtracker_type': 'bugtracker_type',
        'webhook_types': 'webhook_types',
        'has_ai_export': 'has_ai_export'
    }

    def __init__(self, owner_type=None, os=None, platform=None, has_crashes=None, has_feedback=None, has_metrics=None, has_external_builds=None, has_specified_build_server_url=None, has_distribution_groups_outside_of_ownership=None, owner_has_distribution_groups=None, bugtracker_type=None, webhook_types=None, has_ai_export=None):  # noqa: E501
        """InternalHockeyAppCompatibilityResponse - a model defined in Swagger"""  # noqa: E501
        self._owner_type = None
        self._os = None
        self._platform = None
        self._has_crashes = None
        self._has_feedback = None
        self._has_metrics = None
        self._has_external_builds = None
        self._has_specified_build_server_url = None
        self._has_distribution_groups_outside_of_ownership = None
        self._owner_has_distribution_groups = None
        self._bugtracker_type = None
        self._webhook_types = None
        self._has_ai_export = None
        self.discriminator = None
        if owner_type is not None:
            self.owner_type = owner_type
        if os is not None:
            self.os = os
        if platform is not None:
            self.platform = platform
        if has_crashes is not None:
            self.has_crashes = has_crashes
        if has_feedback is not None:
            self.has_feedback = has_feedback
        if has_metrics is not None:
            self.has_metrics = has_metrics
        if has_external_builds is not None:
            self.has_external_builds = has_external_builds
        if has_specified_build_server_url is not None:
            self.has_specified_build_server_url = has_specified_build_server_url
        if has_distribution_groups_outside_of_ownership is not None:
            self.has_distribution_groups_outside_of_ownership = has_distribution_groups_outside_of_ownership
        if owner_has_distribution_groups is not None:
            self.owner_has_distribution_groups = owner_has_distribution_groups
        if bugtracker_type is not None:
            self.bugtracker_type = bugtracker_type
        if webhook_types is not None:
            self.webhook_types = webhook_types
        if has_ai_export is not None:
            self.has_ai_export = has_ai_export

    @property
    def owner_type(self):
        """Gets the owner_type of this InternalHockeyAppCompatibilityResponse.  # noqa: E501

        The owner type of the app  # noqa: E501

        :return: The owner_type of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :rtype: str
        """
        return self._owner_type

    @owner_type.setter
    def owner_type(self, owner_type):
        """Sets the owner_type of this InternalHockeyAppCompatibilityResponse.

        The owner type of the app  # noqa: E501

        :param owner_type: The owner_type of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["user", "organization"]  # noqa: E501
        if owner_type not in allowed_values:
            raise ValueError(
                "Invalid value for `owner_type` ({0}), must be one of {1}"  # noqa: E501
                .format(owner_type, allowed_values)
            )

        self._owner_type = owner_type

    @property
    def os(self):
        """Gets the os of this InternalHockeyAppCompatibilityResponse.  # noqa: E501

        The OS of the app  # noqa: E501

        :return: The os of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this InternalHockeyAppCompatibilityResponse.

        The OS of the app  # noqa: E501

        :param os: The os of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Android", "iOS", "macOS", "Windows", "Linux", "Custom"]  # noqa: E501
        if os not in allowed_values:
            raise ValueError(
                "Invalid value for `os` ({0}), must be one of {1}"  # noqa: E501
                .format(os, allowed_values)
            )

        self._os = os

    @property
    def platform(self):
        """Gets the platform of this InternalHockeyAppCompatibilityResponse.  # noqa: E501

        The OS of the app  # noqa: E501

        :return: The platform of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this InternalHockeyAppCompatibilityResponse.

        The OS of the app  # noqa: E501

        :param platform: The platform of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Java", "Objective-C-Swift", "Cordova", "React-Native", "Unity", "Electron", "Xamarin", "Unknown"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def has_crashes(self):
        """Gets the has_crashes of this InternalHockeyAppCompatibilityResponse.  # noqa: E501

        Does the HockeyApp app have crashes from within the last 90 days?  # noqa: E501

        :return: The has_crashes of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_crashes

    @has_crashes.setter
    def has_crashes(self, has_crashes):
        """Sets the has_crashes of this InternalHockeyAppCompatibilityResponse.

        Does the HockeyApp app have crashes from within the last 90 days?  # noqa: E501

        :param has_crashes: The has_crashes of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :type: bool
        """

        self._has_crashes = has_crashes

    @property
    def has_feedback(self):
        """Gets the has_feedback of this InternalHockeyAppCompatibilityResponse.  # noqa: E501

        Does the HockeyApp app have feedback from within the last 90 days?  # noqa: E501

        :return: The has_feedback of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_feedback

    @has_feedback.setter
    def has_feedback(self, has_feedback):
        """Sets the has_feedback of this InternalHockeyAppCompatibilityResponse.

        Does the HockeyApp app have feedback from within the last 90 days?  # noqa: E501

        :param has_feedback: The has_feedback of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :type: bool
        """

        self._has_feedback = has_feedback

    @property
    def has_metrics(self):
        """Gets the has_metrics of this InternalHockeyAppCompatibilityResponse.  # noqa: E501

        Does the HockeyApp app have metrics from within the last 30 days?  # noqa: E501

        :return: The has_metrics of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_metrics

    @has_metrics.setter
    def has_metrics(self, has_metrics):
        """Sets the has_metrics of this InternalHockeyAppCompatibilityResponse.

        Does the HockeyApp app have metrics from within the last 30 days?  # noqa: E501

        :param has_metrics: The has_metrics of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :type: bool
        """

        self._has_metrics = has_metrics

    @property
    def has_external_builds(self):
        """Gets the has_external_builds of this InternalHockeyAppCompatibilityResponse.  # noqa: E501

        Does the HockeyApp app have any external builds?  # noqa: E501

        :return: The has_external_builds of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_external_builds

    @has_external_builds.setter
    def has_external_builds(self, has_external_builds):
        """Sets the has_external_builds of this InternalHockeyAppCompatibilityResponse.

        Does the HockeyApp app have any external builds?  # noqa: E501

        :param has_external_builds: The has_external_builds of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :type: bool
        """

        self._has_external_builds = has_external_builds

    @property
    def has_specified_build_server_url(self):
        """Gets the has_specified_build_server_url of this InternalHockeyAppCompatibilityResponse.  # noqa: E501

        Does the HockeyApp app have any build server URLs specified?  # noqa: E501

        :return: The has_specified_build_server_url of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_specified_build_server_url

    @has_specified_build_server_url.setter
    def has_specified_build_server_url(self, has_specified_build_server_url):
        """Sets the has_specified_build_server_url of this InternalHockeyAppCompatibilityResponse.

        Does the HockeyApp app have any build server URLs specified?  # noqa: E501

        :param has_specified_build_server_url: The has_specified_build_server_url of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :type: bool
        """

        self._has_specified_build_server_url = has_specified_build_server_url

    @property
    def has_distribution_groups_outside_of_ownership(self):
        """Gets the has_distribution_groups_outside_of_ownership of this InternalHockeyAppCompatibilityResponse.  # noqa: E501

        Does the HockeyApp app have an associated Distribution Group that is owned by a different owner?  # noqa: E501

        :return: The has_distribution_groups_outside_of_ownership of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_distribution_groups_outside_of_ownership

    @has_distribution_groups_outside_of_ownership.setter
    def has_distribution_groups_outside_of_ownership(self, has_distribution_groups_outside_of_ownership):
        """Sets the has_distribution_groups_outside_of_ownership of this InternalHockeyAppCompatibilityResponse.

        Does the HockeyApp app have an associated Distribution Group that is owned by a different owner?  # noqa: E501

        :param has_distribution_groups_outside_of_ownership: The has_distribution_groups_outside_of_ownership of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :type: bool
        """

        self._has_distribution_groups_outside_of_ownership = has_distribution_groups_outside_of_ownership

    @property
    def owner_has_distribution_groups(self):
        """Gets the owner_has_distribution_groups of this InternalHockeyAppCompatibilityResponse.  # noqa: E501

        Does the HockeyApp app's owner own any Distribution Groups?  # noqa: E501

        :return: The owner_has_distribution_groups of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._owner_has_distribution_groups

    @owner_has_distribution_groups.setter
    def owner_has_distribution_groups(self, owner_has_distribution_groups):
        """Sets the owner_has_distribution_groups of this InternalHockeyAppCompatibilityResponse.

        Does the HockeyApp app's owner own any Distribution Groups?  # noqa: E501

        :param owner_has_distribution_groups: The owner_has_distribution_groups of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :type: bool
        """

        self._owner_has_distribution_groups = owner_has_distribution_groups

    @property
    def bugtracker_type(self):
        """Gets the bugtracker_type of this InternalHockeyAppCompatibilityResponse.  # noqa: E501

        Does the HockeyApp app have any bugtracker configured? Which type?  # noqa: E501

        :return: The bugtracker_type of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :rtype: str
        """
        return self._bugtracker_type

    @bugtracker_type.setter
    def bugtracker_type(self, bugtracker_type):
        """Sets the bugtracker_type of this InternalHockeyAppCompatibilityResponse.

        Does the HockeyApp app have any bugtracker configured? Which type?  # noqa: E501

        :param bugtracker_type: The bugtracker_type of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "vso", "jira5", "github", "other"]  # noqa: E501
        if bugtracker_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bugtracker_type` ({0}), must be one of {1}"  # noqa: E501
                .format(bugtracker_type, allowed_values)
            )

        self._bugtracker_type = bugtracker_type

    @property
    def webhook_types(self):
        """Gets the webhook_types of this InternalHockeyAppCompatibilityResponse.  # noqa: E501

        Does the HockeyApp app have any webhooks configured? Which types?  # noqa: E501

        :return: The webhook_types of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._webhook_types

    @webhook_types.setter
    def webhook_types(self, webhook_types):
        """Sets the webhook_types of this InternalHockeyAppCompatibilityResponse.

        Does the HockeyApp app have any webhooks configured? Which types?  # noqa: E501

        :param webhook_types: The webhook_types of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "teams", "generic"]  # noqa: E501
        if not set(webhook_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `webhook_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(webhook_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._webhook_types = webhook_types

    @property
    def has_ai_export(self):
        """Gets the has_ai_export of this InternalHockeyAppCompatibilityResponse.  # noqa: E501

        Does the HockeyApp app export any data to Application Insights?  # noqa: E501

        :return: The has_ai_export of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_ai_export

    @has_ai_export.setter
    def has_ai_export(self, has_ai_export):
        """Sets the has_ai_export of this InternalHockeyAppCompatibilityResponse.

        Does the HockeyApp app export any data to Application Insights?  # noqa: E501

        :param has_ai_export: The has_ai_export of this InternalHockeyAppCompatibilityResponse.  # noqa: E501
        :type: bool
        """

        self._has_ai_export = has_ai_export

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InternalHockeyAppCompatibilityResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InternalHockeyAppCompatibilityResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
