# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DatabaseMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interval': 'int',
        'total_requests': 'float',
        'total_request_units': 'float',
        'data_usage': 'float',
        'index_usage': 'float'
    }

    attribute_map = {
        'interval': 'interval',
        'total_requests': 'totalRequests',
        'total_request_units': 'totalRequestUnits',
        'data_usage': 'dataUsage',
        'index_usage': 'indexUsage'
    }

    def __init__(self, interval=None, total_requests=None, total_request_units=None, data_usage=None, index_usage=None):  # noqa: E501
        """DatabaseMetrics - a model defined in Swagger"""  # noqa: E501
        self._interval = None
        self._total_requests = None
        self._total_request_units = None
        self._data_usage = None
        self._index_usage = None
        self.discriminator = None
        if interval is not None:
            self.interval = interval
        if total_requests is not None:
            self.total_requests = total_requests
        if total_request_units is not None:
            self.total_request_units = total_request_units
        if data_usage is not None:
            self.data_usage = data_usage
        if index_usage is not None:
            self.index_usage = index_usage

    @property
    def interval(self):
        """Gets the interval of this DatabaseMetrics.  # noqa: E501


        :return: The interval of this DatabaseMetrics.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this DatabaseMetrics.


        :param interval: The interval of this DatabaseMetrics.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def total_requests(self):
        """Gets the total_requests of this DatabaseMetrics.  # noqa: E501


        :return: The total_requests of this DatabaseMetrics.  # noqa: E501
        :rtype: float
        """
        return self._total_requests

    @total_requests.setter
    def total_requests(self, total_requests):
        """Sets the total_requests of this DatabaseMetrics.


        :param total_requests: The total_requests of this DatabaseMetrics.  # noqa: E501
        :type: float
        """

        self._total_requests = total_requests

    @property
    def total_request_units(self):
        """Gets the total_request_units of this DatabaseMetrics.  # noqa: E501


        :return: The total_request_units of this DatabaseMetrics.  # noqa: E501
        :rtype: float
        """
        return self._total_request_units

    @total_request_units.setter
    def total_request_units(self, total_request_units):
        """Sets the total_request_units of this DatabaseMetrics.


        :param total_request_units: The total_request_units of this DatabaseMetrics.  # noqa: E501
        :type: float
        """

        self._total_request_units = total_request_units

    @property
    def data_usage(self):
        """Gets the data_usage of this DatabaseMetrics.  # noqa: E501


        :return: The data_usage of this DatabaseMetrics.  # noqa: E501
        :rtype: float
        """
        return self._data_usage

    @data_usage.setter
    def data_usage(self, data_usage):
        """Sets the data_usage of this DatabaseMetrics.


        :param data_usage: The data_usage of this DatabaseMetrics.  # noqa: E501
        :type: float
        """

        self._data_usage = data_usage

    @property
    def index_usage(self):
        """Gets the index_usage of this DatabaseMetrics.  # noqa: E501


        :return: The index_usage of this DatabaseMetrics.  # noqa: E501
        :rtype: float
        """
        return self._index_usage

    @index_usage.setter
    def index_usage(self, index_usage):
        """Sets the index_usage of this DatabaseMetrics.


        :param index_usage: The index_usage of this DatabaseMetrics.  # noqa: E501
        :type: float
        """

        self._index_usage = index_usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatabaseMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatabaseMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
