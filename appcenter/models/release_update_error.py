# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.destination_error import DestinationError  # noqa: F401,E501
from appcenter.models.error_details import ErrorDetails  # noqa: F401,E501


class ReleaseUpdateError(ErrorDetails):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'release_notes': 'str',
        'mandatory_update': 'bool',
        'destinations': 'list[DestinationError]'
    }
    if hasattr(ErrorDetails, "swagger_types"):
        swagger_types.update(ErrorDetails.swagger_types)

    attribute_map = {
        'release_notes': 'release_notes',
        'mandatory_update': 'mandatory_update',
        'destinations': 'destinations'
    }
    if hasattr(ErrorDetails, "attribute_map"):
        attribute_map.update(ErrorDetails.attribute_map)

    def __init__(self, release_notes=None, mandatory_update=None, destinations=None, *args, **kwargs):  # noqa: E501
        """ReleaseUpdateError - a model defined in Swagger"""  # noqa: E501
        self._release_notes = None
        self._mandatory_update = None
        self._destinations = None
        self.discriminator = None
        if release_notes is not None:
            self.release_notes = release_notes
        if mandatory_update is not None:
            self.mandatory_update = mandatory_update
        if destinations is not None:
            self.destinations = destinations
        ErrorDetails.__init__(self, *args, **kwargs)

    @property
    def release_notes(self):
        """Gets the release_notes of this ReleaseUpdateError.  # noqa: E501


        :return: The release_notes of this ReleaseUpdateError.  # noqa: E501
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this ReleaseUpdateError.


        :param release_notes: The release_notes of this ReleaseUpdateError.  # noqa: E501
        :type: str
        """

        self._release_notes = release_notes

    @property
    def mandatory_update(self):
        """Gets the mandatory_update of this ReleaseUpdateError.  # noqa: E501


        :return: The mandatory_update of this ReleaseUpdateError.  # noqa: E501
        :rtype: bool
        """
        return self._mandatory_update

    @mandatory_update.setter
    def mandatory_update(self, mandatory_update):
        """Sets the mandatory_update of this ReleaseUpdateError.


        :param mandatory_update: The mandatory_update of this ReleaseUpdateError.  # noqa: E501
        :type: bool
        """

        self._mandatory_update = mandatory_update

    @property
    def destinations(self):
        """Gets the destinations of this ReleaseUpdateError.  # noqa: E501


        :return: The destinations of this ReleaseUpdateError.  # noqa: E501
        :rtype: list[DestinationError]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this ReleaseUpdateError.


        :param destinations: The destinations of this ReleaseUpdateError.  # noqa: E501
        :type: list[DestinationError]
        """

        self._destinations = destinations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReleaseUpdateError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseUpdateError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
