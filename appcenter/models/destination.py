# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from appcenter.models.destination_id import DestinationId  # noqa: F401,E501
from appcenter.models.distribution_group import DistributionGroup  # noqa: F401,E501
from appcenter.models.distribution_store import DistributionStore  # noqa: F401,E501


class Destination(DistributionGroup):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_latest': 'bool',
        'name': 'str',
        'id': 'str',
        'destination_type': 'str',
        'display_name': 'str'
    }
    if hasattr(DistributionGroup, "swagger_types"):
        swagger_types.update(DistributionGroup.swagger_types)

    attribute_map = {
        'is_latest': 'is_latest',
        'name': 'name',
        'id': 'id',
        'destination_type': 'destination_type',
        'display_name': 'display_name'
    }
    if hasattr(DistributionGroup, "attribute_map"):
        attribute_map.update(DistributionGroup.attribute_map)

    def __init__(self, is_latest=None, name=None, id=None, destination_type=None, display_name=None, *args, **kwargs):  # noqa: E501
        """Destination - a model defined in Swagger"""  # noqa: E501
        self._is_latest = None
        self._name = None
        self._id = None
        self._destination_type = None
        self._display_name = None
        self.discriminator = None
        if is_latest is not None:
            self.is_latest = is_latest
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if destination_type is not None:
            self.destination_type = destination_type
        if display_name is not None:
            self.display_name = display_name
        DistributionGroup.__init__(self, *args, **kwargs)

    @property
    def is_latest(self):
        """Gets the is_latest of this Destination.  # noqa: E501

        Is the containing release the latest one in this distribution store.  # noqa: E501

        :return: The is_latest of this Destination.  # noqa: E501
        :rtype: bool
        """
        return self._is_latest

    @is_latest.setter
    def is_latest(self, is_latest):
        """Sets the is_latest of this Destination.

        Is the containing release the latest one in this distribution store.  # noqa: E501

        :param is_latest: The is_latest of this Destination.  # noqa: E501
        :type: bool
        """

        self._is_latest = is_latest

    @property
    def name(self):
        """Gets the name of this Destination.  # noqa: E501

        Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.  # noqa: E501

        :return: The name of this Destination.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Destination.

        Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.  # noqa: E501

        :param name: The name of this Destination.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this Destination.  # noqa: E501

        Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.  # noqa: E501

        :return: The id of this Destination.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Destination.

        Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.  # noqa: E501

        :param id: The id of this Destination.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def destination_type(self):
        """Gets the destination_type of this Destination.  # noqa: E501

        Destination can be either store or group.  # noqa: E501

        :return: The destination_type of this Destination.  # noqa: E501
        :rtype: str
        """
        return self._destination_type

    @destination_type.setter
    def destination_type(self, destination_type):
        """Sets the destination_type of this Destination.

        Destination can be either store or group.  # noqa: E501

        :param destination_type: The destination_type of this Destination.  # noqa: E501
        :type: str
        """
        allowed_values = ["group", "store", "tester"]  # noqa: E501
        if destination_type not in allowed_values:
            raise ValueError(
                "Invalid value for `destination_type` ({0}), must be one of {1}"  # noqa: E501
                .format(destination_type, allowed_values)
            )

        self._destination_type = destination_type

    @property
    def display_name(self):
        """Gets the display_name of this Destination.  # noqa: E501

        Display name for the group or tester  # noqa: E501

        :return: The display_name of this Destination.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Destination.

        Display name for the group or tester  # noqa: E501

        :param display_name: The display_name of this Destination.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Destination, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Destination):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
