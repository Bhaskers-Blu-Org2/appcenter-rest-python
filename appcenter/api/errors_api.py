# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from appcenter.api_client import ApiClient


class ErrorsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def errors_available_versions(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_available_versions  # noqa: E501

        Get all available versions in the time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_available_versions(start, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start: Start date time in data in ISO 8601 date time format (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param datetime end: Last date time in data in ISO 8601 date time format
        :param int top: The maximum number of results to return. (0 will fetch all results till the max number.)
        :param int skip: The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
        :param str filter: A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering.
        :param str inlinecount: Controls whether or not to include a count of all the items across all pages.
        :param str error_type: Type of error (handled vs unhandled), including All
        :return: AvailableVersionsDiagnostics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_available_versions_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_available_versions_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_available_versions_with_http_info(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_available_versions  # noqa: E501

        Get all available versions in the time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_available_versions_with_http_info(start, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start: Start date time in data in ISO 8601 date time format (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param datetime end: Last date time in data in ISO 8601 date time format
        :param int top: The maximum number of results to return. (0 will fetch all results till the max number.)
        :param int skip: The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
        :param str filter: A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering.
        :param str inlinecount: Controls whether or not to include a count of all the items across all pages.
        :param str error_type: Type of error (handled vs unhandled), including All
        :return: AvailableVersionsDiagnostics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'owner_name', 'app_name', 'end', 'top', 'skip', 'filter', 'inlinecount', 'error_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_available_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `errors_available_versions`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_available_versions`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_available_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'inlinecount' in params:
            query_params.append(('$inlinecount', params['inlinecount']))  # noqa: E501
        if 'error_type' in params:
            query_params.append(('errorType', params['error_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/available_versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AvailableVersionsDiagnostics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_counts_per_day(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_counts_per_day  # noqa: E501

        Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_counts_per_day(start, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start: Start date time in data in ISO 8601 date time format (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str version:
        :param datetime end: Last date time in data in ISO 8601 date time format
        :param str app_build: app build
        :param str error_type: Type of error (handled vs unhandled), excluding All
        :return: ErrorCounts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_counts_per_day_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_counts_per_day_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_counts_per_day_with_http_info(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_counts_per_day  # noqa: E501

        Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_counts_per_day_with_http_info(start, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start: Start date time in data in ISO 8601 date time format (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str version:
        :param datetime end: Last date time in data in ISO 8601 date time format
        :param str app_build: app build
        :param str error_type: Type of error (handled vs unhandled), excluding All
        :return: ErrorCounts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'owner_name', 'app_name', 'version', 'end', 'app_build', 'error_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_counts_per_day" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `errors_counts_per_day`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_counts_per_day`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_counts_per_day`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'app_build' in params:
            query_params.append(('app_build', params['app_build']))  # noqa: E501
        if 'error_type' in params:
            query_params.append(('errorType', params['error_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorCounts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_delete_error(self, error_group_id, error_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_delete_error  # noqa: E501

        Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_delete_error(error_group_id, error_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str error_id: The id of the error (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorDeleteCounter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_delete_error_with_http_info(error_group_id, error_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_delete_error_with_http_info(error_group_id, error_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_delete_error_with_http_info(self, error_group_id, error_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_delete_error  # noqa: E501

        Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_delete_error_with_http_info(error_group_id, error_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str error_id: The id of the error (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorDeleteCounter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_group_id', 'error_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_delete_error" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_group_id' is set
        if ('error_group_id' not in params or
                params['error_group_id'] is None):
            raise ValueError("Missing the required parameter `error_group_id` when calling `errors_delete_error`")  # noqa: E501
        # verify the required parameter 'error_id' is set
        if ('error_id' not in params or
                params['error_id'] is None):
            raise ValueError("Missing the required parameter `error_id` when calling `errors_delete_error`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_delete_error`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_delete_error`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_group_id' in params:
            path_params['errorGroupId'] = params['error_group_id']  # noqa: E501
        if 'error_id' in params:
            path_params['errorId'] = params['error_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorDeleteCounter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_error_attachment_location(self, error_id, attachment_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_attachment_location  # noqa: E501

        Error attachment location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_attachment_location(error_id, attachment_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_id: The id of the error (required)
        :param str attachment_id: Error attachment id. (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorAttachmentLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_error_attachment_location_with_http_info(error_id, attachment_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_error_attachment_location_with_http_info(error_id, attachment_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_error_attachment_location_with_http_info(self, error_id, attachment_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_attachment_location  # noqa: E501

        Error attachment location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_attachment_location_with_http_info(error_id, attachment_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_id: The id of the error (required)
        :param str attachment_id: Error attachment id. (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorAttachmentLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_id', 'attachment_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_error_attachment_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_id' is set
        if ('error_id' not in params or
                params['error_id'] is None):
            raise ValueError("Missing the required parameter `error_id` when calling `errors_error_attachment_location`")  # noqa: E501
        # verify the required parameter 'attachment_id' is set
        if ('attachment_id' not in params or
                params['attachment_id'] is None):
            raise ValueError("Missing the required parameter `attachment_id` when calling `errors_error_attachment_location`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_error_attachment_location`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_error_attachment_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_id' in params:
            path_params['errorId'] = params['error_id']  # noqa: E501
        if 'attachment_id' in params:
            path_params['attachmentId'] = params['attachment_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorAttachmentLocation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_error_attachment_text(self, error_id, attachment_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_attachment_text  # noqa: E501

        Error attachment text.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_attachment_text(error_id, attachment_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_id: The id of the error (required)
        :param str attachment_id: Error attachment id. (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorAttachmentText
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_error_attachment_text_with_http_info(error_id, attachment_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_error_attachment_text_with_http_info(error_id, attachment_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_error_attachment_text_with_http_info(self, error_id, attachment_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_attachment_text  # noqa: E501

        Error attachment text.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_attachment_text_with_http_info(error_id, attachment_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_id: The id of the error (required)
        :param str attachment_id: Error attachment id. (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorAttachmentText
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_id', 'attachment_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_error_attachment_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_id' is set
        if ('error_id' not in params or
                params['error_id'] is None):
            raise ValueError("Missing the required parameter `error_id` when calling `errors_error_attachment_text`")  # noqa: E501
        # verify the required parameter 'attachment_id' is set
        if ('attachment_id' not in params or
                params['attachment_id'] is None):
            raise ValueError("Missing the required parameter `attachment_id` when calling `errors_error_attachment_text`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_error_attachment_text`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_error_attachment_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_id' in params:
            path_params['errorId'] = params['error_id']  # noqa: E501
        if 'attachment_id' in params:
            path_params['attachmentId'] = params['attachment_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorAttachmentText',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_error_attachments(self, error_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_attachments  # noqa: E501

        List error attachments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_attachments(error_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_id: The id of the error (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorAttachments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_error_attachments_with_http_info(error_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_error_attachments_with_http_info(error_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_error_attachments_with_http_info(self, error_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_attachments  # noqa: E501

        List error attachments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_attachments_with_http_info(error_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_id: The id of the error (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorAttachments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_error_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_id' is set
        if ('error_id' not in params or
                params['error_id'] is None):
            raise ValueError("Missing the required parameter `error_id` when calling `errors_error_attachments`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_error_attachments`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_error_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_id' in params:
            path_params['errorId'] = params['error_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorAttachments',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_error_download(self, error_group_id, error_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_download  # noqa: E501

        Download details for a specific error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_download(error_group_id, error_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str error_id: The id of the error (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str format: the format of the crash log
        :return: ErrorDownload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_error_download_with_http_info(error_group_id, error_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_error_download_with_http_info(error_group_id, error_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_error_download_with_http_info(self, error_group_id, error_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_download  # noqa: E501

        Download details for a specific error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_download_with_http_info(error_group_id, error_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str error_id: The id of the error (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str format: the format of the crash log
        :return: ErrorDownload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_group_id', 'error_id', 'owner_name', 'app_name', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_error_download" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_group_id' is set
        if ('error_group_id' not in params or
                params['error_group_id'] is None):
            raise ValueError("Missing the required parameter `error_group_id` when calling `errors_error_download`")  # noqa: E501
        # verify the required parameter 'error_id' is set
        if ('error_id' not in params or
                params['error_id'] is None):
            raise ValueError("Missing the required parameter `error_id` when calling `errors_error_download`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_error_download`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_error_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_group_id' in params:
            path_params['errorGroupId'] = params['error_group_id']  # noqa: E501
        if 'error_id' in params:
            path_params['errorId'] = params['error_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorDownload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_error_free_device_percentages(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_free_device_percentages  # noqa: E501

        Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_free_device_percentages(start, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start: Start date time in data in ISO 8601 date time format (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param datetime end: Last date time in data in ISO 8601 date time format
        :param list[str] versions:
        :param str app_build: app build
        :param str error_type: Type of error (handled vs unhandled), excluding All
        :return: ErrorFreeDevicePercentages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_error_free_device_percentages_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_error_free_device_percentages_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_error_free_device_percentages_with_http_info(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_free_device_percentages  # noqa: E501

        Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_free_device_percentages_with_http_info(start, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start: Start date time in data in ISO 8601 date time format (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param datetime end: Last date time in data in ISO 8601 date time format
        :param list[str] versions:
        :param str app_build: app build
        :param str error_type: Type of error (handled vs unhandled), excluding All
        :return: ErrorFreeDevicePercentages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'owner_name', 'app_name', 'end', 'versions', 'app_build', 'error_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_error_free_device_percentages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `errors_error_free_device_percentages`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_error_free_device_percentages`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_error_free_device_percentages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501
            collection_formats['versions'] = 'multi'  # noqa: E501
        if 'app_build' in params:
            query_params.append(('app_build', params['app_build']))  # noqa: E501
        if 'error_type' in params:
            query_params.append(('errorType', params['error_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorfreeDevicePercentages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorFreeDevicePercentages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_error_groups_search(self, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_groups_search  # noqa: E501

        Error groups list based on search parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_groups_search(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str filter: A filter as specified in OData notation
        :param str q: A query string
        :param str order: It controls the order of sorting
        :param str sort: It controls the sort based on specified field
        :param int top: The maximum number of results to return
        :param int skip: The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
        :return: ErrorGroupsSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_error_groups_search_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_error_groups_search_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_error_groups_search_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_groups_search  # noqa: E501

        Error groups list based on search parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_groups_search_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str filter: A filter as specified in OData notation
        :param str q: A query string
        :param str order: It controls the order of sorting
        :param str sort: It controls the sort based on specified field
        :param int top: The maximum number of results to return
        :param int skip: The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
        :return: ErrorGroupsSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'filter', 'q', 'order', 'sort', 'top', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_error_groups_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_error_groups_search`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_error_groups_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorGroupsSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_error_location(self, error_group_id, error_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_location  # noqa: E501

        Error location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_location(error_group_id, error_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str error_id: The id of the error (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_error_location_with_http_info(error_group_id, error_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_error_location_with_http_info(error_group_id, error_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_error_location_with_http_info(self, error_group_id, error_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_location  # noqa: E501

        Error location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_location_with_http_info(error_group_id, error_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str error_id: The id of the error (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_group_id', 'error_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_error_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_group_id' is set
        if ('error_group_id' not in params or
                params['error_group_id'] is None):
            raise ValueError("Missing the required parameter `error_group_id` when calling `errors_error_location`")  # noqa: E501
        # verify the required parameter 'error_id' is set
        if ('error_id' not in params or
                params['error_id'] is None):
            raise ValueError("Missing the required parameter `error_id` when calling `errors_error_location`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_error_location`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_error_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_group_id' in params:
            path_params['errorGroupId'] = params['error_group_id']  # noqa: E501
        if 'error_id' in params:
            path_params['errorId'] = params['error_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorLocation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_error_search(self, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_search  # noqa: E501

        Errors list based on search parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_search(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str filter: A filter as specified in OData notation
        :param str q: A query string
        :param str order: It controls the order of sorting
        :param str sort: It controls the sort based on specified field
        :param int top: The maximum number of results to return
        :param int skip: The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
        :return: ErrorsSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_error_search_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_error_search_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_error_search_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_search  # noqa: E501

        Errors list based on search parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_search_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str filter: A filter as specified in OData notation
        :param str q: A query string
        :param str order: It controls the order of sorting
        :param str sort: It controls the sort based on specified field
        :param int top: The maximum number of results to return
        :param int skip: The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
        :return: ErrorsSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'filter', 'q', 'order', 'sort', 'top', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_error_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_error_search`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_error_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorsSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_error_stack_trace(self, error_group_id, error_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_stack_trace  # noqa: E501

        Error Stacktrace details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_stack_trace(error_group_id, error_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str error_id: The id of the error (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DiagnosticsStackTrace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_error_stack_trace_with_http_info(error_group_id, error_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_error_stack_trace_with_http_info(error_group_id, error_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_error_stack_trace_with_http_info(self, error_group_id, error_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_error_stack_trace  # noqa: E501

        Error Stacktrace details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_error_stack_trace_with_http_info(error_group_id, error_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str error_id: The id of the error (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DiagnosticsStackTrace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_group_id', 'error_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_error_stack_trace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_group_id' is set
        if ('error_group_id' not in params or
                params['error_group_id'] is None):
            raise ValueError("Missing the required parameter `error_group_id` when calling `errors_error_stack_trace`")  # noqa: E501
        # verify the required parameter 'error_id' is set
        if ('error_id' not in params or
                params['error_id'] is None):
            raise ValueError("Missing the required parameter `error_id` when calling `errors_error_stack_trace`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_error_stack_trace`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_error_stack_trace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_group_id' in params:
            path_params['errorGroupId'] = params['error_group_id']  # noqa: E501
        if 'error_id' in params:
            path_params['errorId'] = params['error_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DiagnosticsStackTrace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_get_error_details(self, error_group_id, error_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_get_error_details  # noqa: E501

        Error details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_get_error_details(error_group_id, error_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str error_id: The id of the error (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: HandledErrorDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_get_error_details_with_http_info(error_group_id, error_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_get_error_details_with_http_info(error_group_id, error_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_get_error_details_with_http_info(self, error_group_id, error_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_get_error_details  # noqa: E501

        Error details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_get_error_details_with_http_info(error_group_id, error_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str error_id: The id of the error (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: HandledErrorDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_group_id', 'error_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_get_error_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_group_id' is set
        if ('error_group_id' not in params or
                params['error_group_id'] is None):
            raise ValueError("Missing the required parameter `error_group_id` when calling `errors_get_error_details`")  # noqa: E501
        # verify the required parameter 'error_id' is set
        if ('error_id' not in params or
                params['error_id'] is None):
            raise ValueError("Missing the required parameter `error_id` when calling `errors_get_error_details`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_get_error_details`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_get_error_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_group_id' in params:
            path_params['errorGroupId'] = params['error_group_id']  # noqa: E501
        if 'error_id' in params:
            path_params['errorId'] = params['error_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HandledErrorDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_get_retention_settings(self, owner_name, app_name, **kwargs):  # noqa: E501
        """gets the retention settings in days  # noqa: E501

        gets the retention settings in days  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_get_retention_settings(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorRetentionSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_get_retention_settings_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_get_retention_settings_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_get_retention_settings_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """gets the retention settings in days  # noqa: E501

        gets the retention settings in days  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_get_retention_settings_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorRetentionSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_get_retention_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_get_retention_settings`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_get_retention_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorRetentionSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_group_counts_per_day(self, error_group_id, start, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_group_counts_per_day  # noqa: E501

        Count of errors by day in the time range of the selected error group with selected version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_group_counts_per_day(error_group_id, start, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param datetime start: Start date time in data in ISO 8601 date time format (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str version:
        :param datetime end: Last date time in data in ISO 8601 date time format
        :return: ErrorCounts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_group_counts_per_day_with_http_info(error_group_id, start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_group_counts_per_day_with_http_info(error_group_id, start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_group_counts_per_day_with_http_info(self, error_group_id, start, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_group_counts_per_day  # noqa: E501

        Count of errors by day in the time range of the selected error group with selected version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_group_counts_per_day_with_http_info(error_group_id, start, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param datetime start: Start date time in data in ISO 8601 date time format (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str version:
        :param datetime end: Last date time in data in ISO 8601 date time format
        :return: ErrorCounts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_group_id', 'start', 'owner_name', 'app_name', 'version', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_group_counts_per_day" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_group_id' is set
        if ('error_group_id' not in params or
                params['error_group_id'] is None):
            raise ValueError("Missing the required parameter `error_group_id` when calling `errors_group_counts_per_day`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `errors_group_counts_per_day`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_group_counts_per_day`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_group_counts_per_day`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_group_id' in params:
            path_params['errorGroupId'] = params['error_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorCounts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_group_details(self, error_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_group_details  # noqa: E501

        Error group details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_group_details(error_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_group_details_with_http_info(error_group_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_group_details_with_http_info(error_group_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_group_details_with_http_info(self, error_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_group_details  # noqa: E501

        Error group details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_group_details_with_http_info(error_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_group_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_group_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_group_id' is set
        if ('error_group_id' not in params or
                params['error_group_id'] is None):
            raise ValueError("Missing the required parameter `error_group_id` when calling `errors_group_details`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_group_details`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_group_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_group_id' in params:
            path_params['errorGroupId'] = params['error_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_group_error_free_device_percentages(self, error_group_id, start, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_group_error_free_device_percentages  # noqa: E501

        Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_group_error_free_device_percentages(error_group_id, start, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param datetime start: Start date time in data in ISO 8601 date time format (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param datetime end: Last date time in data in ISO 8601 date time format
        :return: ErrorFreeDevicePercentages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_group_error_free_device_percentages_with_http_info(error_group_id, start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_group_error_free_device_percentages_with_http_info(error_group_id, start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_group_error_free_device_percentages_with_http_info(self, error_group_id, start, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_group_error_free_device_percentages  # noqa: E501

        Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_group_error_free_device_percentages_with_http_info(error_group_id, start, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param datetime start: Start date time in data in ISO 8601 date time format (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param datetime end: Last date time in data in ISO 8601 date time format
        :return: ErrorFreeDevicePercentages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_group_id', 'start', 'owner_name', 'app_name', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_group_error_free_device_percentages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_group_id' is set
        if ('error_group_id' not in params or
                params['error_group_id'] is None):
            raise ValueError("Missing the required parameter `error_group_id` when calling `errors_group_error_free_device_percentages`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `errors_group_error_free_device_percentages`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_group_error_free_device_percentages`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_group_error_free_device_percentages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_group_id' in params:
            path_params['errorGroupId'] = params['error_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorFreeDevicePercentages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_group_error_stack_trace(self, error_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_group_error_stack_trace  # noqa: E501

        Gets the stack trace for the error group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_group_error_stack_trace(error_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DiagnosticsStackTrace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_group_error_stack_trace_with_http_info(error_group_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_group_error_stack_trace_with_http_info(error_group_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_group_error_stack_trace_with_http_info(self, error_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_group_error_stack_trace  # noqa: E501

        Gets the stack trace for the error group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_group_error_stack_trace_with_http_info(error_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DiagnosticsStackTrace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_group_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_group_error_stack_trace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_group_id' is set
        if ('error_group_id' not in params or
                params['error_group_id'] is None):
            raise ValueError("Missing the required parameter `error_group_id` when calling `errors_group_error_stack_trace`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_group_error_stack_trace`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_group_error_stack_trace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_group_id' in params:
            path_params['errorGroupId'] = params['error_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DiagnosticsStackTrace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_group_list(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_group_list  # noqa: E501

        List of error groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_group_list(start, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start: Start date time in data in ISO 8601 date time format (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str version:
        :param str app_build: app build
        :param str group_state:
        :param datetime end: Last date time in data in ISO 8601 date time format
        :param str orderby: controls the sorting order and sorting based on which column
        :param int top: The maximum number of results to return. (0 will fetch all results till the max number.)
        :param str error_type: Type of error (handled vs unhandled), including All
        :return: ErrorGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_group_list_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_group_list_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_group_list_with_http_info(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_group_list  # noqa: E501

        List of error groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_group_list_with_http_info(start, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start: Start date time in data in ISO 8601 date time format (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str version:
        :param str app_build: app build
        :param str group_state:
        :param datetime end: Last date time in data in ISO 8601 date time format
        :param str orderby: controls the sorting order and sorting based on which column
        :param int top: The maximum number of results to return. (0 will fetch all results till the max number.)
        :param str error_type: Type of error (handled vs unhandled), including All
        :return: ErrorGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'owner_name', 'app_name', 'version', 'app_build', 'group_state', 'end', 'orderby', 'top', 'error_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_group_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `errors_group_list`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_group_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_group_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'app_build' in params:
            query_params.append(('app_build', params['app_build']))  # noqa: E501
        if 'group_state' in params:
            query_params.append(('groupState', params['group_state']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('$orderby', params['orderby']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501
        if 'error_type' in params:
            query_params.append(('errorType', params['error_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorGroups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_group_model_counts(self, error_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_group_model_counts  # noqa: E501

        Top models of the selected error group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_group_model_counts(error_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param int top: The maximum number of results to return. (0 will fetch all results till the max number.)
        :return: ErrorGroupModels
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_group_model_counts_with_http_info(error_group_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_group_model_counts_with_http_info(error_group_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_group_model_counts_with_http_info(self, error_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_group_model_counts  # noqa: E501

        Top models of the selected error group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_group_model_counts_with_http_info(error_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param int top: The maximum number of results to return. (0 will fetch all results till the max number.)
        :return: ErrorGroupModels
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_group_id', 'owner_name', 'app_name', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_group_model_counts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_group_id' is set
        if ('error_group_id' not in params or
                params['error_group_id'] is None):
            raise ValueError("Missing the required parameter `error_group_id` when calling `errors_group_model_counts`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_group_model_counts`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_group_model_counts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_group_id' in params:
            path_params['errorGroupId'] = params['error_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorGroupModels',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_group_operating_system_counts(self, error_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_group_operating_system_counts  # noqa: E501

        Top OSes of the selected error group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_group_operating_system_counts(error_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param int top: The maximum number of results to return. (0 will fetch all results till the max number.)
        :return: ErrorGroupOperatingSystems
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_group_operating_system_counts_with_http_info(error_group_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_group_operating_system_counts_with_http_info(error_group_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_group_operating_system_counts_with_http_info(self, error_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_group_operating_system_counts  # noqa: E501

        Top OSes of the selected error group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_group_operating_system_counts_with_http_info(error_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param int top: The maximum number of results to return. (0 will fetch all results till the max number.)
        :return: ErrorGroupOperatingSystems
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_group_id', 'owner_name', 'app_name', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_group_operating_system_counts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_group_id' is set
        if ('error_group_id' not in params or
                params['error_group_id'] is None):
            raise ValueError("Missing the required parameter `error_group_id` when calling `errors_group_operating_system_counts`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_group_operating_system_counts`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_group_operating_system_counts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_group_id' in params:
            path_params['errorGroupId'] = params['error_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorGroupOperatingSystems',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_latest_error_details(self, error_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_latest_error_details  # noqa: E501

        Latest error details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_latest_error_details(error_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: HandledErrorDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_latest_error_details_with_http_info(error_group_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_latest_error_details_with_http_info(error_group_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_latest_error_details_with_http_info(self, error_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_latest_error_details  # noqa: E501

        Latest error details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_latest_error_details_with_http_info(error_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: HandledErrorDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_group_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_latest_error_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_group_id' is set
        if ('error_group_id' not in params or
                params['error_group_id'] is None):
            raise ValueError("Missing the required parameter `error_group_id` when calling `errors_latest_error_details`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_latest_error_details`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_latest_error_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_group_id' in params:
            path_params['errorGroupId'] = params['error_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HandledErrorDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_list_for_group(self, error_group_id, start, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_list_for_group  # noqa: E501

        Get all errors for group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_list_for_group(error_group_id, start, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param datetime start: Start date time in data in ISO 8601 date time format (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param datetime end: Last date time in data in ISO 8601 date time format
        :param str model:
        :param str os:
        :return: HandledErrors
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_list_for_group_with_http_info(error_group_id, start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_list_for_group_with_http_info(error_group_id, start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_list_for_group_with_http_info(self, error_group_id, start, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_list_for_group  # noqa: E501

        Get all errors for group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_list_for_group_with_http_info(error_group_id, start, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_group_id: The id of the error group (required)
        :param datetime start: Start date time in data in ISO 8601 date time format (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param datetime end: Last date time in data in ISO 8601 date time format
        :param str model:
        :param str os:
        :return: HandledErrors
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_group_id', 'start', 'owner_name', 'app_name', 'end', 'model', 'os']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_list_for_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_group_id' is set
        if ('error_group_id' not in params or
                params['error_group_id'] is None):
            raise ValueError("Missing the required parameter `error_group_id` when calling `errors_list_for_group`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `errors_list_for_group`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_list_for_group`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_list_for_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_group_id' in params:
            path_params['errorGroupId'] = params['error_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
        if 'os' in params:
            query_params.append(('os', params['os']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HandledErrors',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_list_session_logs(self, error_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_list_session_logs  # noqa: E501

        Get session logs by error ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_list_session_logs(error_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_id: The id of the error (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param datetime _date: Date of data requested
        :return: GenericLogContainerDiagnostics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_list_session_logs_with_http_info(error_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_list_session_logs_with_http_info(error_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_list_session_logs_with_http_info(self, error_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_list_session_logs  # noqa: E501

        Get session logs by error ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_list_session_logs_with_http_info(error_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_id: The id of the error (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param datetime _date: Date of data requested
        :return: GenericLogContainerDiagnostics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_id', 'owner_name', 'app_name', '_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_list_session_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_id' is set
        if ('error_id' not in params or
                params['error_id'] is None):
            raise ValueError("Missing the required parameter `error_id` when calling `errors_list_session_logs`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_list_session_logs`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_list_session_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_id' in params:
            path_params['errorId'] = params['error_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericLogContainerDiagnostics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_put_retention_settings(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """Creates and updates the retention settings in days  # noqa: E501

        Creates and updates the retention settings in days  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_put_retention_settings(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ErrorRetentionSettings body: The amount of days to keep the crashes for this application. retention_in_days is an enum value, can only be 28 or 90. (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorRetentionSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_put_retention_settings_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_put_retention_settings_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_put_retention_settings_with_http_info(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """Creates and updates the retention settings in days  # noqa: E501

        Creates and updates the retention settings in days  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_put_retention_settings_with_http_info(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ErrorRetentionSettings body: The amount of days to keep the crashes for this application. retention_in_days is an enum value, can only be 28 or 90. (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorRetentionSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_put_retention_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `errors_put_retention_settings`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_put_retention_settings`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_put_retention_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorRetentionSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def errors_update_state(self, body, error_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_update_state  # noqa: E501

        Update error group state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_update_state(body, error_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ErrorGroupState body: The state of the error group (required)
        :param str error_group_id: The id of the error group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.errors_update_state_with_http_info(body, error_group_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.errors_update_state_with_http_info(body, error_group_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def errors_update_state_with_http_info(self, body, error_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """errors_update_state  # noqa: E501

        Update error group state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.errors_update_state_with_http_info(body, error_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ErrorGroupState body: The state of the error group (required)
        :param str error_group_id: The id of the error group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ErrorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'error_group_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method errors_update_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `errors_update_state`")  # noqa: E501
        # verify the required parameter 'error_group_id' is set
        if ('error_group_id' not in params or
                params['error_group_id'] is None):
            raise ValueError("Missing the required parameter `error_group_id` when calling `errors_update_state`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `errors_update_state`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `errors_update_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'error_group_id' in params:
            path_params['errorGroupId'] = params['error_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
