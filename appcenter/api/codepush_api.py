# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from appcenter.api_client import ApiClient


class CodepushApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def code_push_acquisition_get_acquisition_status(self, **kwargs):  # noqa: E501
        """code_push_acquisition_get_acquisition_status  # noqa: E501

        Returns the acquisition service status to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_acquisition_get_acquisition_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AcquisitionStatusSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.code_push_acquisition_get_acquisition_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.code_push_acquisition_get_acquisition_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def code_push_acquisition_get_acquisition_status_with_http_info(self, **kwargs):  # noqa: E501
        """code_push_acquisition_get_acquisition_status  # noqa: E501

        Returns the acquisition service status to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_acquisition_get_acquisition_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AcquisitionStatusSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_push_acquisition_get_acquisition_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/public/codepush/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AcquisitionStatusSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def code_push_acquisition_update_check(self, deployment_key, app_version, **kwargs):  # noqa: E501
        """code_push_acquisition_update_check  # noqa: E501

        Check for updates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_acquisition_update_check(deployment_key, app_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_key: (required)
        :param str app_version: (required)
        :param str package_hash:
        :param str label:
        :param str client_unique_id:
        :param bool is_companion:
        :param str previous_label_or_app_version:
        :param str previous_deployment_key:
        :return: UpdateCheckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.code_push_acquisition_update_check_with_http_info(deployment_key, app_version, **kwargs)  # noqa: E501
        else:
            (data) = self.code_push_acquisition_update_check_with_http_info(deployment_key, app_version, **kwargs)  # noqa: E501
            return data

    def code_push_acquisition_update_check_with_http_info(self, deployment_key, app_version, **kwargs):  # noqa: E501
        """code_push_acquisition_update_check  # noqa: E501

        Check for updates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_acquisition_update_check_with_http_info(deployment_key, app_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_key: (required)
        :param str app_version: (required)
        :param str package_hash:
        :param str label:
        :param str client_unique_id:
        :param bool is_companion:
        :param str previous_label_or_app_version:
        :param str previous_deployment_key:
        :return: UpdateCheckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_key', 'app_version', 'package_hash', 'label', 'client_unique_id', 'is_companion', 'previous_label_or_app_version', 'previous_deployment_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_push_acquisition_update_check" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_key' is set
        if ('deployment_key' not in params or
                params['deployment_key'] is None):
            raise ValueError("Missing the required parameter `deployment_key` when calling `code_push_acquisition_update_check`")  # noqa: E501
        # verify the required parameter 'app_version' is set
        if ('app_version' not in params or
                params['app_version'] is None):
            raise ValueError("Missing the required parameter `app_version` when calling `code_push_acquisition_update_check`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'deployment_key' in params:
            query_params.append(('deployment_key', params['deployment_key']))  # noqa: E501
        if 'app_version' in params:
            query_params.append(('app_version', params['app_version']))  # noqa: E501
        if 'package_hash' in params:
            query_params.append(('package_hash', params['package_hash']))  # noqa: E501
        if 'label' in params:
            query_params.append(('label', params['label']))  # noqa: E501
        if 'client_unique_id' in params:
            query_params.append(('client_unique_id', params['client_unique_id']))  # noqa: E501
        if 'is_companion' in params:
            query_params.append(('is_companion', params['is_companion']))  # noqa: E501
        if 'previous_label_or_app_version' in params:
            query_params.append(('previous_label_or_app_version', params['previous_label_or_app_version']))  # noqa: E501
        if 'previous_deployment_key' in params:
            query_params.append(('previous_deployment_key', params['previous_deployment_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/public/codepush/update_check', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateCheckResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def code_push_acquisition_update_deploy_status(self, body, **kwargs):  # noqa: E501
        """code_push_acquisition_update_deploy_status  # noqa: E501

        Report Deployment status metric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_acquisition_update_deploy_status(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CodePushStatusMetricMetadata body: Deployment status metric properties (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.code_push_acquisition_update_deploy_status_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.code_push_acquisition_update_deploy_status_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def code_push_acquisition_update_deploy_status_with_http_info(self, body, **kwargs):  # noqa: E501
        """code_push_acquisition_update_deploy_status  # noqa: E501

        Report Deployment status metric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_acquisition_update_deploy_status_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CodePushStatusMetricMetadata body: Deployment status metric properties (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_push_acquisition_update_deploy_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `code_push_acquisition_update_deploy_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/public/codepush/report_status/deploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def code_push_acquisition_update_download_status(self, body, **kwargs):  # noqa: E501
        """code_push_acquisition_update_download_status  # noqa: E501

        Report download of specified release  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_acquisition_update_download_status(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CodePushStatusMetricMetadata body: Deployment status metric properties (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.code_push_acquisition_update_download_status_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.code_push_acquisition_update_download_status_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def code_push_acquisition_update_download_status_with_http_info(self, body, **kwargs):  # noqa: E501
        """code_push_acquisition_update_download_status  # noqa: E501

        Report download of specified release  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_acquisition_update_download_status_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CodePushStatusMetricMetadata body: Deployment status metric properties (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_push_acquisition_update_download_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `code_push_acquisition_update_download_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/public/codepush/report_status/download', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def code_push_deployment_metrics_get(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployment_metrics_get  # noqa: E501

        Gets all releases metrics for specified Deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployment_metrics_get(deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[CodePushReleaseMetric]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.code_push_deployment_metrics_get_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.code_push_deployment_metrics_get_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def code_push_deployment_metrics_get_with_http_info(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployment_metrics_get  # noqa: E501

        Gets all releases metrics for specified Deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployment_metrics_get_with_http_info(deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[CodePushReleaseMetric]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_push_deployment_metrics_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `code_push_deployment_metrics_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `code_push_deployment_metrics_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `code_push_deployment_metrics_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CodePushReleaseMetric]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def code_push_deployment_release_rollback(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployment_release_rollback  # noqa: E501

        Rollback the latest or a specific release for an app deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployment_release_rollback(deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param CodePushReleaseLabel body: The specific release label that you want to rollback to
        :return: CodePushRelease
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.code_push_deployment_release_rollback_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.code_push_deployment_release_rollback_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def code_push_deployment_release_rollback_with_http_info(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployment_release_rollback  # noqa: E501

        Rollback the latest or a specific release for an app deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployment_release_rollback_with_http_info(deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param CodePushReleaseLabel body: The specific release label that you want to rollback to
        :return: CodePushRelease
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_push_deployment_release_rollback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `code_push_deployment_release_rollback`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `code_push_deployment_release_rollback`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `code_push_deployment_release_rollback`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/rollback_release', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodePushRelease',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def code_push_deployment_releases_create(self, body, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployment_releases_create  # noqa: E501

        Create a new CodePush release for the specified deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployment_releases_create(body, deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CodePushUploadedRelease body: The necessary information required to download the bundle and being the release process. (required)
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: CodePushRelease
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.code_push_deployment_releases_create_with_http_info(body, deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.code_push_deployment_releases_create_with_http_info(body, deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def code_push_deployment_releases_create_with_http_info(self, body, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployment_releases_create  # noqa: E501

        Create a new CodePush release for the specified deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployment_releases_create_with_http_info(body, deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CodePushUploadedRelease body: The necessary information required to download the bundle and being the release process. (required)
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: CodePushRelease
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'deployment_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_push_deployment_releases_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `code_push_deployment_releases_create`")  # noqa: E501
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `code_push_deployment_releases_create`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `code_push_deployment_releases_create`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `code_push_deployment_releases_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodePushRelease',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def code_push_deployment_releases_delete(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployment_releases_delete  # noqa: E501

        Clears a Deployment of releases  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployment_releases_delete(deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.code_push_deployment_releases_delete_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.code_push_deployment_releases_delete_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def code_push_deployment_releases_delete_with_http_info(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployment_releases_delete  # noqa: E501

        Clears a Deployment of releases  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployment_releases_delete_with_http_info(deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_push_deployment_releases_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `code_push_deployment_releases_delete`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `code_push_deployment_releases_delete`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `code_push_deployment_releases_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def code_push_deployment_releases_get(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployment_releases_get  # noqa: E501

        Gets the history of releases on a Deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployment_releases_get(deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[CodePushRelease]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.code_push_deployment_releases_get_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.code_push_deployment_releases_get_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def code_push_deployment_releases_get_with_http_info(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployment_releases_get  # noqa: E501

        Gets the history of releases on a Deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployment_releases_get_with_http_info(deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[CodePushRelease]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_push_deployment_releases_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `code_push_deployment_releases_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `code_push_deployment_releases_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `code_push_deployment_releases_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CodePushRelease]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def code_push_deployment_upload_create(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployment_upload_create  # noqa: E501

        Create a new CodePush release upload for the specified deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployment_upload_create(deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: CodePushReleaseUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.code_push_deployment_upload_create_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.code_push_deployment_upload_create_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def code_push_deployment_upload_create_with_http_info(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployment_upload_create  # noqa: E501

        Create a new CodePush release upload for the specified deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployment_upload_create_with_http_info(deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: CodePushReleaseUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_push_deployment_upload_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `code_push_deployment_upload_create`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `code_push_deployment_upload_create`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `code_push_deployment_upload_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/uploads', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodePushReleaseUpload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def code_push_deployments_create(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployments_create  # noqa: E501

        Creates a CodePush Deployment for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployments_create(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Deployment body: Deployment to be created (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.code_push_deployments_create_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.code_push_deployments_create_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def code_push_deployments_create_with_http_info(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployments_create  # noqa: E501

        Creates a CodePush Deployment for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployments_create_with_http_info(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Deployment body: Deployment to be created (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_push_deployments_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `code_push_deployments_create`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `code_push_deployments_create`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `code_push_deployments_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Deployment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def code_push_deployments_delete(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployments_delete  # noqa: E501

        Deletes a CodePush Deployment for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployments_delete(deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.code_push_deployments_delete_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.code_push_deployments_delete_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def code_push_deployments_delete_with_http_info(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployments_delete  # noqa: E501

        Deletes a CodePush Deployment for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployments_delete_with_http_info(deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_push_deployments_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `code_push_deployments_delete`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `code_push_deployments_delete`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `code_push_deployments_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def code_push_deployments_get(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployments_get  # noqa: E501

        Gets a CodePush Deployment for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployments_get(deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.code_push_deployments_get_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.code_push_deployments_get_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def code_push_deployments_get_with_http_info(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployments_get  # noqa: E501

        Gets a CodePush Deployment for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployments_get_with_http_info(deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_push_deployments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `code_push_deployments_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `code_push_deployments_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `code_push_deployments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Deployment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def code_push_deployments_list(self, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployments_list  # noqa: E501

        Gets a list of CodePush deployments for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployments_list(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[Deployment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.code_push_deployments_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.code_push_deployments_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def code_push_deployments_list_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployments_list  # noqa: E501

        Gets a list of CodePush deployments for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployments_list_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[Deployment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_push_deployments_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `code_push_deployments_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `code_push_deployments_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Deployment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def code_push_deployments_promote(self, deployment_name, promote_deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployments_promote  # noqa: E501

        Promote one release (default latest one) from one deployment to another  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployments_promote(deployment_name, promote_deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_name: deployment name (required)
        :param str promote_deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param CodePushReleasePromote body: Release to be promoted, only needs to provide optional fields, description, label, disabled, mandatory, rollout, targetBinaryVersion
        :return: CodePushRelease
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.code_push_deployments_promote_with_http_info(deployment_name, promote_deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.code_push_deployments_promote_with_http_info(deployment_name, promote_deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def code_push_deployments_promote_with_http_info(self, deployment_name, promote_deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployments_promote  # noqa: E501

        Promote one release (default latest one) from one deployment to another  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployments_promote_with_http_info(deployment_name, promote_deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deployment_name: deployment name (required)
        :param str promote_deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param CodePushReleasePromote body: Release to be promoted, only needs to provide optional fields, description, label, disabled, mandatory, rollout, targetBinaryVersion
        :return: CodePushRelease
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'promote_deployment_name', 'owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_push_deployments_promote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `code_push_deployments_promote`")  # noqa: E501
        # verify the required parameter 'promote_deployment_name' is set
        if ('promote_deployment_name' not in params or
                params['promote_deployment_name'] is None):
            raise ValueError("Missing the required parameter `promote_deployment_name` when calling `code_push_deployments_promote`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `code_push_deployments_promote`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `code_push_deployments_promote`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'promote_deployment_name' in params:
            path_params['promote_deployment_name'] = params['promote_deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodePushRelease',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def code_push_deployments_update(self, body, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployments_update  # noqa: E501

        Modifies a CodePush Deployment for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployments_update(body, deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeploymentModification body: Deployment modification. All fields are optional and only provided fields will get updated. (required)
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.code_push_deployments_update_with_http_info(body, deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.code_push_deployments_update_with_http_info(body, deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def code_push_deployments_update_with_http_info(self, body, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """code_push_deployments_update  # noqa: E501

        Modifies a CodePush Deployment for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.code_push_deployments_update_with_http_info(body, deployment_name, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeploymentModification body: Deployment modification. All fields are optional and only provided fields will get updated. (required)
        :param str deployment_name: deployment name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'deployment_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method code_push_deployments_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `code_push_deployments_update`")  # noqa: E501
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `code_push_deployments_update`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `code_push_deployments_update`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `code_push_deployments_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deployment_releases_update(self, body, deployment_name, release_label, owner_name, app_name, **kwargs):  # noqa: E501
        """deployment_releases_update  # noqa: E501

        Modifies a CodePush release metadata under the given Deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deployment_releases_update(body, deployment_name, release_label, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: Release modification. All fields are optional and only provided fields will get updated. (required)
        :param str deployment_name: deployment name (required)
        :param str release_label: release label (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: CodePushRelease
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deployment_releases_update_with_http_info(body, deployment_name, release_label, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.deployment_releases_update_with_http_info(body, deployment_name, release_label, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def deployment_releases_update_with_http_info(self, body, deployment_name, release_label, owner_name, app_name, **kwargs):  # noqa: E501
        """deployment_releases_update  # noqa: E501

        Modifies a CodePush release metadata under the given Deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deployment_releases_update_with_http_info(body, deployment_name, release_label, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: Release modification. All fields are optional and only provided fields will get updated. (required)
        :param str deployment_name: deployment name (required)
        :param str release_label: release label (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: CodePushRelease
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'deployment_name', 'release_label', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deployment_releases_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `deployment_releases_update`")  # noqa: E501
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `deployment_releases_update`")  # noqa: E501
        # verify the required parameter 'release_label' is set
        if ('release_label' not in params or
                params['release_label'] is None):
            raise ValueError("Missing the required parameter `release_label` when calling `deployment_releases_update`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `deployment_releases_update`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `deployment_releases_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'release_label' in params:
            path_params['release_label'] = params['release_label']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodePushRelease',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
