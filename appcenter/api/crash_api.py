# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from appcenter.api_client import ApiClient


class CrashApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def crash_groups_get(self, crash_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets a specific group. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crash_groups_get(crash_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: CrashGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crash_groups_get_with_http_info(crash_group_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crash_groups_get_with_http_info(crash_group_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crash_groups_get_with_http_info(self, crash_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets a specific group. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crash_groups_get_with_http_info(crash_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: CrashGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crash_groups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crash_groups_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crash_groups_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crash_groups_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CrashGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crash_groups_get_stacktrace(self, crash_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets a stacktrace for a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crash_groups_get_stacktrace(crash_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param bool grouping_only: true if the stacktrace should be only the relevant thread / exception. Default is false
        :return: Stacktrace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crash_groups_get_stacktrace_with_http_info(crash_group_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crash_groups_get_stacktrace_with_http_info(crash_group_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crash_groups_get_stacktrace_with_http_info(self, crash_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets a stacktrace for a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crash_groups_get_stacktrace_with_http_info(crash_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param bool grouping_only: true if the stacktrace should be only the relevant thread / exception. Default is false
        :return: Stacktrace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'owner_name', 'app_name', 'grouping_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crash_groups_get_stacktrace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crash_groups_get_stacktrace`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crash_groups_get_stacktrace`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crash_groups_get_stacktrace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'grouping_only' in params:
            query_params.append(('grouping_only', params['grouping_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Stacktrace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crash_groups_list(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets a list of crash groups and whether the list contains all available groups. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crash_groups_list(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param datetime last_occurrence_from: Earliest date when the last time a crash occured in a crash group
        :param datetime last_occurrence_to: Latest date when the last time a crash occured in a crash group
        :param str app_version: version
        :param str group_type:
        :param str group_status:
        :param str group_text_search: A freetext search that matches in crash, crash types, crash stack_traces and crash user
        :param str orderby: the OData-like $orderby argument
        :param str continuation_token: Cassandra request continuation token. The token is used for pagination.
        :return: CrashGroupsContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crash_groups_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crash_groups_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crash_groups_list_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets a list of crash groups and whether the list contains all available groups. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crash_groups_list_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param datetime last_occurrence_from: Earliest date when the last time a crash occured in a crash group
        :param datetime last_occurrence_to: Latest date when the last time a crash occured in a crash group
        :param str app_version: version
        :param str group_type:
        :param str group_status:
        :param str group_text_search: A freetext search that matches in crash, crash types, crash stack_traces and crash user
        :param str orderby: the OData-like $orderby argument
        :param str continuation_token: Cassandra request continuation token. The token is used for pagination.
        :return: CrashGroupsContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'last_occurrence_from', 'last_occurrence_to', 'app_version', 'group_type', 'group_status', 'group_text_search', 'orderby', 'continuation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crash_groups_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crash_groups_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crash_groups_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'last_occurrence_from' in params:
            query_params.append(('last_occurrence_from', params['last_occurrence_from']))  # noqa: E501
        if 'last_occurrence_to' in params:
            query_params.append(('last_occurrence_to', params['last_occurrence_to']))  # noqa: E501
        if 'app_version' in params:
            query_params.append(('app_version', params['app_version']))  # noqa: E501
        if 'group_type' in params:
            query_params.append(('group_type', params['group_type']))  # noqa: E501
        if 'group_status' in params:
            query_params.append(('group_status', params['group_status']))  # noqa: E501
        if 'group_text_search' in params:
            query_params.append(('group_text_search', params['group_text_search']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('$orderby', params['orderby']))  # noqa: E501
        if 'continuation_token' in params:
            query_params.append(('continuation_token', params['continuation_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CrashGroupsContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crash_groups_update(self, body, crash_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Updates a group. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crash_groups_update(body, crash_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrashGroupChange body: Group change object. All fields are optional and only provided fields will get updated. (required)
        :param str crash_group_id: id of a specific group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: CrashGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crash_groups_update_with_http_info(body, crash_group_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crash_groups_update_with_http_info(body, crash_group_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crash_groups_update_with_http_info(self, body, crash_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Updates a group. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crash_groups_update_with_http_info(body, crash_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrashGroupChange body: Group change object. All fields are optional and only provided fields will get updated. (required)
        :param str crash_group_id: id of a specific group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: CrashGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'crash_group_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crash_groups_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crash_groups_update`")  # noqa: E501
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crash_groups_update`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crash_groups_update`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crash_groups_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CrashGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_delete(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Delete a specific crash and related attachments and blobs for an app. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_delete(crash_group_id, crash_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str crash_id: id of a specific crash (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param bool retention_delete: true in that case if the method should skip update counts
        :return: CrashDeleteCounter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crashes_delete_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_delete_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_delete_with_http_info(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Delete a specific crash and related attachments and blobs for an app. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_delete_with_http_info(crash_group_id, crash_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str crash_id: id of a specific crash (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param bool retention_delete: true in that case if the method should skip update counts
        :return: CrashDeleteCounter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'crash_id', 'owner_name', 'app_name', 'retention_delete']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashes_delete`")  # noqa: E501
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_delete`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_delete`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'retention_delete' in params:
            query_params.append(('retention_delete', params['retention_delete']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CrashDeleteCounter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_get(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets a specific crash for an app. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get(crash_group_id, crash_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str crash_id: id of a specific crash (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param bool include_report: true if the crash should include the raw crash report. Default is false
        :param bool include_log: true if the crash should include the custom log report. Default is false
        :param bool include_details: true if the crash should include in depth crash details
        :param bool include_stacktrace: true if the crash should include the stacktrace information
        :param bool grouping_only: true if the stacktrace should be only the relevant thread / exception. Default is false
        :return: Crash
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crashes_get_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_get_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_get_with_http_info(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets a specific crash for an app. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_with_http_info(crash_group_id, crash_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str crash_id: id of a specific crash (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param bool include_report: true if the crash should include the raw crash report. Default is false
        :param bool include_log: true if the crash should include the custom log report. Default is false
        :param bool include_details: true if the crash should include in depth crash details
        :param bool include_stacktrace: true if the crash should include the stacktrace information
        :param bool grouping_only: true if the stacktrace should be only the relevant thread / exception. Default is false
        :return: Crash
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'crash_id', 'owner_name', 'app_name', 'include_report', 'include_log', 'include_details', 'include_stacktrace', 'grouping_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashes_get`")  # noqa: E501
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'include_report' in params:
            query_params.append(('include_report', params['include_report']))  # noqa: E501
        if 'include_log' in params:
            query_params.append(('include_log', params['include_log']))  # noqa: E501
        if 'include_details' in params:
            query_params.append(('include_details', params['include_details']))  # noqa: E501
        if 'include_stacktrace' in params:
            query_params.append(('include_stacktrace', params['include_stacktrace']))  # noqa: E501
        if 'grouping_only' in params:
            query_params.append(('grouping_only', params['grouping_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Crash',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_get_app_crashes_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets whether the application has any crashes. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_app_crashes_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: AppCrashesInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crashes_get_app_crashes_info_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_get_app_crashes_info_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_get_app_crashes_info_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets whether the application has any crashes. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_app_crashes_info_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: AppCrashesInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_get_app_crashes_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_get_app_crashes_info`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_get_app_crashes_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crashes_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppCrashesInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_get_app_versions(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets a list of application versions. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_app_versions(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[AppVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crashes_get_app_versions_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_get_app_versions_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_get_app_versions_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets a list of application versions. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_app_versions_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[AppVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_get_app_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_get_app_versions`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_get_app_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AppVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_get_crash_attachment_location(self, crash_id, attachment_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets the URI location to download crash attachment. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_crash_attachment_location(crash_id, attachment_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_id: id of a specific crash (required)
        :param str attachment_id: attachment id (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: CrashAttachmentLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crashes_get_crash_attachment_location_with_http_info(crash_id, attachment_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_get_crash_attachment_location_with_http_info(crash_id, attachment_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_get_crash_attachment_location_with_http_info(self, crash_id, attachment_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets the URI location to download crash attachment. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_crash_attachment_location_with_http_info(crash_id, attachment_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_id: id of a specific crash (required)
        :param str attachment_id: attachment id (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: CrashAttachmentLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_id', 'attachment_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_get_crash_attachment_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_get_crash_attachment_location`")  # noqa: E501
        # verify the required parameter 'attachment_id' is set
        if ('attachment_id' not in params or
                params['attachment_id'] is None):
            raise ValueError("Missing the required parameter `attachment_id` when calling `crashes_get_crash_attachment_location`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_get_crash_attachment_location`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_get_crash_attachment_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'attachment_id' in params:
            path_params['attachment_id'] = params['attachment_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/location', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CrashAttachmentLocation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_get_crash_text_attachment_content(self, crash_id, attachment_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets content of the text attachment. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_crash_text_attachment_content(crash_id, attachment_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_id: id of a specific crash (required)
        :param str attachment_id: attachment id (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crashes_get_crash_text_attachment_content_with_http_info(crash_id, attachment_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_get_crash_text_attachment_content_with_http_info(crash_id, attachment_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_get_crash_text_attachment_content_with_http_info(self, crash_id, attachment_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets content of the text attachment. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_crash_text_attachment_content_with_http_info(crash_id, attachment_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_id: id of a specific crash (required)
        :param str attachment_id: attachment id (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_id', 'attachment_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_get_crash_text_attachment_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_get_crash_text_attachment_content`")  # noqa: E501
        # verify the required parameter 'attachment_id' is set
        if ('attachment_id' not in params or
                params['attachment_id'] is None):
            raise ValueError("Missing the required parameter `attachment_id` when calling `crashes_get_crash_text_attachment_content`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_get_crash_text_attachment_content`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_get_crash_text_attachment_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'attachment_id' in params:
            path_params['attachment_id'] = params['attachment_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/text', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_get_hockey_app_crash_forwarding_status(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Gets the state of HockeyApp Crash forwarding for SxS apps  # noqa: E501

        Gets the state of HockeyApp Crash forwarding for SxS apps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_hockey_app_crash_forwarding_status(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: HockeyAppCrashForwardingInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crashes_get_hockey_app_crash_forwarding_status_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_get_hockey_app_crash_forwarding_status_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_get_hockey_app_crash_forwarding_status_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Gets the state of HockeyApp Crash forwarding for SxS apps  # noqa: E501

        Gets the state of HockeyApp Crash forwarding for SxS apps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_hockey_app_crash_forwarding_status_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: HockeyAppCrashForwardingInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_get_hockey_app_crash_forwarding_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_get_hockey_app_crash_forwarding_status`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_get_hockey_app_crash_forwarding_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/hockeyapp_crash_forwarding', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HockeyAppCrashForwardingInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_get_native_crash(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets the native log of a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_native_crash(crash_group_id, crash_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str crash_id: id of a specific crash (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: NativeCrashLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crashes_get_native_crash_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_get_native_crash_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_get_native_crash_with_http_info(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets the native log of a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_native_crash_with_http_info(crash_group_id, crash_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str crash_id: id of a specific crash (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: NativeCrashLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'crash_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_get_native_crash" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashes_get_native_crash`")  # noqa: E501
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_get_native_crash`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_get_native_crash`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_get_native_crash`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NativeCrashLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_get_native_crash_download(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets the native log of a specific crash as a text attachment. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_native_crash_download(crash_group_id, crash_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str crash_id: id of a specific crash (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: NativeCrashLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crashes_get_native_crash_download_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_get_native_crash_download_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_get_native_crash_download_with_http_info(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets the native log of a specific crash as a text attachment. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_native_crash_download_with_http_info(crash_group_id, crash_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str crash_id: id of a specific crash (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: NativeCrashLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'crash_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_get_native_crash_download" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashes_get_native_crash_download`")  # noqa: E501
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_get_native_crash_download`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_get_native_crash_download`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_get_native_crash_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NativeCrashLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_get_raw_crash_location(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets the URI location to download json of a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_raw_crash_location(crash_group_id, crash_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str crash_id: id of a specific crash (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: CrashRawLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crashes_get_raw_crash_location_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_get_raw_crash_location_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_get_raw_crash_location_with_http_info(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets the URI location to download json of a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_raw_crash_location_with_http_info(crash_group_id, crash_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str crash_id: id of a specific crash (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: CrashRawLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'crash_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_get_raw_crash_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashes_get_raw_crash_location`")  # noqa: E501
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_get_raw_crash_location`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_get_raw_crash_location`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_get_raw_crash_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/raw/location', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CrashRawLocation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_get_stacktrace(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets a stacktrace for a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_stacktrace(crash_group_id, crash_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str crash_id: id of a specific crash (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param bool grouping_only: true if the stacktrace should be only the relevant thread / exception. Default is false
        :return: Stacktrace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crashes_get_stacktrace_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_get_stacktrace_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_get_stacktrace_with_http_info(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets a stacktrace for a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_get_stacktrace_with_http_info(crash_group_id, crash_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str crash_id: id of a specific crash (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param bool grouping_only: true if the stacktrace should be only the relevant thread / exception. Default is false
        :return: Stacktrace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'crash_id', 'owner_name', 'app_name', 'grouping_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_get_stacktrace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashes_get_stacktrace`")  # noqa: E501
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_get_stacktrace`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_get_stacktrace`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_get_stacktrace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'grouping_only' in params:
            query_params.append(('grouping_only', params['grouping_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/stacktrace', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Stacktrace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_list(self, crash_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets all crashes of a group. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_list(crash_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param bool include_report: true if the crash should include the raw crash report. Default is false
        :param bool include_log: true if the crash should include the custom log report. Default is false
        :param datetime date_from:
        :param datetime date_to:
        :param str app_version: version
        :param str error_type:
        :return: list[Crash]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crashes_list_with_http_info(crash_group_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_list_with_http_info(crash_group_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_list_with_http_info(self, crash_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets all crashes of a group. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_list_with_http_info(crash_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_group_id: id of a specific group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param bool include_report: true if the crash should include the raw crash report. Default is false
        :param bool include_log: true if the crash should include the custom log report. Default is false
        :param datetime date_from:
        :param datetime date_to:
        :param str app_version: version
        :param str error_type:
        :return: list[Crash]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'owner_name', 'app_name', 'include_report', 'include_log', 'date_from', 'date_to', 'app_version', 'error_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashes_list`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'include_report' in params:
            query_params.append(('include_report', params['include_report']))  # noqa: E501
        if 'include_log' in params:
            query_params.append(('include_log', params['include_log']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('date_from', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('date_to', params['date_to']))  # noqa: E501
        if 'app_version' in params:
            query_params.append(('app_version', params['app_version']))  # noqa: E501
        if 'error_type' in params:
            query_params.append(('error_type', params['error_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Crash]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_list_attachments(self, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets all attachments for a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_list_attachments(crash_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_id: id of a specific crash (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[CrashAttachment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crashes_list_attachments_with_http_info(crash_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_list_attachments_with_http_info(crash_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_list_attachments_with_http_info(self, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Available for UWP apps only.  # noqa: E501

        Gets all attachments for a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_list_attachments_with_http_info(crash_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crash_id: id of a specific crash (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[CrashAttachment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_list_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_list_attachments`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_list_attachments`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_list_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CrashAttachment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_update_hockey_app_crash_forwarding(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """Enable HockeyApp crash forwarding for SxS apps  # noqa: E501

        Enable HockeyApp crash forwarding for SxS apps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_update_hockey_app_crash_forwarding(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HockeyAppCrashForwardingChange body: Enable Forwarding (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: HockeyAppCrashForwardingInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crashes_update_hockey_app_crash_forwarding_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_update_hockey_app_crash_forwarding_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_update_hockey_app_crash_forwarding_with_http_info(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """Enable HockeyApp crash forwarding for SxS apps  # noqa: E501

        Enable HockeyApp crash forwarding for SxS apps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crashes_update_hockey_app_crash_forwarding_with_http_info(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HockeyAppCrashForwardingChange body: Enable Forwarding (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: HockeyAppCrashForwardingInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_update_hockey_app_crash_forwarding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crashes_update_hockey_app_crash_forwarding`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_update_hockey_app_crash_forwarding`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_update_hockey_app_crash_forwarding`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/hockeyapp_crash_forwarding', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HockeyAppCrashForwardingInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missing_symbol_groups_get(self, symbol_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Gets missing symbol crash group by its id  # noqa: E501

        Gets missing symbol crash group by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missing_symbol_groups_get(symbol_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol_group_id: missing symbol crash group id (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: V2MissingSymbolCrashGroupsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missing_symbol_groups_get_with_http_info(symbol_group_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.missing_symbol_groups_get_with_http_info(symbol_group_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def missing_symbol_groups_get_with_http_info(self, symbol_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Gets missing symbol crash group by its id  # noqa: E501

        Gets missing symbol crash group by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missing_symbol_groups_get_with_http_info(symbol_group_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol_group_id: missing symbol crash group id (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: V2MissingSymbolCrashGroupsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_group_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missing_symbol_groups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_group_id' is set
        if ('symbol_group_id' not in params or
                params['symbol_group_id'] is None):
            raise ValueError("Missing the required parameter `symbol_group_id` when calling `missing_symbol_groups_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `missing_symbol_groups_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `missing_symbol_groups_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_group_id' in params:
            path_params['symbol_group_id'] = params['symbol_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2MissingSymbolCrashGroupsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missing_symbol_groups_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Gets application level statistics for all missing symbol groups  # noqa: E501

        Gets application level statistics for all missing symbol groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missing_symbol_groups_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: V2MissingSymbolCrashGroupsInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missing_symbol_groups_info_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.missing_symbol_groups_info_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def missing_symbol_groups_info_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Gets application level statistics for all missing symbol groups  # noqa: E501

        Gets application level statistics for all missing symbol groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missing_symbol_groups_info_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: V2MissingSymbolCrashGroupsInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missing_symbol_groups_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `missing_symbol_groups_info`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `missing_symbol_groups_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2MissingSymbolCrashGroupsInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missing_symbol_groups_list(self, top, owner_name, app_name, **kwargs):  # noqa: E501
        """Gets top N (ordered by crash count) of crash groups by missing symbol  # noqa: E501

        Gets top N (ordered by crash count) of crash groups by missing symbol  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missing_symbol_groups_list(top, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int top: top N elements (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str filter: query filter
        :return: V2MissingSymbolCrashGroupsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missing_symbol_groups_list_with_http_info(top, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.missing_symbol_groups_list_with_http_info(top, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def missing_symbol_groups_list_with_http_info(self, top, owner_name, app_name, **kwargs):  # noqa: E501
        """Gets top N (ordered by crash count) of crash groups by missing symbol  # noqa: E501

        Gets top N (ordered by crash count) of crash groups by missing symbol  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missing_symbol_groups_list_with_http_info(top, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int top: top N elements (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str filter: query filter
        :return: V2MissingSymbolCrashGroupsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['top', 'owner_name', 'app_name', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missing_symbol_groups_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'top' is set
        if ('top' not in params or
                params['top'] is None):
            raise ValueError("Missing the required parameter `top` when calling `missing_symbol_groups_list`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `missing_symbol_groups_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `missing_symbol_groups_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2MissingSymbolCrashGroupsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbol_uploads_complete(self, body, symbol_upload_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbol_uploads_complete  # noqa: E501

        Commits or aborts the symbol upload process for a new set of symbols for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbol_uploads_complete(body, symbol_upload_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SymbolUploadEndRequest body: The symbol information (required)
        :param str symbol_upload_id: The ID of the symbol upload (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SymbolUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.symbol_uploads_complete_with_http_info(body, symbol_upload_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbol_uploads_complete_with_http_info(body, symbol_upload_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbol_uploads_complete_with_http_info(self, body, symbol_upload_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbol_uploads_complete  # noqa: E501

        Commits or aborts the symbol upload process for a new set of symbols for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbol_uploads_complete_with_http_info(body, symbol_upload_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SymbolUploadEndRequest body: The symbol information (required)
        :param str symbol_upload_id: The ID of the symbol upload (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SymbolUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'symbol_upload_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbol_uploads_complete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `symbol_uploads_complete`")  # noqa: E501
        # verify the required parameter 'symbol_upload_id' is set
        if ('symbol_upload_id' not in params or
                params['symbol_upload_id'] is None):
            raise ValueError("Missing the required parameter `symbol_upload_id` when calling `symbol_uploads_complete`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbol_uploads_complete`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbol_uploads_complete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_upload_id' in params:
            path_params['symbol_upload_id'] = params['symbol_upload_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SymbolUpload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbol_uploads_create(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """symbol_uploads_create  # noqa: E501

        Begins the symbol upload process for a new set of symbols for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbol_uploads_create(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SymbolUploadBeginRequest body: The symbol information (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SymbolUploadBeginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.symbol_uploads_create_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbol_uploads_create_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbol_uploads_create_with_http_info(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """symbol_uploads_create  # noqa: E501

        Begins the symbol upload process for a new set of symbols for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbol_uploads_create_with_http_info(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SymbolUploadBeginRequest body: The symbol information (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SymbolUploadBeginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbol_uploads_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `symbol_uploads_create`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbol_uploads_create`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbol_uploads_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SymbolUploadBeginResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbol_uploads_delete(self, symbol_upload_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbol_uploads_delete  # noqa: E501

        Deletes a symbol upload by id for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbol_uploads_delete(symbol_upload_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol_upload_id: The ID of the symbol upload (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SymbolUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.symbol_uploads_delete_with_http_info(symbol_upload_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbol_uploads_delete_with_http_info(symbol_upload_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbol_uploads_delete_with_http_info(self, symbol_upload_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbol_uploads_delete  # noqa: E501

        Deletes a symbol upload by id for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbol_uploads_delete_with_http_info(symbol_upload_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol_upload_id: The ID of the symbol upload (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SymbolUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_upload_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbol_uploads_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_upload_id' is set
        if ('symbol_upload_id' not in params or
                params['symbol_upload_id'] is None):
            raise ValueError("Missing the required parameter `symbol_upload_id` when calling `symbol_uploads_delete`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbol_uploads_delete`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbol_uploads_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_upload_id' in params:
            path_params['symbol_upload_id'] = params['symbol_upload_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SymbolUpload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbol_uploads_get(self, symbol_upload_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbol_uploads_get  # noqa: E501

        Gets a symbol upload by id for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbol_uploads_get(symbol_upload_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol_upload_id: The ID of the symbol upload (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SymbolUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.symbol_uploads_get_with_http_info(symbol_upload_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbol_uploads_get_with_http_info(symbol_upload_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbol_uploads_get_with_http_info(self, symbol_upload_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbol_uploads_get  # noqa: E501

        Gets a symbol upload by id for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbol_uploads_get_with_http_info(symbol_upload_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol_upload_id: The ID of the symbol upload (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SymbolUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_upload_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbol_uploads_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_upload_id' is set
        if ('symbol_upload_id' not in params or
                params['symbol_upload_id'] is None):
            raise ValueError("Missing the required parameter `symbol_upload_id` when calling `symbol_uploads_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbol_uploads_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbol_uploads_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_upload_id' in params:
            path_params['symbol_upload_id'] = params['symbol_upload_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SymbolUpload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbol_uploads_get_location(self, symbol_upload_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbol_uploads_get_location  # noqa: E501

        Gets the URL to download the symbol upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbol_uploads_get_location(symbol_upload_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol_upload_id: The ID of the symbol upload (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SymbolUploadLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.symbol_uploads_get_location_with_http_info(symbol_upload_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbol_uploads_get_location_with_http_info(symbol_upload_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbol_uploads_get_location_with_http_info(self, symbol_upload_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbol_uploads_get_location  # noqa: E501

        Gets the URL to download the symbol upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbol_uploads_get_location_with_http_info(symbol_upload_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol_upload_id: The ID of the symbol upload (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SymbolUploadLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_upload_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbol_uploads_get_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_upload_id' is set
        if ('symbol_upload_id' not in params or
                params['symbol_upload_id'] is None):
            raise ValueError("Missing the required parameter `symbol_upload_id` when calling `symbol_uploads_get_location`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbol_uploads_get_location`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbol_uploads_get_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_upload_id' in params:
            path_params['symbol_upload_id'] = params['symbol_upload_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SymbolUploadLocation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbol_uploads_list(self, owner_name, app_name, **kwargs):  # noqa: E501
        """symbol_uploads_list  # noqa: E501

        Gets a list of all uploads for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbol_uploads_list(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param int top: The maximum number of results to return.
        :param str status: Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states. 
        :return: SymbolUploads
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.symbol_uploads_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbol_uploads_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbol_uploads_list_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """symbol_uploads_list  # noqa: E501

        Gets a list of all uploads for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbol_uploads_list_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param int top: The maximum number of results to return.
        :param str status: Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states. 
        :return: SymbolUploads
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'top', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbol_uploads_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbol_uploads_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbol_uploads_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SymbolUploads',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbols_get(self, symbol_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_get  # noqa: E501

        Returns a particular symbol by id (uuid) for the provided application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbols_get(symbol_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol_id: The ID of the symbol (uuid of the symbol) (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Symbol
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.symbols_get_with_http_info(symbol_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbols_get_with_http_info(symbol_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbols_get_with_http_info(self, symbol_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_get  # noqa: E501

        Returns a particular symbol by id (uuid) for the provided application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbols_get_with_http_info(symbol_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol_id: The ID of the symbol (uuid of the symbol) (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Symbol
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbols_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_id' is set
        if ('symbol_id' not in params or
                params['symbol_id'] is None):
            raise ValueError("Missing the required parameter `symbol_id` when calling `symbols_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbols_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbols_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_id' in params:
            path_params['symbol_id'] = params['symbol_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Symbol',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbols_get_location(self, symbol_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_get_location  # noqa: E501

        Gets the URL to download the symbol  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbols_get_location(symbol_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol_id: The ID of the symbol (uuid of the symbol) (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SymbolLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.symbols_get_location_with_http_info(symbol_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbols_get_location_with_http_info(symbol_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbols_get_location_with_http_info(self, symbol_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_get_location  # noqa: E501

        Gets the URL to download the symbol  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbols_get_location_with_http_info(symbol_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol_id: The ID of the symbol (uuid of the symbol) (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SymbolLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbols_get_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_id' is set
        if ('symbol_id' not in params or
                params['symbol_id'] is None):
            raise ValueError("Missing the required parameter `symbol_id` when calling `symbols_get_location`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbols_get_location`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbols_get_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_id' in params:
            path_params['symbol_id'] = params['symbol_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SymbolLocation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbols_get_status(self, symbol_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_get_status  # noqa: E501

        Returns a particular symbol by id (uuid) for the provided application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbols_get_status(symbol_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol_id: The ID of the symbol (uuid of the symbol) (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SymbolStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.symbols_get_status_with_http_info(symbol_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbols_get_status_with_http_info(symbol_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbols_get_status_with_http_info(self, symbol_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_get_status  # noqa: E501

        Returns a particular symbol by id (uuid) for the provided application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbols_get_status_with_http_info(symbol_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol_id: The ID of the symbol (uuid of the symbol) (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SymbolStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbols_get_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_id' is set
        if ('symbol_id' not in params or
                params['symbol_id'] is None):
            raise ValueError("Missing the required parameter `symbol_id` when calling `symbols_get_status`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbols_get_status`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbols_get_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_id' in params:
            path_params['symbol_id'] = params['symbol_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SymbolStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbols_ignore(self, symbol_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_ignore  # noqa: E501

        Marks a symbol by id (uuid) as ignored  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbols_ignore(symbol_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol_id: The ID of the symbol (uuid of the symbol) (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Symbol
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.symbols_ignore_with_http_info(symbol_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbols_ignore_with_http_info(symbol_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbols_ignore_with_http_info(self, symbol_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_ignore  # noqa: E501

        Marks a symbol by id (uuid) as ignored  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbols_ignore_with_http_info(symbol_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol_id: The ID of the symbol (uuid of the symbol) (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Symbol
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbols_ignore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_id' is set
        if ('symbol_id' not in params or
                params['symbol_id'] is None):
            raise ValueError("Missing the required parameter `symbol_id` when calling `symbols_ignore`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbols_ignore`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbols_ignore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_id' in params:
            path_params['symbol_id'] = params['symbol_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Symbol',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbols_list(self, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_list  # noqa: E501

        Returns the list of all symbols for the provided application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbols_list(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Symbols
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.symbols_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbols_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbols_list_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_list  # noqa: E501

        Returns the list of all symbols for the provided application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.symbols_list_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Symbols
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbols_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbols_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbols_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbols', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Symbols',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
