# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from appcenter.api_client import ApiClient


class AccountApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def aad_group_list_for_org(self, org_name, **kwargs):  # noqa: E501
        """aad_group_list_for_org  # noqa: E501

        Returns a list of aad groups that belong to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aad_group_list_for_org(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: list[OrganizationAADGroupResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.aad_group_list_for_org_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.aad_group_list_for_org_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def aad_group_list_for_org_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """aad_group_list_for_org  # noqa: E501

        Returns a list of aad groups that belong to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aad_group_list_for_org_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: list[OrganizationAADGroupResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aad_group_list_for_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `aad_group_list_for_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/aad_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrganizationAADGroupResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_tokens_delete(self, api_token_id, **kwargs):  # noqa: E501
        """api_tokens_delete  # noqa: E501

        Delete the api_token object with the specific id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_tokens_delete(api_token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token_id: The unique ID (UUID) of the api token (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_tokens_delete_with_http_info(api_token_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_tokens_delete_with_http_info(api_token_id, **kwargs)  # noqa: E501
            return data

    def api_tokens_delete_with_http_info(self, api_token_id, **kwargs):  # noqa: E501
        """api_tokens_delete  # noqa: E501

        Delete the api_token object with the specific id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_tokens_delete_with_http_info(api_token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_token_id: The unique ID (UUID) of the api token (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_tokens_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token_id' is set
        if ('api_token_id' not in params or
                params['api_token_id'] is None):
            raise ValueError("Missing the required parameter `api_token_id` when calling `api_tokens_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_token_id' in params:
            path_params['api_token_id'] = params['api_token_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/api_tokens/{api_token_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_tokens_list(self, **kwargs):  # noqa: E501
        """api_tokens_list  # noqa: E501

        Returns api tokens for the authenticated user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_tokens_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ApiTokensGetResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_tokens_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_tokens_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_tokens_list_with_http_info(self, **kwargs):  # noqa: E501
        """api_tokens_list  # noqa: E501

        Returns api tokens for the authenticated user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_tokens_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ApiTokensGetResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_tokens_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/api_tokens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApiTokensGetResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_tokens_new(self, **kwargs):  # noqa: E501
        """api_tokens_new  # noqa: E501

        Creates a new API token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_tokens_new(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiTokensCreateRequest body: Description of the token
        :return: ApiTokensCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_tokens_new_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_tokens_new_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_tokens_new_with_http_info(self, **kwargs):  # noqa: E501
        """api_tokens_new  # noqa: E501

        Creates a new API token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_tokens_new_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiTokensCreateRequest body: Description of the token
        :return: ApiTokensCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_tokens_new" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/api_tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiTokensCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_invitations_accept(self, invitation_token, **kwargs):  # noqa: E501
        """app_invitations_accept  # noqa: E501

        Accepts a pending invitation for the specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_invitations_accept(invitation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_token: The app invitation token that was sent to the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_invitations_accept_with_http_info(invitation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.app_invitations_accept_with_http_info(invitation_token, **kwargs)  # noqa: E501
            return data

    def app_invitations_accept_with_http_info(self, invitation_token, **kwargs):  # noqa: E501
        """app_invitations_accept  # noqa: E501

        Accepts a pending invitation for the specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_invitations_accept_with_http_info(invitation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_token: The app invitation token that was sent to the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_invitations_accept" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_token' is set
        if ('invitation_token' not in params or
                params['invitation_token'] is None):
            raise ValueError("Missing the required parameter `invitation_token` when calling `app_invitations_accept`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_token' in params:
            path_params['invitation_token'] = params['invitation_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/user/invitations/apps/{invitation_token}/accept', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_invitations_create(self, owner_name, app_name, **kwargs):  # noqa: E501
        """app_invitations_create  # noqa: E501

        Invites a new or existing user to an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_invitations_create(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param UserEmailRequest body: The email of the user to invite
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_invitations_create_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.app_invitations_create_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def app_invitations_create_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """app_invitations_create  # noqa: E501

        Invites a new or existing user to an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_invitations_create_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param UserEmailRequest body: The email of the user to invite
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_invitations_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `app_invitations_create`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `app_invitations_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/invitations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_invitations_create_by_email(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """app_invitations_create_by_email  # noqa: E501

        Invites a new or existing user to an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_invitations_create_by_email(owner_name, app_name, user_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str user_email: The email of the user to invite (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_invitations_create_by_email_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
        else:
            (data) = self.app_invitations_create_by_email_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
            return data

    def app_invitations_create_by_email_with_http_info(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """app_invitations_create_by_email  # noqa: E501

        Invites a new or existing user to an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_invitations_create_by_email_with_http_info(owner_name, app_name, user_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str user_email: The email of the user to invite (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'user_email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_invitations_create_by_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `app_invitations_create_by_email`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `app_invitations_create_by_email`")  # noqa: E501
        # verify the required parameter 'user_email' is set
        if ('user_email' not in params or
                params['user_email'] is None):
            raise ValueError("Missing the required parameter `user_email` when calling `app_invitations_create_by_email`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'user_email' in params:
            path_params['user_email'] = params['user_email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_invitations_delete(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """app_invitations_delete  # noqa: E501

        Removes a user's invitation to an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_invitations_delete(owner_name, app_name, user_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str user_email: The email of the user to invite (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_invitations_delete_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
        else:
            (data) = self.app_invitations_delete_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
            return data

    def app_invitations_delete_with_http_info(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """app_invitations_delete  # noqa: E501

        Removes a user's invitation to an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_invitations_delete_with_http_info(owner_name, app_name, user_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str user_email: The email of the user to invite (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'user_email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_invitations_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `app_invitations_delete`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `app_invitations_delete`")  # noqa: E501
        # verify the required parameter 'user_email' is set
        if ('user_email' not in params or
                params['user_email'] is None):
            raise ValueError("Missing the required parameter `user_email` when calling `app_invitations_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'user_email' in params:
            path_params['user_email'] = params['user_email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_invitations_list(self, owner_name, app_name, **kwargs):  # noqa: E501
        """app_invitations_list  # noqa: E501

        Gets the pending invitations for the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_invitations_list(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: AppInvitationDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_invitations_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.app_invitations_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def app_invitations_list_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """app_invitations_list  # noqa: E501

        Gets the pending invitations for the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_invitations_list_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: AppInvitationDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_invitations_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `app_invitations_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `app_invitations_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/invitations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppInvitationDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_invitations_reject(self, invitation_token, **kwargs):  # noqa: E501
        """app_invitations_reject  # noqa: E501

        Rejects a pending invitation for the specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_invitations_reject(invitation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_token: The app invitation token that was sent to the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_invitations_reject_with_http_info(invitation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.app_invitations_reject_with_http_info(invitation_token, **kwargs)  # noqa: E501
            return data

    def app_invitations_reject_with_http_info(self, invitation_token, **kwargs):  # noqa: E501
        """app_invitations_reject  # noqa: E501

        Rejects a pending invitation for the specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_invitations_reject_with_http_info(invitation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_token: The app invitation token that was sent to the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_invitations_reject" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_token' is set
        if ('invitation_token' not in params or
                params['invitation_token'] is None):
            raise ValueError("Missing the required parameter `invitation_token` when calling `app_invitations_reject`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_token' in params:
            path_params['invitation_token'] = params['invitation_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/user/invitations/apps/{invitation_token}/reject', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_invitations_update_permissions(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """app_invitations_update_permissions  # noqa: E501

        Update pending invitation permission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_invitations_update_permissions(owner_name, app_name, user_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str user_email: The email of the user to invite (required)
        :param UserInvitationPermissionsUpdateRequest body: The value to update the user permission in the invite.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_invitations_update_permissions_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
        else:
            (data) = self.app_invitations_update_permissions_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
            return data

    def app_invitations_update_permissions_with_http_info(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """app_invitations_update_permissions  # noqa: E501

        Update pending invitation permission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_invitations_update_permissions_with_http_info(owner_name, app_name, user_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str user_email: The email of the user to invite (required)
        :param UserInvitationPermissionsUpdateRequest body: The value to update the user permission in the invite.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'user_email', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_invitations_update_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `app_invitations_update_permissions`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `app_invitations_update_permissions`")  # noqa: E501
        # verify the required parameter 'user_email' is set
        if ('user_email' not in params or
                params['user_email'] is None):
            raise ValueError("Missing the required parameter `user_email` when calling `app_invitations_update_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'user_email' in params:
            path_params['user_email'] = params['user_email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_create(self, body, **kwargs):  # noqa: E501
        """apps_create  # noqa: E501

        Creates a new app and returns it to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppRequest body: The data for the app (required)
        :return: AppResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def apps_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """apps_create  # noqa: E501

        Creates a new app and returns it to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppRequest body: The data for the app (required)
        :return: AppResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `apps_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_create_for_org(self, body, org_name, **kwargs):  # noqa: E501
        """apps_create_for_org  # noqa: E501

        Creates a new app for the organization and returns it to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_create_for_org(body, org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppRequest body: The data for the app (required)
        :param str org_name: The organization's name (required)
        :return: AppResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_create_for_org_with_http_info(body, org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_create_for_org_with_http_info(body, org_name, **kwargs)  # noqa: E501
            return data

    def apps_create_for_org_with_http_info(self, body, org_name, **kwargs):  # noqa: E501
        """apps_create_for_org  # noqa: E501

        Creates a new app for the organization and returns it to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_create_for_org_with_http_info(body, org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppRequest body: The data for the app (required)
        :param str org_name: The organization's name (required)
        :return: AppResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_create_for_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `apps_create_for_org`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `apps_create_for_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/apps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_delete(self, app_name, owner_name, **kwargs):  # noqa: E501
        """apps_delete  # noqa: E501

        Delete an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_delete(app_name, owner_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: The name of the application (required)
        :param str owner_name: The name of the owner (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_delete_with_http_info(app_name, owner_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_delete_with_http_info(app_name, owner_name, **kwargs)  # noqa: E501
            return data

    def apps_delete_with_http_info(self, app_name, owner_name, **kwargs):  # noqa: E501
        """apps_delete  # noqa: E501

        Delete an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_delete_with_http_info(app_name, owner_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: The name of the application (required)
        :param str owner_name: The name of the owner (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'owner_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_delete`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_delete_avatar(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_delete_avatar  # noqa: E501

        Deletes the uploaded app avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_delete_avatar(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: AppResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_delete_avatar_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_delete_avatar_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def apps_delete_avatar_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_delete_avatar  # noqa: E501

        Deletes the uploaded app avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_delete_avatar_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: AppResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_delete_avatar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_delete_avatar`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_delete_avatar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/avatar', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_get(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_get  # noqa: E501

        Return a specific app with the given app name which belongs to the given owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: AppResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_get_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_get_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def apps_get_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_get  # noqa: E501

        Return a specific app with the given app name which belongs to the given owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: AppResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_get_for_org_user(self, org_name, user_name, **kwargs):  # noqa: E501
        """apps_get_for_org_user  # noqa: E501

        Get a user apps information from an organization by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_for_org_user(org_name, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str user_name: The slug name of the user (required)
        :return: list[AppResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_get_for_org_user_with_http_info(org_name, user_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_get_for_org_user_with_http_info(org_name, user_name, **kwargs)  # noqa: E501
            return data

    def apps_get_for_org_user_with_http_info(self, org_name, user_name, **kwargs):  # noqa: E501
        """apps_get_for_org_user  # noqa: E501

        Get a user apps information from an organization by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_for_org_user_with_http_info(org_name, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str user_name: The slug name of the user (required)
        :return: list[AppResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'user_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_get_for_org_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `apps_get_for_org_user`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `apps_get_for_org_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'user_name' in params:
            path_params['user_name'] = params['user_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/users/{user_name}/apps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AppResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_get_teams(self, app_name, owner_name, **kwargs):  # noqa: E501
        """apps_get_teams  # noqa: E501

        Returns the details of all teams that have access to the app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_teams(app_name, owner_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: The name of the application (required)
        :param str owner_name: The name of the owner (required)
        :return: list[TeamAppResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_get_teams_with_http_info(app_name, owner_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_get_teams_with_http_info(app_name, owner_name, **kwargs)  # noqa: E501
            return data

    def apps_get_teams_with_http_info(self, app_name, owner_name, **kwargs):  # noqa: E501
        """apps_get_teams  # noqa: E501

        Returns the details of all teams that have access to the app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_teams_with_http_info(app_name, owner_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: The name of the application (required)
        :param str owner_name: The name of the owner (required)
        :return: list[TeamAppResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'owner_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_get_teams" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_get_teams`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_get_teams`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/teams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TeamAppResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_list(self, **kwargs):  # noqa: E501
        """apps_list  # noqa: E501

        Returns a list of apps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_by: The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order.
        :return: list[AppResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apps_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def apps_list_with_http_info(self, **kwargs):  # noqa: E501
        """apps_list  # noqa: E501

        Returns a list of apps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_by: The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order.
        :return: list[AppResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_by' in params:
            query_params.append(('$orderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AppResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_list_for_org(self, org_name, **kwargs):  # noqa: E501
        """apps_list_for_org  # noqa: E501

        Returns a list of apps for the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_list_for_org(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: list[AppResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_list_for_org_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_list_for_org_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def apps_list_for_org_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """apps_list_for_org  # noqa: E501

        Returns a list of apps for the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_list_for_org_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: list[AppResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_list_for_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `apps_list_for_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/apps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AppResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_list_testers(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_list_testers  # noqa: E501

        Returns the testers associated with the app specified with the given app name which belongs to the given owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_list_testers(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[UserProfileResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_list_testers_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_list_testers_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def apps_list_testers_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_list_testers  # noqa: E501

        Returns the testers associated with the app specified with the given app name which belongs to the given owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_list_testers_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[UserProfileResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_list_testers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_list_testers`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_list_testers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/testers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserProfileResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_remove_user(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """apps_remove_user  # noqa: E501

        Removes the user from the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_remove_user(owner_name, app_name, user_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str user_email: The user email of the user to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_remove_user_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_remove_user_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
            return data

    def apps_remove_user_with_http_info(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """apps_remove_user  # noqa: E501

        Removes the user from the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_remove_user_with_http_info(owner_name, app_name, user_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str user_email: The user email of the user to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'user_email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_remove_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_remove_user`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_remove_user`")  # noqa: E501
        # verify the required parameter 'user_email' is set
        if ('user_email' not in params or
                params['user_email'] is None):
            raise ValueError("Missing the required parameter `user_email` when calling `apps_remove_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'user_email' in params:
            path_params['user_email'] = params['user_email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_transfer_ownership(self, owner_name, app_name, destination_owner_name, **kwargs):  # noqa: E501
        """apps_transfer_ownership  # noqa: E501

        Transfers ownership of an app to a different user or organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_transfer_ownership(owner_name, app_name, destination_owner_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str destination_owner_name: The name of the owner (user or organization) to which the app is being transferred (required)
        :return: AppResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_transfer_ownership_with_http_info(owner_name, app_name, destination_owner_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_transfer_ownership_with_http_info(owner_name, app_name, destination_owner_name, **kwargs)  # noqa: E501
            return data

    def apps_transfer_ownership_with_http_info(self, owner_name, app_name, destination_owner_name, **kwargs):  # noqa: E501
        """apps_transfer_ownership  # noqa: E501

        Transfers ownership of an app to a different user or organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_transfer_ownership_with_http_info(owner_name, app_name, destination_owner_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str destination_owner_name: The name of the owner (user or organization) to which the app is being transferred (required)
        :return: AppResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'destination_owner_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_transfer_ownership" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_transfer_ownership`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_transfer_ownership`")  # noqa: E501
        # verify the required parameter 'destination_owner_name' is set
        if ('destination_owner_name' not in params or
                params['destination_owner_name'] is None):
            raise ValueError("Missing the required parameter `destination_owner_name` when calling `apps_transfer_ownership`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'destination_owner_name' in params:
            path_params['destination_owner_name'] = params['destination_owner_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_transfer_to_org(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_transfer_to_org  # noqa: E501

        Transfers ownership of an app to a new organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_transfer_to_org(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: OrganizationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_transfer_to_org_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_transfer_to_org_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def apps_transfer_to_org_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_transfer_to_org  # noqa: E501

        Transfers ownership of an app to a new organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_transfer_to_org_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: OrganizationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_transfer_to_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_transfer_to_org`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_transfer_to_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/transfer_to_org', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_update(self, app_name, owner_name, **kwargs):  # noqa: E501
        """apps_update  # noqa: E501

        Partially updates a single app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_update(app_name, owner_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: The name of the application (required)
        :param str owner_name: The name of the owner (required)
        :param AppPatchRequest body: The partial data for the app
        :return: AppResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_update_with_http_info(app_name, owner_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_update_with_http_info(app_name, owner_name, **kwargs)  # noqa: E501
            return data

    def apps_update_with_http_info(self, app_name, owner_name, **kwargs):  # noqa: E501
        """apps_update  # noqa: E501

        Partially updates a single app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_update_with_http_info(app_name, owner_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: The name of the application (required)
        :param str owner_name: The name of the owner (required)
        :param AppPatchRequest body: The partial data for the app
        :return: AppResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'owner_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_update`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_update_avatar(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_update_avatar  # noqa: E501

        Sets the app avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_update_avatar(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param file avatar:
        :return: AppResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_update_avatar_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_update_avatar_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def apps_update_avatar_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_update_avatar  # noqa: E501

        Sets the app avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_update_avatar_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param file avatar:
        :return: AppResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'avatar']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_update_avatar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_update_avatar`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_update_avatar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'avatar' in params:
            local_var_files['avatar'] = params['avatar']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/avatar', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_update_user_permissions(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """apps_update_user_permissions  # noqa: E501

        Update user permission for the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_update_user_permissions(owner_name, app_name, user_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str user_email: The user email of the user to patch (required)
        :param UserAppPermissionsUpdateRequest body: The value to update the user permission for the app.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_update_user_permissions_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_update_user_permissions_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
            return data

    def apps_update_user_permissions_with_http_info(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """apps_update_user_permissions  # noqa: E501

        Update user permission for the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_update_user_permissions_with_http_info(owner_name, app_name, user_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str user_email: The user email of the user to patch (required)
        :param UserAppPermissionsUpdateRequest body: The value to update the user permission for the app.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'user_email', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_update_user_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_update_user_permissions`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_update_user_permissions`")  # noqa: E501
        # verify the required parameter 'user_email' is set
        if ('user_email' not in params or
                params['user_email'] is None):
            raise ValueError("Missing the required parameter `user_email` when calling `apps_update_user_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'user_email' in params:
            path_params['user_email'] = params['user_email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_subscription_delete_for_app(self, azure_subscription_id, owner_name, app_name, **kwargs):  # noqa: E501
        """azure_subscription_delete_for_app  # noqa: E501

        Delete the azure subscriptions for the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_subscription_delete_for_app(azure_subscription_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str azure_subscription_id: The unique ID (UUID) of the azure subscription (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.azure_subscription_delete_for_app_with_http_info(azure_subscription_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.azure_subscription_delete_for_app_with_http_info(azure_subscription_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def azure_subscription_delete_for_app_with_http_info(self, azure_subscription_id, owner_name, app_name, **kwargs):  # noqa: E501
        """azure_subscription_delete_for_app  # noqa: E501

        Delete the azure subscriptions for the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_subscription_delete_for_app_with_http_info(azure_subscription_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str azure_subscription_id: The unique ID (UUID) of the azure subscription (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['azure_subscription_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_subscription_delete_for_app" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'azure_subscription_id' is set
        if ('azure_subscription_id' not in params or
                params['azure_subscription_id'] is None):
            raise ValueError("Missing the required parameter `azure_subscription_id` when calling `azure_subscription_delete_for_app`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `azure_subscription_delete_for_app`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `azure_subscription_delete_for_app`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'azure_subscription_id' in params:
            path_params['azure_subscription_id'] = params['azure_subscription_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions/{azure_subscription_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_subscription_link_for_app(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """azure_subscription_link_for_app  # noqa: E501

        Link azure subscription to an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_subscription_link_for_app(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AzureSubscriptionAddToAppRequest body: The azure subscription data needed to be link to the app. (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.azure_subscription_link_for_app_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.azure_subscription_link_for_app_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def azure_subscription_link_for_app_with_http_info(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """azure_subscription_link_for_app  # noqa: E501

        Link azure subscription to an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_subscription_link_for_app_with_http_info(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AzureSubscriptionAddToAppRequest body: The azure subscription data needed to be link to the app. (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_subscription_link_for_app" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `azure_subscription_link_for_app`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `azure_subscription_link_for_app`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `azure_subscription_link_for_app`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_subscription_list_for_app(self, owner_name, app_name, **kwargs):  # noqa: E501
        """azure_subscription_list_for_app  # noqa: E501

        Returns a list of azure subscriptions for the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_subscription_list_for_app(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[AzureSubscriptionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.azure_subscription_list_for_app_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.azure_subscription_list_for_app_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def azure_subscription_list_for_app_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """azure_subscription_list_for_app  # noqa: E501

        Returns a list of azure subscriptions for the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_subscription_list_for_app_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[AzureSubscriptionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_subscription_list_for_app" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `azure_subscription_list_for_app`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `azure_subscription_list_for_app`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureSubscriptionResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_subscription_list_for_org(self, org_name, **kwargs):  # noqa: E501
        """azure_subscription_list_for_org  # noqa: E501

        Returns a list of azure subscriptions for the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_subscription_list_for_org(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: list[AzureSubscriptionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.azure_subscription_list_for_org_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.azure_subscription_list_for_org_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def azure_subscription_list_for_org_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """azure_subscription_list_for_org  # noqa: E501

        Returns a list of azure subscriptions for the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_subscription_list_for_org_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: list[AzureSubscriptionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_subscription_list_for_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `azure_subscription_list_for_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/azure_subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureSubscriptionResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_subscription_list_for_user(self, **kwargs):  # noqa: E501
        """azure_subscription_list_for_user  # noqa: E501

        Returns a list of azure subscriptions for the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_subscription_list_for_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AzureSubscriptionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.azure_subscription_list_for_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.azure_subscription_list_for_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def azure_subscription_list_for_user_with_http_info(self, **kwargs):  # noqa: E501
        """azure_subscription_list_for_user  # noqa: E501

        Returns a list of azure subscriptions for the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_subscription_list_for_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AzureSubscriptionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_subscription_list_for_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/azure_subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureSubscriptionResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_group_invitations_accept_all(self, **kwargs):  # noqa: E501
        """distribution_group_invitations_accept_all  # noqa: E501

        Accepts all pending invitations to distribution groups for the specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_group_invitations_accept_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_group_invitations_accept_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.distribution_group_invitations_accept_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def distribution_group_invitations_accept_all_with_http_info(self, **kwargs):  # noqa: E501
        """distribution_group_invitations_accept_all  # noqa: E501

        Accepts all pending invitations to distribution groups for the specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_group_invitations_accept_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_group_invitations_accept_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/user/invitations/distribution_groups/accept', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_add_apps(self, body, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_add_apps  # noqa: E501

        Add apps to distribution group in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_add_apps(body, org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupAppAddRequest body: The name of the apps to be added to the distribution group. The apps have to be owned by the organization. (required)
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_add_apps_with_http_info(body, org_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_add_apps_with_http_info(body, org_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_add_apps_with_http_info(self, body, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_add_apps  # noqa: E501

        Add apps to distribution group in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_add_apps_with_http_info(body, org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupAppAddRequest body: The name of the apps to be added to the distribution group. The apps have to be owned by the organization. (required)
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_add_apps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distribution_groups_add_apps`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distribution_groups_add_apps`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_add_apps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_add_user(self, body, owner_name, app_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_add_user  # noqa: E501

        Adds the members to the specified distribution group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_add_user(body, owner_name, app_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupUserRequest body: The list of members to add (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: list[DistributionGroupUserPostResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_add_user_with_http_info(body, owner_name, app_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_add_user_with_http_info(body, owner_name, app_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_add_user_with_http_info(self, body, owner_name, app_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_add_user  # noqa: E501

        Adds the members to the specified distribution group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_add_user_with_http_info(body, owner_name, app_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupUserRequest body: The list of members to add (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: list[DistributionGroupUserPostResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner_name', 'app_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_add_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distribution_groups_add_user`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distribution_groups_add_user`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distribution_groups_add_user`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_add_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistributionGroupUserPostResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_add_users_for_org(self, body, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_add_users_for_org  # noqa: E501

        Accepts an array of user email addresses to get added to the specified group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_add_users_for_org(body, org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupUserRequest body: list of user email addresses that should get added as members to the specified group (required)
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: list[DistributionGroupUserPostResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_add_users_for_org_with_http_info(body, org_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_add_users_for_org_with_http_info(body, org_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_add_users_for_org_with_http_info(self, body, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_add_users_for_org  # noqa: E501

        Accepts an array of user email addresses to get added to the specified group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_add_users_for_org_with_http_info(body, org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupUserRequest body: list of user email addresses that should get added as members to the specified group (required)
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: list[DistributionGroupUserPostResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_add_users_for_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distribution_groups_add_users_for_org`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distribution_groups_add_users_for_org`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_add_users_for_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistributionGroupUserPostResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_bulk_delete_apps(self, body, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_bulk_delete_apps  # noqa: E501

        Delete apps from distribution group in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_bulk_delete_apps(body, org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupAppsDeleteRequest body: The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization. (required)
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_bulk_delete_apps_with_http_info(body, org_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_bulk_delete_apps_with_http_info(body, org_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_bulk_delete_apps_with_http_info(self, body, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_bulk_delete_apps  # noqa: E501

        Delete apps from distribution group in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_bulk_delete_apps_with_http_info(body, org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupAppsDeleteRequest body: The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization. (required)
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_bulk_delete_apps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distribution_groups_bulk_delete_apps`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distribution_groups_bulk_delete_apps`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_bulk_delete_apps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_bulk_delete_users(self, body, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_bulk_delete_users  # noqa: E501

        Delete testers from distribution group in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_bulk_delete_users(body, org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupUserRequest body: The list of members to add (required)
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_bulk_delete_users_with_http_info(body, org_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_bulk_delete_users_with_http_info(body, org_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_bulk_delete_users_with_http_info(self, body, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_bulk_delete_users  # noqa: E501

        Delete testers from distribution group in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_bulk_delete_users_with_http_info(body, org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupUserRequest body: The list of members to add (required)
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_bulk_delete_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distribution_groups_bulk_delete_users`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distribution_groups_bulk_delete_users`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_bulk_delete_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_create(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """distribution_groups_create  # noqa: E501

        Creates a new distribution group and returns it to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_create(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupRequest body: The attributes to update for the distribution group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DistributionGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_create_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_create_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_create_with_http_info(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """distribution_groups_create  # noqa: E501

        Creates a new distribution group and returns it to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_create_with_http_info(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupRequest body: The attributes to update for the distribution group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DistributionGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distribution_groups_create`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distribution_groups_create`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distribution_groups_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistributionGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_create_for_org(self, body, org_name, **kwargs):  # noqa: E501
        """distribution_groups_create_for_org  # noqa: E501

        Creates a disribution goup which can be shared across apps under an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_create_for_org(body, org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupRequest body: The attributes to update for the distribution group (required)
        :param str org_name: The organization's name (required)
        :return: DistributionGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_create_for_org_with_http_info(body, org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_create_for_org_with_http_info(body, org_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_create_for_org_with_http_info(self, body, org_name, **kwargs):  # noqa: E501
        """distribution_groups_create_for_org  # noqa: E501

        Creates a disribution goup which can be shared across apps under an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_create_for_org_with_http_info(body, org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupRequest body: The attributes to update for the distribution group (required)
        :param str org_name: The organization's name (required)
        :return: DistributionGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_create_for_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distribution_groups_create_for_org`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distribution_groups_create_for_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistributionGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_delete(self, app_name, owner_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_delete  # noqa: E501

        Deletes a distribution group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_delete(app_name, owner_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: The name of the application (required)
        :param str owner_name: The name of the owner (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_delete_with_http_info(app_name, owner_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_delete_with_http_info(app_name, owner_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_delete_with_http_info(self, app_name, owner_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_delete  # noqa: E501

        Deletes a distribution group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_delete_with_http_info(app_name, owner_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: The name of the application (required)
        :param str owner_name: The name of the owner (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'owner_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distribution_groups_delete`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distribution_groups_delete`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_delete_for_org(self, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_delete_for_org  # noqa: E501

        Deletes a single distribution group from an org with a given distribution group name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_delete_for_org(org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_delete_for_org_with_http_info(org_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_delete_for_org_with_http_info(org_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_delete_for_org_with_http_info(self, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_delete_for_org  # noqa: E501

        Deletes a single distribution group from an org with a given distribution group name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_delete_for_org_with_http_info(org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_delete_for_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distribution_groups_delete_for_org`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_delete_for_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_details_for_org(self, org_name, **kwargs):  # noqa: E501
        """distribution_groups_details_for_org  # noqa: E501

        Returns a list of distribution groups with details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_details_for_org(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param float apps_limit: The max number of apps to include in the response
        :return: list[OrgDistributionGroupDetailsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_details_for_org_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_details_for_org_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_details_for_org_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """distribution_groups_details_for_org  # noqa: E501

        Returns a list of distribution groups with details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_details_for_org_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param float apps_limit: The max number of apps to include in the response
        :return: list[OrgDistributionGroupDetailsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'apps_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_details_for_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distribution_groups_details_for_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []
        if 'apps_limit' in params:
            query_params.append(('apps_limit', params['apps_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups_details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrgDistributionGroupDetailsResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_get(self, owner_name, app_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_get  # noqa: E501

        Returns a single distribution group for a given distribution group name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_get(owner_name, app_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: DistributionGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_get_with_http_info(owner_name, app_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_get_with_http_info(owner_name, app_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_get_with_http_info(self, owner_name, app_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_get  # noqa: E501

        Returns a single distribution group for a given distribution group name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_get_with_http_info(owner_name, app_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: DistributionGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distribution_groups_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distribution_groups_get`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistributionGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_get_apps(self, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_get_apps  # noqa: E501

        Get apps from a distribution group in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_get_apps(org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: list[OrgDistributionGroupAppResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_get_apps_with_http_info(org_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_get_apps_with_http_info(org_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_get_apps_with_http_info(self, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_get_apps  # noqa: E501

        Get apps from a distribution group in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_get_apps_with_http_info(org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: list[OrgDistributionGroupAppResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_get_apps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distribution_groups_get_apps`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_get_apps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrgDistributionGroupAppResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_get_for_org(self, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_get_for_org  # noqa: E501

        Returns a single distribution group in org for a given distribution group name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_get_for_org(org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: DistributionGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_get_for_org_with_http_info(org_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_get_for_org_with_http_info(org_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_get_for_org_with_http_info(self, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_get_for_org  # noqa: E501

        Returns a single distribution group in org for a given distribution group name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_get_for_org_with_http_info(org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: DistributionGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_get_for_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distribution_groups_get_for_org`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_get_for_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistributionGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_list(self, owner_name, app_name, **kwargs):  # noqa: E501
        """distribution_groups_list  # noqa: E501

        Returns a list of distribution groups in the app specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_list(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[DistributionGroupResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_list_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """distribution_groups_list  # noqa: E501

        Returns a list of distribution groups in the app specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_list_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[DistributionGroupResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distribution_groups_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distribution_groups_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistributionGroupResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_list_all_testers_for_org(self, org_name, **kwargs):  # noqa: E501
        """distribution_groups_list_all_testers_for_org  # noqa: E501

        Returns a unique list of users including the whole organization members plus testers in any shared group of that org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_list_all_testers_for_org(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: list[DistributionGroupTesterGetResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_list_all_testers_for_org_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_list_all_testers_for_org_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_list_all_testers_for_org_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """distribution_groups_list_all_testers_for_org  # noqa: E501

        Returns a unique list of users including the whole organization members plus testers in any shared group of that org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_list_all_testers_for_org_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: list[DistributionGroupTesterGetResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_list_all_testers_for_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distribution_groups_list_all_testers_for_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/testers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistributionGroupTesterGetResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_list_for_org(self, org_name, **kwargs):  # noqa: E501
        """distribution_groups_list_for_org  # noqa: E501

        Returns a list of distribution groups in the org specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_list_for_org(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: list[DistributionGroupResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_list_for_org_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_list_for_org_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_list_for_org_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """distribution_groups_list_for_org  # noqa: E501

        Returns a list of distribution groups in the org specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_list_for_org_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: list[DistributionGroupResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_list_for_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distribution_groups_list_for_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistributionGroupResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_list_users(self, owner_name, app_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_list_users  # noqa: E501

        Returns a list of member details in the distribution group specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_list_users(owner_name, app_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :param bool exclude_pending_invitations: Whether to exclude pending invitations in the response
        :return: list[DistributionGroupUserGetResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_list_users_with_http_info(owner_name, app_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_list_users_with_http_info(owner_name, app_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_list_users_with_http_info(self, owner_name, app_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_list_users  # noqa: E501

        Returns a list of member details in the distribution group specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_list_users_with_http_info(owner_name, app_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :param bool exclude_pending_invitations: Whether to exclude pending invitations in the response
        :return: list[DistributionGroupUserGetResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'distribution_group_name', 'exclude_pending_invitations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_list_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distribution_groups_list_users`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distribution_groups_list_users`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_list_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []
        if 'exclude_pending_invitations' in params:
            query_params.append(('exclude_pending_invitations', params['exclude_pending_invitations']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistributionGroupUserGetResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_list_users_for_org(self, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_list_users_for_org  # noqa: E501

        Returns a list of member in the distribution group specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_list_users_for_org(org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: list[DistributionGroupUserGetResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_list_users_for_org_with_http_info(org_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_list_users_for_org_with_http_info(org_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_list_users_for_org_with_http_info(self, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_list_users_for_org  # noqa: E501

        Returns a list of member in the distribution group specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_list_users_for_org_with_http_info(org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: list[DistributionGroupUserGetResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_list_users_for_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distribution_groups_list_users_for_org`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_list_users_for_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistributionGroupUserGetResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_patch_for_org(self, body, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_patch_for_org  # noqa: E501

        Update one given distribution group name in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_patch_for_org(body, org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupPatchRequest body: The attributes to update for the distribution group (required)
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: DistributionGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_patch_for_org_with_http_info(body, org_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_patch_for_org_with_http_info(body, org_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_patch_for_org_with_http_info(self, body, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_patch_for_org  # noqa: E501

        Update one given distribution group name in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_patch_for_org_with_http_info(body, org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupPatchRequest body: The attributes to update for the distribution group (required)
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: DistributionGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_patch_for_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distribution_groups_patch_for_org`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distribution_groups_patch_for_org`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_patch_for_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistributionGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_remove_user(self, body, owner_name, app_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_remove_user  # noqa: E501

        Remove the users from the distribution group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_remove_user(body, owner_name, app_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupUserRequest body: The list of members to add (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: list[DistributionGroupUserDeleteResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_remove_user_with_http_info(body, owner_name, app_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_remove_user_with_http_info(body, owner_name, app_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_remove_user_with_http_info(self, body, owner_name, app_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_remove_user  # noqa: E501

        Remove the users from the distribution group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_remove_user_with_http_info(body, owner_name, app_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupUserRequest body: The list of members to add (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: list[DistributionGroupUserDeleteResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner_name', 'app_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_remove_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distribution_groups_remove_user`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distribution_groups_remove_user`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distribution_groups_remove_user`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_remove_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistributionGroupUserDeleteResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_resend_invite(self, body, owner_name, app_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_resend_invite  # noqa: E501

        Resend distribution group app invite notification to previously invited testers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_resend_invite(body, owner_name, app_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupUserRequest body: The list of members to add (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_resend_invite_with_http_info(body, owner_name, app_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_resend_invite_with_http_info(body, owner_name, app_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_resend_invite_with_http_info(self, body, owner_name, app_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_resend_invite  # noqa: E501

        Resend distribution group app invite notification to previously invited testers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_resend_invite_with_http_info(body, owner_name, app_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupUserRequest body: The list of members to add (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner_name', 'app_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_resend_invite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distribution_groups_resend_invite`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distribution_groups_resend_invite`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distribution_groups_resend_invite`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_resend_invite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_resend_shared_invite(self, body, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_resend_shared_invite  # noqa: E501

        Resend shared distribution group invite notification to previously invited testers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_resend_shared_invite(body, org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupUserRequest body: The list of members to add (required)
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_resend_shared_invite_with_http_info(body, org_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_resend_shared_invite_with_http_info(body, org_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_resend_shared_invite_with_http_info(self, body, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_resend_shared_invite  # noqa: E501

        Resend shared distribution group invite notification to previously invited testers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_resend_shared_invite_with_http_info(body, org_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupUserRequest body: The list of members to add (required)
        :param str org_name: The organization's name (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_resend_shared_invite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distribution_groups_resend_shared_invite`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distribution_groups_resend_shared_invite`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_resend_shared_invite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribution_groups_update(self, body, owner_name, app_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_update  # noqa: E501

        Updates the attributes of distribution group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_update(body, owner_name, app_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupPatchRequest body: The attributes to update for the distribution group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: DistributionGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distribution_groups_update_with_http_info(body, owner_name, app_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distribution_groups_update_with_http_info(body, owner_name, app_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distribution_groups_update_with_http_info(self, body, owner_name, app_name, distribution_group_name, **kwargs):  # noqa: E501
        """distribution_groups_update  # noqa: E501

        Updates the attributes of distribution group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distribution_groups_update_with_http_info(body, owner_name, app_name, distribution_group_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionGroupPatchRequest body: The attributes to update for the distribution group (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str distribution_group_name: The name of the distribution group (required)
        :return: DistributionGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner_name', 'app_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_groups_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distribution_groups_update`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distribution_groups_update`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distribution_groups_update`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distribution_groups_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistributionGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invitations_sent(self, **kwargs):  # noqa: E501
        """invitations_sent  # noqa: E501

        Returns all invitations sent by the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invitations_sent(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[GDPRInvitationDetailResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invitations_sent_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.invitations_sent_with_http_info(**kwargs)  # noqa: E501
            return data

    def invitations_sent_with_http_info(self, **kwargs):  # noqa: E501
        """invitations_sent  # noqa: E501

        Returns all invitations sent by the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invitations_sent_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[GDPRInvitationDetailResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invitations_sent" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/invitations/sent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GDPRInvitationDetailResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def org_invitations(self, org_name, email, **kwargs):  # noqa: E501
        """org_invitations  # noqa: E501

        Removes a user's invitation to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_invitations(org_name, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str email: The email address of the user to send the password reset mail to. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.org_invitations_with_http_info(org_name, email, **kwargs)  # noqa: E501
        else:
            (data) = self.org_invitations_with_http_info(org_name, email, **kwargs)  # noqa: E501
            return data

    def org_invitations_with_http_info(self, org_name, email, **kwargs):  # noqa: E501
        """org_invitations  # noqa: E501

        Removes a user's invitation to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_invitations_with_http_info(org_name, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str email: The email address of the user to send the password reset mail to. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method org_invitations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `org_invitations`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `org_invitations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'email' in params:
            path_params['email'] = params['email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/invitations/{email}/revoke', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def org_invitations_accept(self, invitation_token, **kwargs):  # noqa: E501
        """org_invitations_accept  # noqa: E501

        Accepts a pending organization invitation for the specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_invitations_accept(invitation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_token: The app invitation token that was sent to the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.org_invitations_accept_with_http_info(invitation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.org_invitations_accept_with_http_info(invitation_token, **kwargs)  # noqa: E501
            return data

    def org_invitations_accept_with_http_info(self, invitation_token, **kwargs):  # noqa: E501
        """org_invitations_accept  # noqa: E501

        Accepts a pending organization invitation for the specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_invitations_accept_with_http_info(invitation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_token: The app invitation token that was sent to the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method org_invitations_accept" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_token' is set
        if ('invitation_token' not in params or
                params['invitation_token'] is None):
            raise ValueError("Missing the required parameter `invitation_token` when calling `org_invitations_accept`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_token' in params:
            path_params['invitation_token'] = params['invitation_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/user/invitations/orgs/{invitation_token}/accept', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def org_invitations_create(self, org_name, **kwargs):  # noqa: E501
        """org_invitations_create  # noqa: E501

        Invites a new or existing user to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_invitations_create(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param UserEmailRequest body: The email of the user to invite
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.org_invitations_create_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.org_invitations_create_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def org_invitations_create_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """org_invitations_create  # noqa: E501

        Invites a new or existing user to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_invitations_create_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param UserEmailRequest body: The email of the user to invite
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method org_invitations_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `org_invitations_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/invitations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def org_invitations_delete(self, org_name, **kwargs):  # noqa: E501
        """org_invitations_delete  # noqa: E501

        Removes a user's invitation to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_invitations_delete(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param UserEmailRequest body: The email of the user whose invitation should be removed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.org_invitations_delete_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.org_invitations_delete_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def org_invitations_delete_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """org_invitations_delete  # noqa: E501

        Removes a user's invitation to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_invitations_delete_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param UserEmailRequest body: The email of the user whose invitation should be removed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method org_invitations_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `org_invitations_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/invitations', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def org_invitations_list_pending(self, org_name, **kwargs):  # noqa: E501
        """org_invitations_list_pending  # noqa: E501

        Gets the pending invitations for the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_invitations_list_pending(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: list[OrganizationInvitationSimpleDetailResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.org_invitations_list_pending_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.org_invitations_list_pending_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def org_invitations_list_pending_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """org_invitations_list_pending  # noqa: E501

        Gets the pending invitations for the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_invitations_list_pending_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: list[OrganizationInvitationSimpleDetailResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method org_invitations_list_pending" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `org_invitations_list_pending`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/invitations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrganizationInvitationSimpleDetailResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def org_invitations_reject(self, invitation_token, **kwargs):  # noqa: E501
        """org_invitations_reject  # noqa: E501

        Rejects a pending organization invitation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_invitations_reject(invitation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_token: The app invitation token that was sent to the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.org_invitations_reject_with_http_info(invitation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.org_invitations_reject_with_http_info(invitation_token, **kwargs)  # noqa: E501
            return data

    def org_invitations_reject_with_http_info(self, invitation_token, **kwargs):  # noqa: E501
        """org_invitations_reject  # noqa: E501

        Rejects a pending organization invitation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_invitations_reject_with_http_info(invitation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_token: The app invitation token that was sent to the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method org_invitations_reject" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_token' is set
        if ('invitation_token' not in params or
                params['invitation_token'] is None):
            raise ValueError("Missing the required parameter `invitation_token` when calling `org_invitations_reject`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_token' in params:
            path_params['invitation_token'] = params['invitation_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/user/invitations/orgs/{invitation_token}/reject', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def org_invitations_send_new_invitation(self, org_name, email, **kwargs):  # noqa: E501
        """org_invitations_send_new_invitation  # noqa: E501

        Cancels an existing organization invitation for the user and sends a new one  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_invitations_send_new_invitation(org_name, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str email: The email address of the user to send the password reset mail to. (required)
        :param AddUserAsRoleRequest body: The role of the user to be added
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.org_invitations_send_new_invitation_with_http_info(org_name, email, **kwargs)  # noqa: E501
        else:
            (data) = self.org_invitations_send_new_invitation_with_http_info(org_name, email, **kwargs)  # noqa: E501
            return data

    def org_invitations_send_new_invitation_with_http_info(self, org_name, email, **kwargs):  # noqa: E501
        """org_invitations_send_new_invitation  # noqa: E501

        Cancels an existing organization invitation for the user and sends a new one  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_invitations_send_new_invitation_with_http_info(org_name, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str email: The email address of the user to send the password reset mail to. (required)
        :param AddUserAsRoleRequest body: The role of the user to be added
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'email', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method org_invitations_send_new_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `org_invitations_send_new_invitation`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `org_invitations_send_new_invitation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'email' in params:
            path_params['email'] = params['email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/invitations/{email}/resend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def org_invitations_update(self, body, org_name, email, **kwargs):  # noqa: E501
        """org_invitations_update  # noqa: E501

        Allows the role of an invited user to be changed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_invitations_update(body, org_name, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrganizationUserPatchRequest body: The new role of the user (required)
        :param str org_name: The organization's name (required)
        :param str email: The email address of the user to send the password reset mail to. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.org_invitations_update_with_http_info(body, org_name, email, **kwargs)  # noqa: E501
        else:
            (data) = self.org_invitations_update_with_http_info(body, org_name, email, **kwargs)  # noqa: E501
            return data

    def org_invitations_update_with_http_info(self, body, org_name, email, **kwargs):  # noqa: E501
        """org_invitations_update  # noqa: E501

        Allows the role of an invited user to be changed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_invitations_update_with_http_info(body, org_name, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrganizationUserPatchRequest body: The new role of the user (required)
        :param str org_name: The organization's name (required)
        :param str email: The email address of the user to send the password reset mail to. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org_name', 'email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method org_invitations_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `org_invitations_update`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `org_invitations_update`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `org_invitations_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'email' in params:
            path_params['email'] = params['email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/invitations/{email}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_add_aad_groups(self, body, org_name, **kwargs):  # noqa: E501
        """organization_add_aad_groups  # noqa: E501

        Adds aad groups to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_add_aad_groups(body, org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AADGroup body: the AAD group added (required)
        :param str org_name: The organization's name (required)
        :return: AddAADGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_add_aad_groups_with_http_info(body, org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_add_aad_groups_with_http_info(body, org_name, **kwargs)  # noqa: E501
            return data

    def organization_add_aad_groups_with_http_info(self, body, org_name, **kwargs):  # noqa: E501
        """organization_add_aad_groups  # noqa: E501

        Adds aad groups to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_add_aad_groups_with_http_info(body, org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AADGroup body: the AAD group added (required)
        :param str org_name: The organization's name (required)
        :return: AddAADGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_add_aad_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `organization_add_aad_groups`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `organization_add_aad_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/aad_groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddAADGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_delete_aad_group(self, org_name, aad_group_id, **kwargs):  # noqa: E501
        """organization_delete_aad_group  # noqa: E501

        Delete already added aad group from the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_delete_aad_group(org_name, aad_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str aad_group_id: The unique ID (UUID) of the aad_group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_delete_aad_group_with_http_info(org_name, aad_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_delete_aad_group_with_http_info(org_name, aad_group_id, **kwargs)  # noqa: E501
            return data

    def organization_delete_aad_group_with_http_info(self, org_name, aad_group_id, **kwargs):  # noqa: E501
        """organization_delete_aad_group  # noqa: E501

        Delete already added aad group from the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_delete_aad_group_with_http_info(org_name, aad_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str aad_group_id: The unique ID (UUID) of the aad_group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'aad_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_delete_aad_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `organization_delete_aad_group`")  # noqa: E501
        # verify the required parameter 'aad_group_id' is set
        if ('aad_group_id' not in params or
                params['aad_group_id'] is None):
            raise ValueError("Missing the required parameter `aad_group_id` when calling `organization_delete_aad_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'aad_group_id' in params:
            path_params['aad_group_id'] = params['aad_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/aad_groups/{aad_group_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_delete_avatar(self, org_name, **kwargs):  # noqa: E501
        """organization_delete_avatar  # noqa: E501

        Deletes the uploaded organization avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_delete_avatar(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: OrganizationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_delete_avatar_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_delete_avatar_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def organization_delete_avatar_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """organization_delete_avatar  # noqa: E501

        Deletes the uploaded organization avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_delete_avatar_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: OrganizationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_delete_avatar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `organization_delete_avatar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/avatar', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_update_aad_groups(self, body, org_name, aad_group_id, **kwargs):  # noqa: E501
        """organization_update_aad_groups  # noqa: E501

        Allows the role of an aad_group to be changed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_update_aad_groups(body, org_name, aad_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrganizationAadGroupPatchRequest body: The new role of the user (required)
        :param str org_name: The organization's name (required)
        :param str aad_group_id: The unique ID (UUID) of the aad_group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_update_aad_groups_with_http_info(body, org_name, aad_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_update_aad_groups_with_http_info(body, org_name, aad_group_id, **kwargs)  # noqa: E501
            return data

    def organization_update_aad_groups_with_http_info(self, body, org_name, aad_group_id, **kwargs):  # noqa: E501
        """organization_update_aad_groups  # noqa: E501

        Allows the role of an aad_group to be changed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_update_aad_groups_with_http_info(body, org_name, aad_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrganizationAadGroupPatchRequest body: The new role of the user (required)
        :param str org_name: The organization's name (required)
        :param str aad_group_id: The unique ID (UUID) of the aad_group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org_name', 'aad_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_update_aad_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `organization_update_aad_groups`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `organization_update_aad_groups`")  # noqa: E501
        # verify the required parameter 'aad_group_id' is set
        if ('aad_group_id' not in params or
                params['aad_group_id'] is None):
            raise ValueError("Missing the required parameter `aad_group_id` when calling `organization_update_aad_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'aad_group_id' in params:
            path_params['aad_group_id'] = params['aad_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/aad_groups/{aad_group_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_update_avatar(self, org_name, **kwargs):  # noqa: E501
        """organization_update_avatar  # noqa: E501

        Sets the organization avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_update_avatar(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param file avatar:
        :return: OrganizationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_update_avatar_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_update_avatar_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def organization_update_avatar_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """organization_update_avatar  # noqa: E501

        Sets the organization avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_update_avatar_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param file avatar:
        :return: OrganizationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'avatar']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_update_avatar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `organization_update_avatar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'avatar' in params:
            local_var_files['avatar'] = params['avatar']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/avatar', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_create_or_update(self, body, **kwargs):  # noqa: E501
        """organizations_create_or_update  # noqa: E501

        Creates a new organization and returns it to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_create_or_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrganizationRequest body: The organization data (required)
        :return: OrganizationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_create_or_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_create_or_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def organizations_create_or_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """organizations_create_or_update  # noqa: E501

        Creates a new organization and returns it to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_create_or_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrganizationRequest body: The organization data (required)
        :return: OrganizationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_create_or_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `organizations_create_or_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_delete(self, org_name, **kwargs):  # noqa: E501
        """organizations_delete  # noqa: E501

        Deletes a single organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_delete(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_delete_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_delete_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def organizations_delete_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """organizations_delete  # noqa: E501

        Deletes a single organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_delete_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `organizations_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_get(self, org_name, **kwargs):  # noqa: E501
        """organizations_get  # noqa: E501

        Returns the details of a single organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_get(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: OrganizationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_get_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_get_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def organizations_get_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """organizations_get  # noqa: E501

        Returns the details of a single organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_get_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: OrganizationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `organizations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_list(self, **kwargs):  # noqa: E501
        """organizations_list  # noqa: E501

        Returns a list of organizations the requesting user has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.organizations_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def organizations_list_with_http_info(self, **kwargs):  # noqa: E501
        """organizations_list  # noqa: E501

        Returns a list of organizations the requesting user has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_list_administered(self, **kwargs):  # noqa: E501
        """organizations_list_administered  # noqa: E501

        Returns a list organizations in which the requesting user is an admin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_list_administered(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AdministeredOrgsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_list_administered_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.organizations_list_administered_with_http_info(**kwargs)  # noqa: E501
            return data

    def organizations_list_administered_with_http_info(self, **kwargs):  # noqa: E501
        """organizations_list_administered  # noqa: E501

        Returns a list organizations in which the requesting user is an admin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_list_administered_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AdministeredOrgsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_list_administered" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/administeredOrgs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdministeredOrgsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_update(self, body, org_name, **kwargs):  # noqa: E501
        """organizations_update  # noqa: E501

        Returns a list of organizations the requesting user has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_update(body, org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrganizationPatchRequest body: The data for the org (required)
        :param str org_name: The organization's name (required)
        :return: OrganizationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_update_with_http_info(body, org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_update_with_http_info(body, org_name, **kwargs)  # noqa: E501
            return data

    def organizations_update_with_http_info(self, body, org_name, **kwargs):  # noqa: E501
        """organizations_update  # noqa: E501

        Returns a list of organizations the requesting user has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_update_with_http_info(body, org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrganizationPatchRequest body: The data for the org (required)
        :param str org_name: The organization's name (required)
        :return: OrganizationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `organizations_update`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `organizations_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sharedconnection_connections(self, **kwargs):  # noqa: E501
        """sharedconnection_connections  # noqa: E501

        Gets all service connections of the service type for GDPR export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sharedconnection_connections(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SharedConnectionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sharedconnection_connections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sharedconnection_connections_with_http_info(**kwargs)  # noqa: E501
            return data

    def sharedconnection_connections_with_http_info(self, **kwargs):  # noqa: E501
        """sharedconnection_connections  # noqa: E501

        Gets all service connections of the service type for GDPR export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sharedconnection_connections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SharedConnectionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sharedconnection_connections" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/user/export/serviceConnections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SharedConnectionResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_add_app(self, body, org_name, team_name, **kwargs):  # noqa: E501
        """teams_add_app  # noqa: E501

        Adds an app to a team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_add_app(body, org_name, team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppAddRequest body: The name of the app to be added to the team. The app has to be owned by the organization. (required)
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :return: AppWithTeamPermissionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.teams_add_app_with_http_info(body, org_name, team_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_add_app_with_http_info(body, org_name, team_name, **kwargs)  # noqa: E501
            return data

    def teams_add_app_with_http_info(self, body, org_name, team_name, **kwargs):  # noqa: E501
        """teams_add_app  # noqa: E501

        Adds an app to a team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_add_app_with_http_info(body, org_name, team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppAddRequest body: The name of the app to be added to the team. The app has to be owned by the organization. (required)
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :return: AppWithTeamPermissionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org_name', 'team_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_add_app" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `teams_add_app`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_add_app`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_add_app`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}/apps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppWithTeamPermissionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_add_user(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_add_user  # noqa: E501

        Adds a new user to a team that is owned by an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_add_user(org_name, team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :param UserEmailRequest body: The email of the user to add to the team
        :return: TeamUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.teams_add_user_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_add_user_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
            return data

    def teams_add_user_with_http_info(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_add_user  # noqa: E501

        Adds a new user to a team that is owned by an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_add_user_with_http_info(org_name, team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :param UserEmailRequest body: The email of the user to add to the team
        :return: TeamUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_add_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_add_user`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_add_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamUserResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_create_team(self, org_name, **kwargs):  # noqa: E501
        """teams_create_team  # noqa: E501

        Creates a team and returns it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_create_team(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param TeamRequest body: The information used to create the team
        :return: list[TeamResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.teams_create_team_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_create_team_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def teams_create_team_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """teams_create_team  # noqa: E501

        Creates a team and returns it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_create_team_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param TeamRequest body: The information used to create the team
        :return: list[TeamResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_create_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_create_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TeamResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_delete(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_delete  # noqa: E501

        Deletes a single team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_delete(org_name, team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.teams_delete_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_delete_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
            return data

    def teams_delete_with_http_info(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_delete  # noqa: E501

        Deletes a single team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_delete_with_http_info(org_name, team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_delete`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_get_team(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_get_team  # noqa: E501

        Returns the details of a single team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_get_team(org_name, team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :return: TeamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.teams_get_team_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_get_team_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
            return data

    def teams_get_team_with_http_info(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_get_team  # noqa: E501

        Returns the details of a single team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_get_team_with_http_info(org_name, team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :return: TeamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_get_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_get_team`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_get_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_get_users(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_get_users  # noqa: E501

        Returns the users of a team which is owned by an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_get_users(org_name, team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :return: TeamUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.teams_get_users_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_get_users_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
            return data

    def teams_get_users_with_http_info(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_get_users  # noqa: E501

        Returns the users of a team which is owned by an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_get_users_with_http_info(org_name, team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :return: TeamUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_get_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_get_users`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_get_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamUserResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_list_all(self, org_name, **kwargs):  # noqa: E501
        """teams_list_all  # noqa: E501

        Returns the list of all teams in this org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_list_all(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: list[TeamResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.teams_list_all_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_list_all_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def teams_list_all_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """teams_list_all  # noqa: E501

        Returns the list of all teams in this org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_list_all_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: list[TeamResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_list_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_list_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TeamResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_list_apps(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_list_apps  # noqa: E501

        Returns the apps a team has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_list_apps(org_name, team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :return: list[AppWithTeamPermissionsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.teams_list_apps_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_list_apps_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
            return data

    def teams_list_apps_with_http_info(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_list_apps  # noqa: E501

        Returns the apps a team has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_list_apps_with_http_info(org_name, team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :return: list[AppWithTeamPermissionsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_list_apps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_list_apps`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_list_apps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}/apps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AppWithTeamPermissionsResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_remove_app(self, org_name, team_name, app_name, **kwargs):  # noqa: E501
        """teams_remove_app  # noqa: E501

        Removes an app from a team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_remove_app(org_name, team_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.teams_remove_app_with_http_info(org_name, team_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_remove_app_with_http_info(org_name, team_name, app_name, **kwargs)  # noqa: E501
            return data

    def teams_remove_app_with_http_info(self, org_name, team_name, app_name, **kwargs):  # noqa: E501
        """teams_remove_app  # noqa: E501

        Removes an app from a team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_remove_app_with_http_info(org_name, team_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_remove_app" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_remove_app`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_remove_app`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `teams_remove_app`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_remove_user(self, org_name, team_name, user_name, **kwargs):  # noqa: E501
        """teams_remove_user  # noqa: E501

        Removes a user from a team that is owned by an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_remove_user(org_name, team_name, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :param str user_name: The slug name of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.teams_remove_user_with_http_info(org_name, team_name, user_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_remove_user_with_http_info(org_name, team_name, user_name, **kwargs)  # noqa: E501
            return data

    def teams_remove_user_with_http_info(self, org_name, team_name, user_name, **kwargs):  # noqa: E501
        """teams_remove_user  # noqa: E501

        Removes a user from a team that is owned by an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_remove_user_with_http_info(org_name, team_name, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :param str user_name: The slug name of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name', 'user_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_remove_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_remove_user`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_remove_user`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `teams_remove_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501
        if 'user_name' in params:
            path_params['user_name'] = params['user_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}/users/{user_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_update(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_update  # noqa: E501

        Updates a single team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_update(org_name, team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :param TeamRequest body: The information used to create the team
        :return: TeamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.teams_update_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_update_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
            return data

    def teams_update_with_http_info(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_update  # noqa: E501

        Updates a single team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_update_with_http_info(org_name, team_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :param TeamRequest body: The information used to create the team
        :return: TeamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_update`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_update_permissions(self, org_name, team_name, app_name, **kwargs):  # noqa: E501
        """teams_update_permissions  # noqa: E501

        Updates the permissions the team has to the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_update_permissions(org_name, team_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :param str app_name: The name of the application (required)
        :param TeamAppUpdateRequest body:
        :return: AppWithTeamPermissionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.teams_update_permissions_with_http_info(org_name, team_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_update_permissions_with_http_info(org_name, team_name, app_name, **kwargs)  # noqa: E501
            return data

    def teams_update_permissions_with_http_info(self, org_name, team_name, app_name, **kwargs):  # noqa: E501
        """teams_update_permissions  # noqa: E501

        Updates the permissions the team has to the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.teams_update_permissions_with_http_info(org_name, team_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str team_name: The team's name (required)
        :param str app_name: The name of the application (required)
        :param TeamAppUpdateRequest body:
        :return: AppWithTeamPermissionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_update_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_update_permissions`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_update_permissions`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `teams_update_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppWithTeamPermissionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_get(self, **kwargs):  # noqa: E501
        """users_get  # noqa: E501

        Returns the user profile data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: UserProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.users_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def users_get_with_http_info(self, **kwargs):  # noqa: E501
        """users_get  # noqa: E501

        Returns the user profile data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: UserProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserProfileResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_get_for_org(self, org_name, user_name, **kwargs):  # noqa: E501
        """users_get_for_org  # noqa: E501

        Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_get_for_org(org_name, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str user_name: The slug name of the user (required)
        :return: OrganizationUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_get_for_org_with_http_info(org_name, user_name, **kwargs)  # noqa: E501
        else:
            (data) = self.users_get_for_org_with_http_info(org_name, user_name, **kwargs)  # noqa: E501
            return data

    def users_get_for_org_with_http_info(self, org_name, user_name, **kwargs):  # noqa: E501
        """users_get_for_org  # noqa: E501

        Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_get_for_org_with_http_info(org_name, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str user_name: The slug name of the user (required)
        :return: OrganizationUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'user_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_get_for_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `users_get_for_org`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `users_get_for_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'user_name' in params:
            path_params['user_name'] = params['user_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/users/{user_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationUserResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_list(self, owner_name, app_name, **kwargs):  # noqa: E501
        """users_list  # noqa: E501

        Returns the users associated with the app specified with the given app name which belongs to the given owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_list(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[UserProfileResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.users_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def users_list_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """users_list  # noqa: E501

        Returns the users associated with the app specified with the given app name which belongs to the given owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_list_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[UserProfileResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `users_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `users_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserProfileResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_list_for_org(self, org_name, **kwargs):  # noqa: E501
        """users_list_for_org  # noqa: E501

        Returns a list of users that belong to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_list_for_org(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: list[OrganizationUserResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_list_for_org_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.users_list_for_org_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def users_list_for_org_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """users_list_for_org  # noqa: E501

        Returns a list of users that belong to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_list_for_org_with_http_info(org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :return: list[OrganizationUserResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_list_for_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `users_list_for_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrganizationUserResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_remove_from_org(self, org_name, user_name, **kwargs):  # noqa: E501
        """users_remove_from_org  # noqa: E501

        Removes a user from an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_remove_from_org(org_name, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str user_name: The slug name of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_remove_from_org_with_http_info(org_name, user_name, **kwargs)  # noqa: E501
        else:
            (data) = self.users_remove_from_org_with_http_info(org_name, user_name, **kwargs)  # noqa: E501
            return data

    def users_remove_from_org_with_http_info(self, org_name, user_name, **kwargs):  # noqa: E501
        """users_remove_from_org  # noqa: E501

        Removes a user from an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_remove_from_org_with_http_info(org_name, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: The organization's name (required)
        :param str user_name: The slug name of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'user_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_remove_from_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `users_remove_from_org`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `users_remove_from_org`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'user_name' in params:
            path_params['user_name'] = params['user_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/users/{user_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_update(self, body, **kwargs):  # noqa: E501
        """users_update  # noqa: E501

        Updates the user profile and returns the updated user data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserUpdateRequest body: The data for the created user (required)
        :return: UserProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.users_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def users_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """users_update  # noqa: E501

        Updates the user profile and returns the updated user data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserUpdateRequest body: The data for the created user (required)
        :return: UserProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `users_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/user', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserProfileResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_update_org_role(self, body, org_name, user_name, **kwargs):  # noqa: E501
        """users_update_org_role  # noqa: E501

        Updates the given organization user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_update_org_role(body, org_name, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrganizationUserPatchRequest body: (required)
        :param str org_name: The organization's name (required)
        :param str user_name: The slug name of the user (required)
        :return: OrganizationUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_update_org_role_with_http_info(body, org_name, user_name, **kwargs)  # noqa: E501
        else:
            (data) = self.users_update_org_role_with_http_info(body, org_name, user_name, **kwargs)  # noqa: E501
            return data

    def users_update_org_role_with_http_info(self, body, org_name, user_name, **kwargs):  # noqa: E501
        """users_update_org_role  # noqa: E501

        Updates the given organization user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_update_org_role_with_http_info(body, org_name, user_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrganizationUserPatchRequest body: (required)
        :param str org_name: The organization's name (required)
        :param str user_name: The slug name of the user (required)
        :return: OrganizationUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org_name', 'user_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_update_org_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `users_update_org_role`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `users_update_org_role`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `users_update_org_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'user_name' in params:
            path_params['user_name'] = params['user_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/users/{user_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationUserResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
