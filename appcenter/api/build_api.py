# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from appcenter.api_client import ApiClient


class BuildApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def branch_configurations_create(self, body, branch, owner_name, app_name, **kwargs):  # noqa: E501
        """branch_configurations_create  # noqa: E501

        Configures the branch for build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.branch_configurations_create(body, branch, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, BranchProperties) body: Parameters of the configuration (required)
        :param str branch: The branch name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: BranchConfigurationWithId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.branch_configurations_create_with_http_info(body, branch, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.branch_configurations_create_with_http_info(body, branch, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def branch_configurations_create_with_http_info(self, body, branch, owner_name, app_name, **kwargs):  # noqa: E501
        """branch_configurations_create  # noqa: E501

        Configures the branch for build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.branch_configurations_create_with_http_info(body, branch, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, BranchProperties) body: Parameters of the configuration (required)
        :param str branch: The branch name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: BranchConfigurationWithId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'branch', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method branch_configurations_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `branch_configurations_create`")  # noqa: E501
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `branch_configurations_create`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `branch_configurations_create`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `branch_configurations_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BranchConfigurationWithId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def branch_configurations_delete(self, branch, owner_name, app_name, **kwargs):  # noqa: E501
        """branch_configurations_delete  # noqa: E501

        Deletes the branch build configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.branch_configurations_delete(branch, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str branch: The branch name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param object body:
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.branch_configurations_delete_with_http_info(branch, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.branch_configurations_delete_with_http_info(branch, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def branch_configurations_delete_with_http_info(self, branch, owner_name, app_name, **kwargs):  # noqa: E501
        """branch_configurations_delete  # noqa: E501

        Deletes the branch build configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.branch_configurations_delete_with_http_info(branch, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str branch: The branch name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param object body:
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['branch', 'owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method branch_configurations_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `branch_configurations_delete`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `branch_configurations_delete`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `branch_configurations_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def branch_configurations_get(self, branch, owner_name, app_name, **kwargs):  # noqa: E501
        """branch_configurations_get  # noqa: E501

        Gets the branch configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.branch_configurations_get(branch, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str branch: The branch name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: BranchConfigurationWithId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.branch_configurations_get_with_http_info(branch, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.branch_configurations_get_with_http_info(branch, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def branch_configurations_get_with_http_info(self, branch, owner_name, app_name, **kwargs):  # noqa: E501
        """branch_configurations_get  # noqa: E501

        Gets the branch configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.branch_configurations_get_with_http_info(branch, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str branch: The branch name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: BranchConfigurationWithId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['branch', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method branch_configurations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `branch_configurations_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `branch_configurations_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `branch_configurations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BranchConfigurationWithId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def branch_configurations_update(self, body, branch, owner_name, app_name, **kwargs):  # noqa: E501
        """branch_configurations_update  # noqa: E501

        Reconfigures the branch for build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.branch_configurations_update(body, branch, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, BranchProperties) body: Parameters of the configuration (required)
        :param str branch: The branch name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: BranchConfigurationWithId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.branch_configurations_update_with_http_info(body, branch, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.branch_configurations_update_with_http_info(body, branch, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def branch_configurations_update_with_http_info(self, body, branch, owner_name, app_name, **kwargs):  # noqa: E501
        """branch_configurations_update  # noqa: E501

        Reconfigures the branch for build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.branch_configurations_update_with_http_info(body, branch, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, BranchProperties) body: Parameters of the configuration (required)
        :param str branch: The branch name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: BranchConfigurationWithId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'branch', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method branch_configurations_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `branch_configurations_update`")  # noqa: E501
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `branch_configurations_update`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `branch_configurations_update`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `branch_configurations_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BranchConfigurationWithId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_create(self, branch, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_create  # noqa: E501

        Create a build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_create(branch, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str branch: The branch name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param BuildParams body: Parameters of the build
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_create_with_http_info(branch, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_create_with_http_info(branch, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def builds_create_with_http_info(self, branch, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_create  # noqa: E501

        Create a build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_create_with_http_info(branch, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str branch: The branch name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param BuildParams body: Parameters of the build
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['branch', 'owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `builds_create`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `builds_create`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `builds_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_distribute(self, body, build_id, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_distribute  # noqa: E501

        Distribute a build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_distribute(body, build_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionRequest body: The distribution details (required)
        :param int build_id: The build ID (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DistributionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_distribute_with_http_info(body, build_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_distribute_with_http_info(body, build_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def builds_distribute_with_http_info(self, body, build_id, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_distribute  # noqa: E501

        Distribute a build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_distribute_with_http_info(body, build_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionRequest body: The distribution details (required)
        :param int build_id: The build ID (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DistributionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'build_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_distribute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `builds_distribute`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `builds_distribute`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `builds_distribute`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `builds_distribute`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_id' in params:
            path_params['build_id'] = params['build_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/distribute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistributionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_get(self, build_id, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_get  # noqa: E501

        Returns the build detail for the given build ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_get(build_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int build_id: The build ID (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_get_with_http_info(build_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_get_with_http_info(build_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def builds_get_with_http_info(self, build_id, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_get  # noqa: E501

        Returns the build detail for the given build ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_get_with_http_info(build_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int build_id: The build ID (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `builds_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `builds_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `builds_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_id' in params:
            path_params['build_id'] = params['build_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_get_download_uri(self, build_id, download_type, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_get_download_uri  # noqa: E501

        Gets the download URI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_get_download_uri(build_id, download_type, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int build_id: The build ID (required)
        :param str download_type: The download type (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DownloadContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_get_download_uri_with_http_info(build_id, download_type, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_get_download_uri_with_http_info(build_id, download_type, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def builds_get_download_uri_with_http_info(self, build_id, download_type, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_get_download_uri  # noqa: E501

        Gets the download URI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_get_download_uri_with_http_info(build_id, download_type, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int build_id: The build ID (required)
        :param str download_type: The download type (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DownloadContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_id', 'download_type', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_get_download_uri" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `builds_get_download_uri`")  # noqa: E501
        # verify the required parameter 'download_type' is set
        if ('download_type' not in params or
                params['download_type'] is None):
            raise ValueError("Missing the required parameter `download_type` when calling `builds_get_download_uri`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `builds_get_download_uri`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `builds_get_download_uri`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_id' in params:
            path_params['build_id'] = params['build_id']  # noqa: E501
        if 'download_type' in params:
            path_params['download_type'] = params['download_type']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/downloads/{download_type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DownloadContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_get_log(self, build_id, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_get_log  # noqa: E501

        Get the build log  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_get_log(build_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int build_id: The build ID (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: BuildLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_get_log_with_http_info(build_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_get_log_with_http_info(build_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def builds_get_log_with_http_info(self, build_id, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_get_log  # noqa: E501

        Get the build log  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_get_log_with_http_info(build_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int build_id: The build ID (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: BuildLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_get_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `builds_get_log`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `builds_get_log`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `builds_get_log`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_id' in params:
            path_params['build_id'] = params['build_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_get_status_by_app_id(self, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_get_status_by_app_id  # noqa: E501

        Application specific build service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_get_status_by_app_id(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: BuildServiceStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_get_status_by_app_id_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_get_status_by_app_id_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def builds_get_status_by_app_id_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_get_status_by_app_id  # noqa: E501

        Application specific build service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_get_status_by_app_id_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: BuildServiceStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_get_status_by_app_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `builds_get_status_by_app_id`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `builds_get_status_by_app_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/build_service_status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildServiceStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_list_branches(self, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_list_branches  # noqa: E501

        Returns the list of Git branches for this application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_list_branches(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: BranchStatusCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_list_branches_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_list_branches_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def builds_list_branches_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_list_branches  # noqa: E501

        Returns the list of Git branches for this application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_list_branches_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: BranchStatusCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_list_branches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `builds_list_branches`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `builds_list_branches`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/branches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BranchStatusCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_list_by_branch(self, branch, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_list_by_branch  # noqa: E501

        Returns the list of builds for the branch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_list_by_branch(branch, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str branch: The branch name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Builds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_list_by_branch_with_http_info(branch, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_list_by_branch_with_http_info(branch, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def builds_list_by_branch_with_http_info(self, branch, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_list_by_branch  # noqa: E501

        Returns the list of builds for the branch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_list_by_branch_with_http_info(branch, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str branch: The branch name (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Builds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['branch', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_list_by_branch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `builds_list_by_branch`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `builds_list_by_branch`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `builds_list_by_branch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Builds',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_list_toolset_projects(self, branch, os, platform, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_list_toolset_projects  # noqa: E501

        Returns the projects in the repository for the branch, for all toolsets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_list_toolset_projects(branch, os, platform, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str branch: The branch name (required)
        :param str os: The desired OS for the project scan; normally the same as the app OS (required)
        :param str platform: The desired platform for the project scan (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ToolsetProjects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_list_toolset_projects_with_http_info(branch, os, platform, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_list_toolset_projects_with_http_info(branch, os, platform, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def builds_list_toolset_projects_with_http_info(self, branch, os, platform, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_list_toolset_projects  # noqa: E501

        Returns the projects in the repository for the branch, for all toolsets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_list_toolset_projects_with_http_info(branch, os, platform, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str branch: The branch name (required)
        :param str os: The desired OS for the project scan; normally the same as the app OS (required)
        :param str platform: The desired platform for the project scan (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: ToolsetProjects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['branch', 'os', 'platform', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_list_toolset_projects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `builds_list_toolset_projects`")  # noqa: E501
        # verify the required parameter 'os' is set
        if ('os' not in params or
                params['os'] is None):
            raise ValueError("Missing the required parameter `os` when calling `builds_list_toolset_projects`")  # noqa: E501
        # verify the required parameter 'platform' is set
        if ('platform' not in params or
                params['platform'] is None):
            raise ValueError("Missing the required parameter `platform` when calling `builds_list_toolset_projects`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `builds_list_toolset_projects`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `builds_list_toolset_projects`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'os' in params:
            query_params.append(('os', params['os']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/toolset_projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ToolsetProjects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_list_toolsets(self, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_list_toolsets  # noqa: E501

        Returns available toolsets for application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_list_toolsets(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str tools: Toolset name
        :return: Toolsets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_list_toolsets_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_list_toolsets_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def builds_list_toolsets_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_list_toolsets  # noqa: E501

        Returns available toolsets for application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_list_toolsets_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str tools: Toolset name
        :return: Toolsets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'tools']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_list_toolsets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `builds_list_toolsets`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `builds_list_toolsets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'tools' in params:
            query_params.append(('tools', params['tools']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/toolsets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Toolsets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_list_xamarin_sdk_bundles(self, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_list_xamarin_sdk_bundles  # noqa: E501

        Gets the Xamarin SDK bundles available to this app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_list_xamarin_sdk_bundles(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: XamarinSDKBundles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_list_xamarin_sdk_bundles_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_list_xamarin_sdk_bundles_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def builds_list_xamarin_sdk_bundles_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_list_xamarin_sdk_bundles  # noqa: E501

        Gets the Xamarin SDK bundles available to this app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_list_xamarin_sdk_bundles_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: XamarinSDKBundles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_list_xamarin_sdk_bundles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `builds_list_xamarin_sdk_bundles`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `builds_list_xamarin_sdk_bundles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/xamarin_sdk_bundles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='XamarinSDKBundles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_list_xcode_versions(self, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_list_xcode_versions  # noqa: E501

        Gets the Xcode versions available to this app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_list_xcode_versions(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: XcodeVersions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_list_xcode_versions_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_list_xcode_versions_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def builds_list_xcode_versions_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_list_xcode_versions  # noqa: E501

        Gets the Xcode versions available to this app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_list_xcode_versions_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: XcodeVersions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_list_xcode_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `builds_list_xcode_versions`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `builds_list_xcode_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/xcode_versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='XcodeVersions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_update(self, body, build_id, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_update  # noqa: E501

        Cancels a build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_update(body, build_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BuildPatch body: (required)
        :param int build_id: The build ID (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_update_with_http_info(body, build_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.builds_update_with_http_info(body, build_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def builds_update_with_http_info(self, body, build_id, owner_name, app_name, **kwargs):  # noqa: E501
        """builds_update  # noqa: E501

        Cancels a build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_update_with_http_info(body, build_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BuildPatch body: (required)
        :param int build_id: The build ID (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'build_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `builds_update`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `builds_update`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `builds_update`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `builds_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_id' in params:
            path_params['build_id'] = params['build_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def builds_webhook(self, **kwargs):  # noqa: E501
        """builds_webhook  # noqa: E501

        Public webhook sink  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_webhook(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.builds_webhook_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.builds_webhook_with_http_info(**kwargs)  # noqa: E501
            return data

    def builds_webhook_with_http_info(self, **kwargs):  # noqa: E501
        """builds_webhook  # noqa: E501

        Public webhook sink  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.builds_webhook_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method builds_webhook" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/public/hooks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commits_list_by_sha_list(self, hashes, owner_name, app_name, **kwargs):  # noqa: E501
        """commits_list_by_sha_list  # noqa: E501

        Returns commit information for a batch of shas  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commits_list_by_sha_list(hashes, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] hashes: A collection of commit SHAs comma-delimited (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: CommitDetailsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commits_list_by_sha_list_with_http_info(hashes, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.commits_list_by_sha_list_with_http_info(hashes, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def commits_list_by_sha_list_with_http_info(self, hashes, owner_name, app_name, **kwargs):  # noqa: E501
        """commits_list_by_sha_list  # noqa: E501

        Returns commit information for a batch of shas  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commits_list_by_sha_list_with_http_info(hashes, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] hashes: A collection of commit SHAs comma-delimited (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: CommitDetailsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashes', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commits_list_by_sha_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashes' is set
        if ('hashes' not in params or
                params['hashes'] is None):
            raise ValueError("Missing the required parameter `hashes` when calling `commits_list_by_sha_list`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `commits_list_by_sha_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `commits_list_by_sha_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'hashes' in params:
            query_params.append(('hashes', params['hashes']))  # noqa: E501
            collection_formats['hashes'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/commits/batch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommitDetailsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_assets_create(self, owner_name, app_name, **kwargs):  # noqa: E501
        """file_assets_create  # noqa: E501

        Create a new asset to upload a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_assets_create(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param object body:
        :return: FileAsset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_assets_create_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.file_assets_create_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def file_assets_create_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """file_assets_create  # noqa: E501

        Create a new asset to upload a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_assets_create_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param object body:
        :return: FileAsset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_assets_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `file_assets_create`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `file_assets_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/file_asset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileAsset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repositories_list(self, source_host, owner_name, app_name, **kwargs):  # noqa: E501
        """repositories_list  # noqa: E501

        Gets the repositories available from the source code host  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repositories_list(source_host, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_host: The source host (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str vsts_account_name: Filter repositories only for specified account and project, \"vstsProjectId\" is required
        :param str vsts_project_id: Filter repositories only for specified account and project, \"vstsAccountName\" is required
        :param str service_connection_id: The id of the service connection (private). Required for GitLab self-hosted repositories
        :param str form: The selected form of the object
        :return: SourceRepositories
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repositories_list_with_http_info(source_host, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.repositories_list_with_http_info(source_host, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def repositories_list_with_http_info(self, source_host, owner_name, app_name, **kwargs):  # noqa: E501
        """repositories_list  # noqa: E501

        Gets the repositories available from the source code host  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repositories_list_with_http_info(source_host, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_host: The source host (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str vsts_account_name: Filter repositories only for specified account and project, \"vstsProjectId\" is required
        :param str vsts_project_id: Filter repositories only for specified account and project, \"vstsAccountName\" is required
        :param str service_connection_id: The id of the service connection (private). Required for GitLab self-hosted repositories
        :param str form: The selected form of the object
        :return: SourceRepositories
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_host', 'owner_name', 'app_name', 'vsts_account_name', 'vsts_project_id', 'service_connection_id', 'form']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_host' is set
        if ('source_host' not in params or
                params['source_host'] is None):
            raise ValueError("Missing the required parameter `source_host` when calling `repositories_list`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `repositories_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `repositories_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_host' in params:
            path_params['source_host'] = params['source_host']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'vsts_account_name' in params:
            query_params.append(('vstsAccountName', params['vsts_account_name']))  # noqa: E501
        if 'vsts_project_id' in params:
            query_params.append(('vstsProjectId', params['vsts_project_id']))  # noqa: E501
        if 'service_connection_id' in params:
            query_params.append(('service_connection_id', params['service_connection_id']))  # noqa: E501
        if 'form' in params:
            query_params.append(('form', params['form']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/source_hosts/{source_host}/repositories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SourceRepositories',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repository_configurations_create_or_update(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """repository_configurations_create_or_update  # noqa: E501

        Configures the repository for build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_configurations_create_or_update(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: The repository information (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repository_configurations_create_or_update_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.repository_configurations_create_or_update_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def repository_configurations_create_or_update_with_http_info(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """repository_configurations_create_or_update  # noqa: E501

        Configures the repository for build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_configurations_create_or_update_with_http_info(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: The repository information (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_configurations_create_or_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `repository_configurations_create_or_update`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `repository_configurations_create_or_update`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `repository_configurations_create_or_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/repo_config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repository_configurations_delete(self, owner_name, app_name, **kwargs):  # noqa: E501
        """repository_configurations_delete  # noqa: E501

        Removes the configuration for the repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_configurations_delete(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repository_configurations_delete_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.repository_configurations_delete_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def repository_configurations_delete_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """repository_configurations_delete  # noqa: E501

        Removes the configuration for the repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_configurations_delete_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_configurations_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `repository_configurations_delete`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `repository_configurations_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/repo_config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repository_configurations_list(self, owner_name, app_name, **kwargs):  # noqa: E501
        """repository_configurations_list  # noqa: E501

        Returns the repository build configuration status of the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_configurations_list(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param bool include_inactive: Include inactive configurations if none are active
        :return: RepoConfigs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repository_configurations_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.repository_configurations_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def repository_configurations_list_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """repository_configurations_list  # noqa: E501

        Returns the repository build configuration status of the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repository_configurations_list_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param bool include_inactive: Include inactive configurations if none are active
        :return: RepoConfigs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'include_inactive']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_configurations_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `repository_configurations_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `repository_configurations_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'include_inactive' in params:
            query_params.append(('includeInactive', params['include_inactive']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/repo_config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepoConfigs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
