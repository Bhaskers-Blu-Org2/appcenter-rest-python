# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from appcenter.api_client import ApiClient


class TestApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def test_archive_test_run(self, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_archive_test_run  # noqa: E501

        Logically deletes a test run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_archive_test_run(test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_run_id: The ID of the test run (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestRun
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_archive_test_run_with_http_info(test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_archive_test_run_with_http_info(test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_archive_test_run_with_http_info(self, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_archive_test_run  # noqa: E501

        Logically deletes a test run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_archive_test_run_with_http_info(test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_run_id: The ID of the test run (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_run_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_archive_test_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params or
                params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `test_archive_test_run`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_archive_test_run`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_archive_test_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_run_id' in params:
            path_params['test_run_id'] = params['test_run_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_create_device_selection(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """test_create_device_selection  # noqa: E501

        Creates a short ID for a list of devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_create_device_selection(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceList body: (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DeviceSelection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_create_device_selection_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_create_device_selection_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_create_device_selection_with_http_info(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """test_create_device_selection  # noqa: E501

        Creates a short ID for a list of devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_create_device_selection_with_http_info(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceList body: (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DeviceSelection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_create_device_selection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `test_create_device_selection`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_create_device_selection`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_create_device_selection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/device_selection', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSelection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_create_device_set_of_owner(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """test_create_device_set_of_owner  # noqa: E501

        Creates a device set belonging to the owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_create_device_set_of_owner(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceSetUpdate body: (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DeviceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_create_device_set_of_owner_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_create_device_set_of_owner_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_create_device_set_of_owner_with_http_info(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """test_create_device_set_of_owner  # noqa: E501

        Creates a device set belonging to the owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_create_device_set_of_owner_with_http_info(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceSetUpdate body: (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DeviceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_create_device_set_of_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `test_create_device_set_of_owner`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_create_device_set_of_owner`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_create_device_set_of_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_create_device_set_of_user(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """test_create_device_set_of_user  # noqa: E501

        Creates a device set belonging to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_create_device_set_of_user(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceSetUpdate body: (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DeviceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_create_device_set_of_user_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_create_device_set_of_user_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_create_device_set_of_user_with_http_info(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """test_create_device_set_of_user  # noqa: E501

        Creates a device set belonging to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_create_device_set_of_user_with_http_info(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceSetUpdate body: (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DeviceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_create_device_set_of_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `test_create_device_set_of_user`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_create_device_set_of_user`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_create_device_set_of_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/user/device_sets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_create_subscription(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_create_subscription  # noqa: E501

        Accept a free trial subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_create_subscription(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_create_subscription_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_create_subscription_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_create_subscription_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_create_subscription  # noqa: E501

        Accept a free trial subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_create_subscription_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_create_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_create_subscription`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_create_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Subscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_create_test_run(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_create_test_run  # noqa: E501

        Creates a new test run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_create_test_run(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_create_test_run_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_create_test_run_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_create_test_run_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_create_test_run  # noqa: E501

        Creates a new test run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_create_test_run_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_create_test_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_create_test_run`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_create_test_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test_runs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_create_test_series(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """test_create_test_series  # noqa: E501

        Creates new test series for an application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_create_test_series(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestSeriesName body: (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestSeries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_create_test_series_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_create_test_series_with_http_info(body, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_create_test_series_with_http_info(self, body, owner_name, app_name, **kwargs):  # noqa: E501
        """test_create_test_series  # noqa: E501

        Creates new test series for an application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_create_test_series_with_http_info(body, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestSeriesName body: (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestSeries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_create_test_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `test_create_test_series`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_create_test_series`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_create_test_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test_series', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestSeries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_delete_device_set_of_owner(self, id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_delete_device_set_of_owner  # noqa: E501

        Deletes a device set belonging to the owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_delete_device_set_of_owner(id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The UUID of the device set (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_delete_device_set_of_owner_with_http_info(id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_delete_device_set_of_owner_with_http_info(id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_delete_device_set_of_owner_with_http_info(self, id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_delete_device_set_of_owner  # noqa: E501

        Deletes a device set belonging to the owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_delete_device_set_of_owner_with_http_info(id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The UUID of the device set (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_delete_device_set_of_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `test_delete_device_set_of_owner`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_delete_device_set_of_owner`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_delete_device_set_of_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_delete_device_set_of_user(self, id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_delete_device_set_of_user  # noqa: E501

        Deletes a device set belonging to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_delete_device_set_of_user(id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The UUID of the device set (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_delete_device_set_of_user_with_http_info(id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_delete_device_set_of_user_with_http_info(id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_delete_device_set_of_user_with_http_info(self, id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_delete_device_set_of_user  # noqa: E501

        Deletes a device set belonging to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_delete_device_set_of_user_with_http_info(id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The UUID of the device set (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_delete_device_set_of_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `test_delete_device_set_of_user`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_delete_device_set_of_user`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_delete_device_set_of_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_delete_test_series(self, test_series_slug, owner_name, app_name, **kwargs):  # noqa: E501
        """test_delete_test_series  # noqa: E501

        Deletes a single test series  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_delete_test_series(test_series_slug, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_series_slug: The slug of the test series (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_delete_test_series_with_http_info(test_series_slug, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_delete_test_series_with_http_info(test_series_slug, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_delete_test_series_with_http_info(self, test_series_slug, owner_name, app_name, **kwargs):  # noqa: E501
        """test_delete_test_series  # noqa: E501

        Deletes a single test series  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_delete_test_series_with_http_info(test_series_slug, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_series_slug: The slug of the test series (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_series_slug', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_delete_test_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'test_series_slug' is set
        if ('test_series_slug' not in params or
                params['test_series_slug'] is None):
            raise ValueError("Missing the required parameter `test_series_slug` when calling `test_delete_test_series`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_delete_test_series`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_delete_test_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_series_slug' in params:
            path_params['test_series_slug'] = params['test_series_slug']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_gdpr_export_account(self, **kwargs):  # noqa: E501
        """test_gdpr_export_account  # noqa: E501

        Lists account data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_gdpr_export_account(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TestGDPRAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_gdpr_export_account_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_gdpr_export_account_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_gdpr_export_account_with_http_info(self, **kwargs):  # noqa: E501
        """test_gdpr_export_account  # noqa: E501

        Lists account data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_gdpr_export_account_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TestGDPRAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_gdpr_export_account" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/account/test/export/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestGDPRAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_gdpr_export_accounts(self, **kwargs):  # noqa: E501
        """test_gdpr_export_accounts  # noqa: E501

        Lists all the endpoints available for Test accounts data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_gdpr_export_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TestGDPRResourceList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_gdpr_export_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_gdpr_export_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_gdpr_export_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """test_gdpr_export_accounts  # noqa: E501

        Lists all the endpoints available for Test accounts data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_gdpr_export_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TestGDPRResourceList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_gdpr_export_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/account/test/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestGDPRResourceList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_gdpr_export_apps(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_gdpr_export_apps  # noqa: E501

        Lists all the endpoints available for Test apps data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_gdpr_export_apps(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestGDPRResourceList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_gdpr_export_apps_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_gdpr_export_apps_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_gdpr_export_apps_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_gdpr_export_apps  # noqa: E501

        Lists all the endpoints available for Test apps data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_gdpr_export_apps_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestGDPRResourceList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_gdpr_export_apps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_gdpr_export_apps`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_gdpr_export_apps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestGDPRResourceList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_gdpr_export_feature_flag(self, **kwargs):  # noqa: E501
        """test_gdpr_export_feature_flag  # noqa: E501

        Lists feature flag data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_gdpr_export_feature_flag(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TestGDPRFeatureFlag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_gdpr_export_feature_flag_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_gdpr_export_feature_flag_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_gdpr_export_feature_flag_with_http_info(self, **kwargs):  # noqa: E501
        """test_gdpr_export_feature_flag  # noqa: E501

        Lists feature flag data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_gdpr_export_feature_flag_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TestGDPRFeatureFlag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_gdpr_export_feature_flag" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/account/test/export/featureFlags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestGDPRFeatureFlag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_gdpr_export_file_set_file(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_gdpr_export_file_set_file  # noqa: E501

        Lists file set file data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_gdpr_export_file_set_file(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestGDPRFileSetFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_gdpr_export_file_set_file_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_gdpr_export_file_set_file_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_gdpr_export_file_set_file_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_gdpr_export_file_set_file  # noqa: E501

        Lists file set file data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_gdpr_export_file_set_file_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestGDPRFileSetFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_gdpr_export_file_set_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_gdpr_export_file_set_file`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_gdpr_export_file_set_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestGDPRFileSetFile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_gdpr_export_hash_file(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_gdpr_export_hash_file  # noqa: E501

        Lists hash file data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_gdpr_export_hash_file(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestGDPRHashFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_gdpr_export_hash_file_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_gdpr_export_hash_file_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_gdpr_export_hash_file_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_gdpr_export_hash_file  # noqa: E501

        Lists hash file data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_gdpr_export_hash_file_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestGDPRHashFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_gdpr_export_hash_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_gdpr_export_hash_file`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_gdpr_export_hash_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestGDPRHashFile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_gdpr_export_pipeline_test(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_gdpr_export_pipeline_test  # noqa: E501

        Lists pipeline test data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_gdpr_export_pipeline_test(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestGDPRPipelineTest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_gdpr_export_pipeline_test_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_gdpr_export_pipeline_test_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_gdpr_export_pipeline_test_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_gdpr_export_pipeline_test  # noqa: E501

        Lists pipeline test data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_gdpr_export_pipeline_test_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestGDPRPipelineTest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_gdpr_export_pipeline_test" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_gdpr_export_pipeline_test`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_gdpr_export_pipeline_test`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestGDPRPipelineTest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_gdpr_export_test_run(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_gdpr_export_test_run  # noqa: E501

        Lists test run data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_gdpr_export_test_run(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestGDPRTestRun
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_gdpr_export_test_run_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_gdpr_export_test_run_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_gdpr_export_test_run_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_gdpr_export_test_run  # noqa: E501

        Lists test run data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_gdpr_export_test_run_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestGDPRTestRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_gdpr_export_test_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_gdpr_export_test_run`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_gdpr_export_test_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestGDPRTestRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_get_all_test_runs_for_series(self, test_series_slug, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_all_test_runs_for_series  # noqa: E501

        Returns list of all test runs for a given test series  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_all_test_runs_for_series(test_series_slug, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_series_slug: The slug of the test series (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[TestRun]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_get_all_test_runs_for_series_with_http_info(test_series_slug, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_get_all_test_runs_for_series_with_http_info(test_series_slug, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_get_all_test_runs_for_series_with_http_info(self, test_series_slug, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_all_test_runs_for_series  # noqa: E501

        Returns list of all test runs for a given test series  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_all_test_runs_for_series_with_http_info(test_series_slug, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_series_slug: The slug of the test series (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[TestRun]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_series_slug', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_get_all_test_runs_for_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'test_series_slug' is set
        if ('test_series_slug' not in params or
                params['test_series_slug'] is None):
            raise ValueError("Missing the required parameter `test_series_slug` when calling `test_get_all_test_runs_for_series`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_get_all_test_runs_for_series`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_get_all_test_runs_for_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_series_slug' in params:
            path_params['test_series_slug'] = params['test_series_slug']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TestRun]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_get_all_test_series(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_all_test_series  # noqa: E501

        Returns list of all test series for an application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_all_test_series(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str query: A query string to filter test series
        :return: list[TestSeries]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_get_all_test_series_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_get_all_test_series_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_get_all_test_series_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_all_test_series  # noqa: E501

        Returns list of all test series for an application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_all_test_series_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str query: A query string to filter test series
        :return: list[TestSeries]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_get_all_test_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_get_all_test_series`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_get_all_test_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test_series', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TestSeries]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_get_device_configurations(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_device_configurations  # noqa: E501

        Returns a list of available devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_device_configurations(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str app_upload_id: The ID of the test run
        :return: list[DeviceConfiguration]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_get_device_configurations_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_get_device_configurations_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_get_device_configurations_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_device_configurations  # noqa: E501

        Returns a list of available devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_device_configurations_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :param str app_upload_id: The ID of the test run
        :return: list[DeviceConfiguration]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'app_upload_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_get_device_configurations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_get_device_configurations`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_get_device_configurations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'app_upload_id' in params:
            query_params.append(('app_upload_id', params['app_upload_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/device_configurations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeviceConfiguration]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_get_device_set_of_owner(self, id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_device_set_of_owner  # noqa: E501

        Gets a device set belonging to the owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_device_set_of_owner(id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The UUID of the device set (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DeviceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_get_device_set_of_owner_with_http_info(id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_get_device_set_of_owner_with_http_info(id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_get_device_set_of_owner_with_http_info(self, id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_device_set_of_owner  # noqa: E501

        Gets a device set belonging to the owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_device_set_of_owner_with_http_info(id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The UUID of the device set (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DeviceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_get_device_set_of_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `test_get_device_set_of_owner`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_get_device_set_of_owner`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_get_device_set_of_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_get_device_set_of_user(self, id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_device_set_of_user  # noqa: E501

        Gets a device set belonging to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_device_set_of_user(id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The UUID of the device set (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DeviceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_get_device_set_of_user_with_http_info(id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_get_device_set_of_user_with_http_info(id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_get_device_set_of_user_with_http_info(self, id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_device_set_of_user  # noqa: E501

        Gets a device set belonging to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_device_set_of_user_with_http_info(id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The UUID of the device set (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DeviceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_get_device_set_of_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `test_get_device_set_of_user`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_get_device_set_of_user`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_get_device_set_of_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_get_subscriptions(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_subscriptions  # noqa: E501

        Get information about the currently active subscriptions, if any  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_subscriptions(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_get_subscriptions_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_get_subscriptions_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_get_subscriptions_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_subscriptions  # noqa: E501

        Get information about the currently active subscriptions, if any  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_subscriptions_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_get_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_get_subscriptions`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_get_subscriptions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Subscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_get_test_report(self, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_test_report  # noqa: E501

        Returns a single test report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_test_report(test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_run_id: The ID of the test run (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_get_test_report_with_http_info(test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_get_test_report_with_http_info(test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_get_test_report_with_http_info(self, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_test_report  # noqa: E501

        Returns a single test report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_test_report_with_http_info(test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_run_id: The ID of the test run (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_run_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_get_test_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params or
                params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `test_get_test_report`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_get_test_report`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_get_test_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_run_id' in params:
            path_params['test_run_id'] = params['test_run_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_get_test_run(self, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_test_run  # noqa: E501

        Returns a single test runs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_test_run(test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_run_id: The ID of the test run (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestRun
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_get_test_run_with_http_info(test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_get_test_run_with_http_info(test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_get_test_run_with_http_info(self, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_test_run  # noqa: E501

        Returns a single test runs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_test_run_with_http_info(test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_run_id: The ID of the test run (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_run_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_get_test_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params or
                params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `test_get_test_run`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_get_test_run`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_get_test_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_run_id' in params:
            path_params['test_run_id'] = params['test_run_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_get_test_run_state(self, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_test_run_state  # noqa: E501

        Gets state of the test run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_test_run_state(test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_run_id: The ID of the test run (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestRunState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_get_test_run_state_with_http_info(test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_get_test_run_state_with_http_info(test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_get_test_run_state_with_http_info(self, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_test_run_state  # noqa: E501

        Gets state of the test run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_test_run_state_with_http_info(test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_run_id: The ID of the test run (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestRunState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_run_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_get_test_run_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params or
                params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `test_get_test_run_state`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_get_test_run_state`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_get_test_run_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_run_id' in params:
            path_params['test_run_id'] = params['test_run_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestRunState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_get_test_runs(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_test_runs  # noqa: E501

        Returns a list of test runs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_test_runs(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[TestRun]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_get_test_runs_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_get_test_runs_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_get_test_runs_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_get_test_runs  # noqa: E501

        Returns a list of test runs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_get_test_runs_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[TestRun]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_get_test_runs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_get_test_runs`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_get_test_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test_runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TestRun]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_list_device_sets_of_owner(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_list_device_sets_of_owner  # noqa: E501

        Lists device sets belonging to the owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_list_device_sets_of_owner(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[DeviceSet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_list_device_sets_of_owner_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_list_device_sets_of_owner_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_list_device_sets_of_owner_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_list_device_sets_of_owner  # noqa: E501

        Lists device sets belonging to the owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_list_device_sets_of_owner_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[DeviceSet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_list_device_sets_of_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_list_device_sets_of_owner`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_list_device_sets_of_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeviceSet]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_list_device_sets_of_user(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_list_device_sets_of_user  # noqa: E501

        Lists device sets belonging to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_list_device_sets_of_user(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[DeviceSet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_list_device_sets_of_user_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_list_device_sets_of_user_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_list_device_sets_of_user_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """test_list_device_sets_of_user  # noqa: E501

        Lists device sets belonging to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_list_device_sets_of_user_with_http_info(owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[DeviceSet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_list_device_sets_of_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_list_device_sets_of_user`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_list_device_sets_of_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/user/device_sets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeviceSet]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_patch_test_series(self, body, test_series_slug, owner_name, app_name, **kwargs):  # noqa: E501
        """test_patch_test_series  # noqa: E501

        Updates name and slug of a test series  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_patch_test_series(body, test_series_slug, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestSeriesName body: (required)
        :param str test_series_slug: The slug of the test series (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestSeries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_patch_test_series_with_http_info(body, test_series_slug, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_patch_test_series_with_http_info(body, test_series_slug, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_patch_test_series_with_http_info(self, body, test_series_slug, owner_name, app_name, **kwargs):  # noqa: E501
        """test_patch_test_series  # noqa: E501

        Updates name and slug of a test series  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_patch_test_series_with_http_info(body, test_series_slug, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestSeriesName body: (required)
        :param str test_series_slug: The slug of the test series (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestSeries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'test_series_slug', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_patch_test_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `test_patch_test_series`")  # noqa: E501
        # verify the required parameter 'test_series_slug' is set
        if ('test_series_slug' not in params or
                params['test_series_slug'] is None):
            raise ValueError("Missing the required parameter `test_series_slug` when calling `test_patch_test_series`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_patch_test_series`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_patch_test_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_series_slug' in params:
            path_params['test_series_slug'] = params['test_series_slug']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestSeries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_start_test_run(self, body, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_start_test_run  # noqa: E501

        Starts test run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_start_test_run(body, test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestCloudStartTestRunOptions body: Option required to start the test run (required)
        :param str test_run_id: The ID of the test run (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestCloudStartTestRunResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_start_test_run_with_http_info(body, test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_start_test_run_with_http_info(body, test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_start_test_run_with_http_info(self, body, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_start_test_run  # noqa: E501

        Starts test run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_start_test_run_with_http_info(body, test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestCloudStartTestRunOptions body: Option required to start the test run (required)
        :param str test_run_id: The ID of the test run (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestCloudStartTestRunResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'test_run_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_start_test_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `test_start_test_run`")  # noqa: E501
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params or
                params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `test_start_test_run`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_start_test_run`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_start_test_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_run_id' in params:
            path_params['test_run_id'] = params['test_run_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestCloudStartTestRunResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_start_uploading_file(self, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_start_uploading_file  # noqa: E501

        Uploads file for a test run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_start_uploading_file(test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_run_id: The ID of the test run (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_start_uploading_file_with_http_info(test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_start_uploading_file_with_http_info(test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_start_uploading_file_with_http_info(self, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_start_uploading_file  # noqa: E501

        Uploads file for a test run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_start_uploading_file_with_http_info(test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_run_id: The ID of the test run (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_run_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_start_uploading_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params or
                params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `test_start_uploading_file`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_start_uploading_file`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_start_uploading_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_run_id' in params:
            path_params['test_run_id'] = params['test_run_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_stop_test_run(self, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_stop_test_run  # noqa: E501

        Stop a test run execution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_stop_test_run(test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_run_id: The ID of the test run to be stopped (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestRun
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_stop_test_run_with_http_info(test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_stop_test_run_with_http_info(test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_stop_test_run_with_http_info(self, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_stop_test_run  # noqa: E501

        Stop a test run execution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_stop_test_run_with_http_info(test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str test_run_id: The ID of the test run to be stopped (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: TestRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_run_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_stop_test_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params or
                params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `test_stop_test_run`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_stop_test_run`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_stop_test_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_run_id' in params:
            path_params['test_run_id'] = params['test_run_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_update_device_set_of_owner(self, body, id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_update_device_set_of_owner  # noqa: E501

        Updates a device set belonging to the owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_update_device_set_of_owner(body, id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceSetUpdate body: (required)
        :param str id: The UUID of the device set (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DeviceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_update_device_set_of_owner_with_http_info(body, id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_update_device_set_of_owner_with_http_info(body, id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_update_device_set_of_owner_with_http_info(self, body, id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_update_device_set_of_owner  # noqa: E501

        Updates a device set belonging to the owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_update_device_set_of_owner_with_http_info(body, id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceSetUpdate body: (required)
        :param str id: The UUID of the device set (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DeviceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_update_device_set_of_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `test_update_device_set_of_owner`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `test_update_device_set_of_owner`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_update_device_set_of_owner`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_update_device_set_of_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_update_device_set_of_user(self, body, id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_update_device_set_of_user  # noqa: E501

        Updates a device set belonging to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_update_device_set_of_user(body, id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceSetUpdate body: (required)
        :param str id: The UUID of the device set (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DeviceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_update_device_set_of_user_with_http_info(body, id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_update_device_set_of_user_with_http_info(body, id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_update_device_set_of_user_with_http_info(self, body, id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_update_device_set_of_user  # noqa: E501

        Updates a device set belonging to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_update_device_set_of_user_with_http_info(body, id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceSetUpdate body: (required)
        :param str id: The UUID of the device set (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: DeviceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_update_device_set_of_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `test_update_device_set_of_user`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `test_update_device_set_of_user`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_update_device_set_of_user`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_update_device_set_of_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_upload_hash(self, body, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_upload_hash  # noqa: E501

        Adds file with the given hash to a test run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_upload_hash(body, test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestCloudFileHashDeprecated body: File hash information (required)
        :param str test_run_id: The ID of the test run (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_upload_hash_with_http_info(body, test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_upload_hash_with_http_info(body, test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_upload_hash_with_http_info(self, body, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_upload_hash  # noqa: E501

        Adds file with the given hash to a test run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_upload_hash_with_http_info(body, test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestCloudFileHashDeprecated body: File hash information (required)
        :param str test_run_id: The ID of the test run (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'test_run_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_upload_hash" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `test_upload_hash`")  # noqa: E501
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params or
                params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `test_upload_hash`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_upload_hash`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_upload_hash`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_run_id' in params:
            path_params['test_run_id'] = params['test_run_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_upload_hashes_batch(self, body, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_upload_hashes_batch  # noqa: E501

        Adds file with the given hash to a test run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_upload_hashes_batch(body, test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[TestCloudFileHash] body: File hash information (required)
        :param str test_run_id: The ID of the test run (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[TestCloudFileHashResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_upload_hashes_batch_with_http_info(body, test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.test_upload_hashes_batch_with_http_info(body, test_run_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def test_upload_hashes_batch_with_http_info(self, body, test_run_id, owner_name, app_name, **kwargs):  # noqa: E501
        """test_upload_hashes_batch  # noqa: E501

        Adds file with the given hash to a test run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_upload_hashes_batch_with_http_info(body, test_run_id, owner_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[TestCloudFileHash] body: File hash information (required)
        :param str test_run_id: The ID of the test run (required)
        :param str owner_name: The name of the owner (required)
        :param str app_name: The name of the application (required)
        :return: list[TestCloudFileHashResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'test_run_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_upload_hashes_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `test_upload_hashes_batch`")  # noqa: E501
        # verify the required parameter 'test_run_id' is set
        if ('test_run_id' not in params or
                params['test_run_id'] is None):
            raise ValueError("Missing the required parameter `test_run_id` when calling `test_upload_hashes_batch`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `test_upload_hashes_batch`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `test_upload_hashes_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'test_run_id' in params:
            path_params['test_run_id'] = params['test_run_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TestCloudFileHashResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
